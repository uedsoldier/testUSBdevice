
testUSBdevice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000745c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08007568  08007568  00008568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075e0  080075e0  0000917c  2**0
                  CONTENTS
  4 .ARM          00000000  080075e0  080075e0  0000917c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080075e0  080075e0  0000917c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075e0  080075e0  000085e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080075e4  080075e4  000085e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000017c  20000000  080075e8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000678  2000017c  08007764  0000917c  2**2
                  ALLOC
 10 ._user_heap_stack 00001404  200007f4  08007764  000097f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000917c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b9c8  00000000  00000000  000091a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029fb  00000000  00000000  00014b6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  00017568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000792  00000000  00000000  00017fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192a3  00000000  00000000  0001876a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e8ab  00000000  00000000  00031a0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084687  00000000  00000000  000402b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c493f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002774  00000000  00000000  000c4984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000c70f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	08007550 	.word	0x08007550

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	08007550 	.word	0x08007550

0800014c <MX_GPIO_Init>:
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b49      	ldr	r3, [pc, #292]	@ (8000288 <MX_GPIO_Init+0x13c>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a48      	ldr	r2, [pc, #288]	@ (8000288 <MX_GPIO_Init+0x13c>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b46      	ldr	r3, [pc, #280]	@ (8000288 <MX_GPIO_Init+0x13c>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b43      	ldr	r3, [pc, #268]	@ (8000288 <MX_GPIO_Init+0x13c>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a42      	ldr	r2, [pc, #264]	@ (8000288 <MX_GPIO_Init+0x13c>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b40      	ldr	r3, [pc, #256]	@ (8000288 <MX_GPIO_Init+0x13c>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b3d      	ldr	r3, [pc, #244]	@ (8000288 <MX_GPIO_Init+0x13c>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a3c      	ldr	r2, [pc, #240]	@ (8000288 <MX_GPIO_Init+0x13c>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b3a      	ldr	r3, [pc, #232]	@ (8000288 <MX_GPIO_Init+0x13c>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b37      	ldr	r3, [pc, #220]	@ (8000288 <MX_GPIO_Init+0x13c>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a36      	ldr	r2, [pc, #216]	@ (8000288 <MX_GPIO_Init+0x13c>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b34      	ldr	r3, [pc, #208]	@ (8000288 <MX_GPIO_Init+0x13c>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80001c0:	2201      	movs	r2, #1
 80001c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001c6:	4831      	ldr	r0, [pc, #196]	@ (800028c <MX_GPIO_Init+0x140>)
 80001c8:	f000 fcc9 	bl	8000b5e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80001cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80001d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001d2:	2301      	movs	r3, #1
 80001d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d6:	2300      	movs	r3, #0
 80001d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001da:	2302      	movs	r3, #2
 80001dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80001de:	f107 0310 	add.w	r3, r7, #16
 80001e2:	4619      	mov	r1, r3
 80001e4:	4829      	ldr	r0, [pc, #164]	@ (800028c <MX_GPIO_Init+0x140>)
 80001e6:	f000 fb1f 	bl	8000828 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80001ea:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80001ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80001f0:	2303      	movs	r3, #3
 80001f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001f4:	f107 0310 	add.w	r3, r7, #16
 80001f8:	4619      	mov	r1, r3
 80001fa:	4824      	ldr	r0, [pc, #144]	@ (800028c <MX_GPIO_Init+0x140>)
 80001fc:	f000 fb14 	bl	8000828 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA6 PA7 PA9 PA10
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000200:	f248 63cf 	movw	r3, #34511	@ 0x86cf
 8000204:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000206:	2303      	movs	r3, #3
 8000208:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800020a:	f107 0310 	add.w	r3, r7, #16
 800020e:	4619      	mov	r1, r3
 8000210:	481f      	ldr	r0, [pc, #124]	@ (8000290 <MX_GPIO_Init+0x144>)
 8000212:	f000 fb09 	bl	8000828 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BTN_LEFT_Pin|BTN_RIGHT_Pin;
 8000216:	2330      	movs	r3, #48	@ 0x30
 8000218:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800021a:	4b1e      	ldr	r3, [pc, #120]	@ (8000294 <MX_GPIO_Init+0x148>)
 800021c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800021e:	2301      	movs	r3, #1
 8000220:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000222:	f107 0310 	add.w	r3, r7, #16
 8000226:	4619      	mov	r1, r3
 8000228:	4819      	ldr	r0, [pc, #100]	@ (8000290 <MX_GPIO_Init+0x144>)
 800022a:	f000 fafd 	bl	8000828 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800022e:	f64f 73f7 	movw	r3, #65527	@ 0xfff7
 8000232:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000234:	2303      	movs	r3, #3
 8000236:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000238:	f107 0310 	add.w	r3, r7, #16
 800023c:	4619      	mov	r1, r3
 800023e:	4816      	ldr	r0, [pc, #88]	@ (8000298 <MX_GPIO_Init+0x14c>)
 8000240:	f000 faf2 	bl	8000828 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000244:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000248:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800024a:	2302      	movs	r3, #2
 800024c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800024e:	2302      	movs	r3, #2
 8000250:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000252:	f107 0310 	add.w	r3, r7, #16
 8000256:	4619      	mov	r1, r3
 8000258:	480d      	ldr	r0, [pc, #52]	@ (8000290 <MX_GPIO_Init+0x144>)
 800025a:	f000 fae5 	bl	8000828 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800025e:	2200      	movs	r2, #0
 8000260:	2100      	movs	r1, #0
 8000262:	200a      	movs	r0, #10
 8000264:	f000 faa9 	bl	80007ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000268:	200a      	movs	r0, #10
 800026a:	f000 fac2 	bl	80007f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800026e:	2200      	movs	r2, #0
 8000270:	2100      	movs	r1, #0
 8000272:	2017      	movs	r0, #23
 8000274:	f000 faa1 	bl	80007ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000278:	2017      	movs	r0, #23
 800027a:	f000 faba 	bl	80007f2 <HAL_NVIC_EnableIRQ>

}
 800027e:	bf00      	nop
 8000280:	3720      	adds	r7, #32
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	40021000 	.word	0x40021000
 800028c:	40011000 	.word	0x40011000
 8000290:	40010800 	.word	0x40010800
 8000294:	10310000 	.word	0x10310000
 8000298:	40010c00 	.word	0x40010c00

0800029c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	button_changed = false;
 80002a0:	4b0b      	ldr	r3, [pc, #44]	@ (80002d0 <main+0x34>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002a6:	f000 f94f 	bl	8000548 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002aa:	f000 f817 	bl	80002dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ae:	f7ff ff4d 	bl	800014c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80002b2:	f006 fd2d 	bl	8006d10 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(button_changed){
 80002b6:	4b06      	ldr	r3, [pc, #24]	@ (80002d0 <main+0x34>)
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d0fb      	beq.n	80002b6 <main+0x1a>
		  button_changed = false;
 80002be:	4b04      	ldr	r3, [pc, #16]	@ (80002d0 <main+0x34>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	701a      	strb	r2, [r3, #0]
		  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&joystick, sizeof(joystick));
 80002c4:	2202      	movs	r2, #2
 80002c6:	4903      	ldr	r1, [pc, #12]	@ (80002d4 <main+0x38>)
 80002c8:	4803      	ldr	r0, [pc, #12]	@ (80002d8 <main+0x3c>)
 80002ca:	f005 fbc7 	bl	8005a5c <USBD_CUSTOM_HID_SendReport>
	  if(button_changed){
 80002ce:	e7f2      	b.n	80002b6 <main+0x1a>
 80002d0:	20000198 	.word	0x20000198
 80002d4:	20000000 	.word	0x20000000
 80002d8:	200001a4 	.word	0x200001a4

080002dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b094      	sub	sp, #80	@ 0x50
 80002e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002e6:	2228      	movs	r2, #40	@ 0x28
 80002e8:	2100      	movs	r1, #0
 80002ea:	4618      	mov	r0, r3
 80002ec:	f007 f904 	bl	80074f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f0:	f107 0314 	add.w	r3, r7, #20
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]
 80002f8:	605a      	str	r2, [r3, #4]
 80002fa:	609a      	str	r2, [r3, #8]
 80002fc:	60da      	str	r2, [r3, #12]
 80002fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	605a      	str	r2, [r3, #4]
 8000308:	609a      	str	r2, [r3, #8]
 800030a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800030c:	2301      	movs	r3, #1
 800030e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000310:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000314:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000316:	2300      	movs	r3, #0
 8000318:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800031a:	2301      	movs	r3, #1
 800031c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800031e:	2302      	movs	r3, #2
 8000320:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000322:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000326:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000328:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800032c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000332:	4618      	mov	r0, r3
 8000334:	f002 f9bc 	bl	80026b0 <HAL_RCC_OscConfig>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800033e:	f000 f82d 	bl	800039c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000342:	230f      	movs	r3, #15
 8000344:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000346:	2302      	movs	r3, #2
 8000348:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034a:	2300      	movs	r3, #0
 800034c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800034e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000352:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000354:	2300      	movs	r3, #0
 8000356:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000358:	f107 0314 	add.w	r3, r7, #20
 800035c:	2102      	movs	r1, #2
 800035e:	4618      	mov	r0, r3
 8000360:	f002 fc28 	bl	8002bb4 <HAL_RCC_ClockConfig>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800036a:	f000 f817 	bl	800039c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800036e:	2310      	movs	r3, #16
 8000370:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000372:	2300      	movs	r3, #0
 8000374:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000376:	1d3b      	adds	r3, r7, #4
 8000378:	4618      	mov	r0, r3
 800037a:	f002 fdaf 	bl	8002edc <HAL_RCCEx_PeriphCLKConfig>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000384:	f000 f80a 	bl	800039c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_1);
 8000388:	2200      	movs	r2, #0
 800038a:	f04f 61e0 	mov.w	r1, #117440512	@ 0x7000000
 800038e:	2000      	movs	r0, #0
 8000390:	f002 fcfa 	bl	8002d88 <HAL_RCC_MCOConfig>
}
 8000394:	bf00      	nop
 8000396:	3750      	adds	r7, #80	@ 0x50
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}

0800039c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a0:	b672      	cpsid	i
}
 80003a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003a4:	bf00      	nop
 80003a6:	e7fd      	b.n	80003a4 <Error_Handler+0x8>

080003a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ae:	4b15      	ldr	r3, [pc, #84]	@ (8000404 <HAL_MspInit+0x5c>)
 80003b0:	699b      	ldr	r3, [r3, #24]
 80003b2:	4a14      	ldr	r2, [pc, #80]	@ (8000404 <HAL_MspInit+0x5c>)
 80003b4:	f043 0301 	orr.w	r3, r3, #1
 80003b8:	6193      	str	r3, [r2, #24]
 80003ba:	4b12      	ldr	r3, [pc, #72]	@ (8000404 <HAL_MspInit+0x5c>)
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	f003 0301 	and.w	r3, r3, #1
 80003c2:	60bb      	str	r3, [r7, #8]
 80003c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000404 <HAL_MspInit+0x5c>)
 80003c8:	69db      	ldr	r3, [r3, #28]
 80003ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000404 <HAL_MspInit+0x5c>)
 80003cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003d0:	61d3      	str	r3, [r2, #28]
 80003d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000404 <HAL_MspInit+0x5c>)
 80003d4:	69db      	ldr	r3, [r3, #28]
 80003d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003da:	607b      	str	r3, [r7, #4]
 80003dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003de:	4b0a      	ldr	r3, [pc, #40]	@ (8000408 <HAL_MspInit+0x60>)
 80003e0:	685b      	ldr	r3, [r3, #4]
 80003e2:	60fb      	str	r3, [r7, #12]
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	4a04      	ldr	r2, [pc, #16]	@ (8000408 <HAL_MspInit+0x60>)
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003fa:	bf00      	nop
 80003fc:	3714      	adds	r7, #20
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr
 8000404:	40021000 	.word	0x40021000
 8000408:	40010000 	.word	0x40010000

0800040c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000410:	bf00      	nop
 8000412:	e7fd      	b.n	8000410 <NMI_Handler+0x4>

08000414 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000418:	bf00      	nop
 800041a:	e7fd      	b.n	8000418 <HardFault_Handler+0x4>

0800041c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000420:	bf00      	nop
 8000422:	e7fd      	b.n	8000420 <MemManage_Handler+0x4>

08000424 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000428:	bf00      	nop
 800042a:	e7fd      	b.n	8000428 <BusFault_Handler+0x4>

0800042c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000430:	bf00      	nop
 8000432:	e7fd      	b.n	8000430 <UsageFault_Handler+0x4>

08000434 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000438:	bf00      	nop
 800043a:	46bd      	mov	sp, r7
 800043c:	bc80      	pop	{r7}
 800043e:	4770      	bx	lr

08000440 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000444:	bf00      	nop
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr

0800044c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr

08000458 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800045c:	f000 f8ba 	bl	80005d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000460:	bf00      	nop
 8000462:	bd80      	pop	{r7, pc}

08000464 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	joystick.switches.btn_left = HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port, BTN_LEFT_Pin);
 8000468:	2110      	movs	r1, #16
 800046a:	480a      	ldr	r0, [pc, #40]	@ (8000494 <EXTI4_IRQHandler+0x30>)
 800046c:	f000 fb60 	bl	8000b30 <HAL_GPIO_ReadPin>
 8000470:	4603      	mov	r3, r0
 8000472:	f003 0301 	and.w	r3, r3, #1
 8000476:	b2d9      	uxtb	r1, r3
 8000478:	4a07      	ldr	r2, [pc, #28]	@ (8000498 <EXTI4_IRQHandler+0x34>)
 800047a:	7853      	ldrb	r3, [r2, #1]
 800047c:	f361 0300 	bfi	r3, r1, #0, #1
 8000480:	7053      	strb	r3, [r2, #1]
	button_changed = true;
 8000482:	4b06      	ldr	r3, [pc, #24]	@ (800049c <EXTI4_IRQHandler+0x38>)
 8000484:	2201      	movs	r2, #1
 8000486:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_LEFT_Pin);
 8000488:	2010      	movs	r0, #16
 800048a:	f000 fb99 	bl	8000bc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800048e:	bf00      	nop
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	40010800 	.word	0x40010800
 8000498:	20000000 	.word	0x20000000
 800049c:	20000198 	.word	0x20000198

080004a0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80004a4:	4802      	ldr	r0, [pc, #8]	@ (80004b0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80004a6:	f000 fcd2 	bl	8000e4e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80004aa:	bf00      	nop
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	200004e8 	.word	0x200004e8

080004b4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	joystick.switches.btn_right = HAL_GPIO_ReadPin(BTN_RIGHT_GPIO_Port, BTN_RIGHT_Pin);
 80004b8:	2120      	movs	r1, #32
 80004ba:	480a      	ldr	r0, [pc, #40]	@ (80004e4 <EXTI9_5_IRQHandler+0x30>)
 80004bc:	f000 fb38 	bl	8000b30 <HAL_GPIO_ReadPin>
 80004c0:	4603      	mov	r3, r0
 80004c2:	f003 0301 	and.w	r3, r3, #1
 80004c6:	b2d9      	uxtb	r1, r3
 80004c8:	4a07      	ldr	r2, [pc, #28]	@ (80004e8 <EXTI9_5_IRQHandler+0x34>)
 80004ca:	7853      	ldrb	r3, [r2, #1]
 80004cc:	f361 0341 	bfi	r3, r1, #1, #1
 80004d0:	7053      	strb	r3, [r2, #1]
	button_changed = true;
 80004d2:	4b06      	ldr	r3, [pc, #24]	@ (80004ec <EXTI9_5_IRQHandler+0x38>)
 80004d4:	2201      	movs	r2, #1
 80004d6:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_RIGHT_Pin);
 80004d8:	2020      	movs	r0, #32
 80004da:	f000 fb71 	bl	8000bc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40010800 	.word	0x40010800
 80004e8:	20000000 	.word	0x20000000
 80004ec:	20000198 	.word	0x20000198

080004f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr

080004fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004fc:	f7ff fff8 	bl	80004f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000500:	480b      	ldr	r0, [pc, #44]	@ (8000530 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000502:	490c      	ldr	r1, [pc, #48]	@ (8000534 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000504:	4a0c      	ldr	r2, [pc, #48]	@ (8000538 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000506:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000508:	e002      	b.n	8000510 <LoopCopyDataInit>

0800050a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800050a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800050c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800050e:	3304      	adds	r3, #4

08000510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000514:	d3f9      	bcc.n	800050a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000516:	4a09      	ldr	r2, [pc, #36]	@ (800053c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000518:	4c09      	ldr	r4, [pc, #36]	@ (8000540 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800051a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800051c:	e001      	b.n	8000522 <LoopFillZerobss>

0800051e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800051e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000520:	3204      	adds	r2, #4

08000522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000524:	d3fb      	bcc.n	800051e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000526:	f006 ffef 	bl	8007508 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800052a:	f7ff feb7 	bl	800029c <main>
  bx lr
 800052e:	4770      	bx	lr
  ldr r0, =_sdata
 8000530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000534:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8000538:	080075e8 	.word	0x080075e8
  ldr r2, =_sbss
 800053c:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8000540:	200007f4 	.word	0x200007f4

08000544 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000544:	e7fe      	b.n	8000544 <ADC1_2_IRQHandler>
	...

08000548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800054c:	4b08      	ldr	r3, [pc, #32]	@ (8000570 <HAL_Init+0x28>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a07      	ldr	r2, [pc, #28]	@ (8000570 <HAL_Init+0x28>)
 8000552:	f043 0310 	orr.w	r3, r3, #16
 8000556:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000558:	2003      	movs	r0, #3
 800055a:	f000 f923 	bl	80007a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800055e:	200f      	movs	r0, #15
 8000560:	f000 f808 	bl	8000574 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000564:	f7ff ff20 	bl	80003a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000568:	2300      	movs	r3, #0
}
 800056a:	4618      	mov	r0, r3
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	40022000 	.word	0x40022000

08000574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800057c:	4b12      	ldr	r3, [pc, #72]	@ (80005c8 <HAL_InitTick+0x54>)
 800057e:	681a      	ldr	r2, [r3, #0]
 8000580:	4b12      	ldr	r3, [pc, #72]	@ (80005cc <HAL_InitTick+0x58>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	4619      	mov	r1, r3
 8000586:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800058a:	fbb3 f3f1 	udiv	r3, r3, r1
 800058e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000592:	4618      	mov	r0, r3
 8000594:	f000 f93b 	bl	800080e <HAL_SYSTICK_Config>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800059e:	2301      	movs	r3, #1
 80005a0:	e00e      	b.n	80005c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2b0f      	cmp	r3, #15
 80005a6:	d80a      	bhi.n	80005be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005a8:	2200      	movs	r2, #0
 80005aa:	6879      	ldr	r1, [r7, #4]
 80005ac:	f04f 30ff 	mov.w	r0, #4294967295
 80005b0:	f000 f903 	bl	80007ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005b4:	4a06      	ldr	r2, [pc, #24]	@ (80005d0 <HAL_InitTick+0x5c>)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005ba:	2300      	movs	r3, #0
 80005bc:	e000      	b.n	80005c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005be:	2301      	movs	r3, #1
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000004 	.word	0x20000004
 80005cc:	2000000c 	.word	0x2000000c
 80005d0:	20000008 	.word	0x20000008

080005d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005d8:	4b05      	ldr	r3, [pc, #20]	@ (80005f0 <HAL_IncTick+0x1c>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	461a      	mov	r2, r3
 80005de:	4b05      	ldr	r3, [pc, #20]	@ (80005f4 <HAL_IncTick+0x20>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4413      	add	r3, r2
 80005e4:	4a03      	ldr	r2, [pc, #12]	@ (80005f4 <HAL_IncTick+0x20>)
 80005e6:	6013      	str	r3, [r2, #0]
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr
 80005f0:	2000000c 	.word	0x2000000c
 80005f4:	2000019c 	.word	0x2000019c

080005f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  return uwTick;
 80005fc:	4b02      	ldr	r3, [pc, #8]	@ (8000608 <HAL_GetTick+0x10>)
 80005fe:	681b      	ldr	r3, [r3, #0]
}
 8000600:	4618      	mov	r0, r3
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr
 8000608:	2000019c 	.word	0x2000019c

0800060c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	f003 0307 	and.w	r3, r3, #7
 800061a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800061c:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <__NVIC_SetPriorityGrouping+0x44>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000622:	68ba      	ldr	r2, [r7, #8]
 8000624:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000628:	4013      	ands	r3, r2
 800062a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000634:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000638:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800063c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800063e:	4a04      	ldr	r2, [pc, #16]	@ (8000650 <__NVIC_SetPriorityGrouping+0x44>)
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	60d3      	str	r3, [r2, #12]
}
 8000644:	bf00      	nop
 8000646:	3714      	adds	r7, #20
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000658:	4b04      	ldr	r3, [pc, #16]	@ (800066c <__NVIC_GetPriorityGrouping+0x18>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	0a1b      	lsrs	r3, r3, #8
 800065e:	f003 0307 	and.w	r3, r3, #7
}
 8000662:	4618      	mov	r0, r3
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800067a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067e:	2b00      	cmp	r3, #0
 8000680:	db0b      	blt.n	800069a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	f003 021f 	and.w	r2, r3, #31
 8000688:	4906      	ldr	r1, [pc, #24]	@ (80006a4 <__NVIC_EnableIRQ+0x34>)
 800068a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068e:	095b      	lsrs	r3, r3, #5
 8000690:	2001      	movs	r0, #1
 8000692:	fa00 f202 	lsl.w	r2, r0, r2
 8000696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr
 80006a4:	e000e100 	.word	0xe000e100

080006a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	6039      	str	r1, [r7, #0]
 80006b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	db0a      	blt.n	80006d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	490c      	ldr	r1, [pc, #48]	@ (80006f4 <__NVIC_SetPriority+0x4c>)
 80006c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c6:	0112      	lsls	r2, r2, #4
 80006c8:	b2d2      	uxtb	r2, r2
 80006ca:	440b      	add	r3, r1
 80006cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006d0:	e00a      	b.n	80006e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	4908      	ldr	r1, [pc, #32]	@ (80006f8 <__NVIC_SetPriority+0x50>)
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	f003 030f 	and.w	r3, r3, #15
 80006de:	3b04      	subs	r3, #4
 80006e0:	0112      	lsls	r2, r2, #4
 80006e2:	b2d2      	uxtb	r2, r2
 80006e4:	440b      	add	r3, r1
 80006e6:	761a      	strb	r2, [r3, #24]
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bc80      	pop	{r7}
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	e000e100 	.word	0xe000e100
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b089      	sub	sp, #36	@ 0x24
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	f003 0307 	and.w	r3, r3, #7
 800070e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000710:	69fb      	ldr	r3, [r7, #28]
 8000712:	f1c3 0307 	rsb	r3, r3, #7
 8000716:	2b04      	cmp	r3, #4
 8000718:	bf28      	it	cs
 800071a:	2304      	movcs	r3, #4
 800071c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	3304      	adds	r3, #4
 8000722:	2b06      	cmp	r3, #6
 8000724:	d902      	bls.n	800072c <NVIC_EncodePriority+0x30>
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	3b03      	subs	r3, #3
 800072a:	e000      	b.n	800072e <NVIC_EncodePriority+0x32>
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000730:	f04f 32ff 	mov.w	r2, #4294967295
 8000734:	69bb      	ldr	r3, [r7, #24]
 8000736:	fa02 f303 	lsl.w	r3, r2, r3
 800073a:	43da      	mvns	r2, r3
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	401a      	ands	r2, r3
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000744:	f04f 31ff 	mov.w	r1, #4294967295
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	fa01 f303 	lsl.w	r3, r1, r3
 800074e:	43d9      	mvns	r1, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000754:	4313      	orrs	r3, r2
         );
}
 8000756:	4618      	mov	r0, r3
 8000758:	3724      	adds	r7, #36	@ 0x24
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr

08000760 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3b01      	subs	r3, #1
 800076c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000770:	d301      	bcc.n	8000776 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000772:	2301      	movs	r3, #1
 8000774:	e00f      	b.n	8000796 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000776:	4a0a      	ldr	r2, [pc, #40]	@ (80007a0 <SysTick_Config+0x40>)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	3b01      	subs	r3, #1
 800077c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800077e:	210f      	movs	r1, #15
 8000780:	f04f 30ff 	mov.w	r0, #4294967295
 8000784:	f7ff ff90 	bl	80006a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000788:	4b05      	ldr	r3, [pc, #20]	@ (80007a0 <SysTick_Config+0x40>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800078e:	4b04      	ldr	r3, [pc, #16]	@ (80007a0 <SysTick_Config+0x40>)
 8000790:	2207      	movs	r2, #7
 8000792:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000794:	2300      	movs	r3, #0
}
 8000796:	4618      	mov	r0, r3
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	e000e010 	.word	0xe000e010

080007a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f7ff ff2d 	bl	800060c <__NVIC_SetPriorityGrouping>
}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b086      	sub	sp, #24
 80007be:	af00      	add	r7, sp, #0
 80007c0:	4603      	mov	r3, r0
 80007c2:	60b9      	str	r1, [r7, #8]
 80007c4:	607a      	str	r2, [r7, #4]
 80007c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007cc:	f7ff ff42 	bl	8000654 <__NVIC_GetPriorityGrouping>
 80007d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	68b9      	ldr	r1, [r7, #8]
 80007d6:	6978      	ldr	r0, [r7, #20]
 80007d8:	f7ff ff90 	bl	80006fc <NVIC_EncodePriority>
 80007dc:	4602      	mov	r2, r0
 80007de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007e2:	4611      	mov	r1, r2
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff ff5f 	bl	80006a8 <__NVIC_SetPriority>
}
 80007ea:	bf00      	nop
 80007ec:	3718      	adds	r7, #24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b082      	sub	sp, #8
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	4603      	mov	r3, r0
 80007fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff ff35 	bl	8000670 <__NVIC_EnableIRQ>
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	b082      	sub	sp, #8
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f7ff ffa2 	bl	8000760 <SysTick_Config>
 800081c:	4603      	mov	r3, r0
}
 800081e:	4618      	mov	r0, r3
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
	...

08000828 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000828:	b480      	push	{r7}
 800082a:	b08b      	sub	sp, #44	@ 0x2c
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000832:	2300      	movs	r3, #0
 8000834:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000836:	2300      	movs	r3, #0
 8000838:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800083a:	e169      	b.n	8000b10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800083c:	2201      	movs	r2, #1
 800083e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000840:	fa02 f303 	lsl.w	r3, r2, r3
 8000844:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	69fa      	ldr	r2, [r7, #28]
 800084c:	4013      	ands	r3, r2
 800084e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000850:	69ba      	ldr	r2, [r7, #24]
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	429a      	cmp	r2, r3
 8000856:	f040 8158 	bne.w	8000b0a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	4a9a      	ldr	r2, [pc, #616]	@ (8000ac8 <HAL_GPIO_Init+0x2a0>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d05e      	beq.n	8000922 <HAL_GPIO_Init+0xfa>
 8000864:	4a98      	ldr	r2, [pc, #608]	@ (8000ac8 <HAL_GPIO_Init+0x2a0>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d875      	bhi.n	8000956 <HAL_GPIO_Init+0x12e>
 800086a:	4a98      	ldr	r2, [pc, #608]	@ (8000acc <HAL_GPIO_Init+0x2a4>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d058      	beq.n	8000922 <HAL_GPIO_Init+0xfa>
 8000870:	4a96      	ldr	r2, [pc, #600]	@ (8000acc <HAL_GPIO_Init+0x2a4>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d86f      	bhi.n	8000956 <HAL_GPIO_Init+0x12e>
 8000876:	4a96      	ldr	r2, [pc, #600]	@ (8000ad0 <HAL_GPIO_Init+0x2a8>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d052      	beq.n	8000922 <HAL_GPIO_Init+0xfa>
 800087c:	4a94      	ldr	r2, [pc, #592]	@ (8000ad0 <HAL_GPIO_Init+0x2a8>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d869      	bhi.n	8000956 <HAL_GPIO_Init+0x12e>
 8000882:	4a94      	ldr	r2, [pc, #592]	@ (8000ad4 <HAL_GPIO_Init+0x2ac>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d04c      	beq.n	8000922 <HAL_GPIO_Init+0xfa>
 8000888:	4a92      	ldr	r2, [pc, #584]	@ (8000ad4 <HAL_GPIO_Init+0x2ac>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d863      	bhi.n	8000956 <HAL_GPIO_Init+0x12e>
 800088e:	4a92      	ldr	r2, [pc, #584]	@ (8000ad8 <HAL_GPIO_Init+0x2b0>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d046      	beq.n	8000922 <HAL_GPIO_Init+0xfa>
 8000894:	4a90      	ldr	r2, [pc, #576]	@ (8000ad8 <HAL_GPIO_Init+0x2b0>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d85d      	bhi.n	8000956 <HAL_GPIO_Init+0x12e>
 800089a:	2b12      	cmp	r3, #18
 800089c:	d82a      	bhi.n	80008f4 <HAL_GPIO_Init+0xcc>
 800089e:	2b12      	cmp	r3, #18
 80008a0:	d859      	bhi.n	8000956 <HAL_GPIO_Init+0x12e>
 80008a2:	a201      	add	r2, pc, #4	@ (adr r2, 80008a8 <HAL_GPIO_Init+0x80>)
 80008a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a8:	08000923 	.word	0x08000923
 80008ac:	080008fd 	.word	0x080008fd
 80008b0:	0800090f 	.word	0x0800090f
 80008b4:	08000951 	.word	0x08000951
 80008b8:	08000957 	.word	0x08000957
 80008bc:	08000957 	.word	0x08000957
 80008c0:	08000957 	.word	0x08000957
 80008c4:	08000957 	.word	0x08000957
 80008c8:	08000957 	.word	0x08000957
 80008cc:	08000957 	.word	0x08000957
 80008d0:	08000957 	.word	0x08000957
 80008d4:	08000957 	.word	0x08000957
 80008d8:	08000957 	.word	0x08000957
 80008dc:	08000957 	.word	0x08000957
 80008e0:	08000957 	.word	0x08000957
 80008e4:	08000957 	.word	0x08000957
 80008e8:	08000957 	.word	0x08000957
 80008ec:	08000905 	.word	0x08000905
 80008f0:	08000919 	.word	0x08000919
 80008f4:	4a79      	ldr	r2, [pc, #484]	@ (8000adc <HAL_GPIO_Init+0x2b4>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d013      	beq.n	8000922 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008fa:	e02c      	b.n	8000956 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	623b      	str	r3, [r7, #32]
          break;
 8000902:	e029      	b.n	8000958 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	3304      	adds	r3, #4
 800090a:	623b      	str	r3, [r7, #32]
          break;
 800090c:	e024      	b.n	8000958 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	68db      	ldr	r3, [r3, #12]
 8000912:	3308      	adds	r3, #8
 8000914:	623b      	str	r3, [r7, #32]
          break;
 8000916:	e01f      	b.n	8000958 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	330c      	adds	r3, #12
 800091e:	623b      	str	r3, [r7, #32]
          break;
 8000920:	e01a      	b.n	8000958 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d102      	bne.n	8000930 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800092a:	2304      	movs	r3, #4
 800092c:	623b      	str	r3, [r7, #32]
          break;
 800092e:	e013      	b.n	8000958 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d105      	bne.n	8000944 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000938:	2308      	movs	r3, #8
 800093a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	69fa      	ldr	r2, [r7, #28]
 8000940:	611a      	str	r2, [r3, #16]
          break;
 8000942:	e009      	b.n	8000958 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000944:	2308      	movs	r3, #8
 8000946:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	69fa      	ldr	r2, [r7, #28]
 800094c:	615a      	str	r2, [r3, #20]
          break;
 800094e:	e003      	b.n	8000958 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000950:	2300      	movs	r3, #0
 8000952:	623b      	str	r3, [r7, #32]
          break;
 8000954:	e000      	b.n	8000958 <HAL_GPIO_Init+0x130>
          break;
 8000956:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000958:	69bb      	ldr	r3, [r7, #24]
 800095a:	2bff      	cmp	r3, #255	@ 0xff
 800095c:	d801      	bhi.n	8000962 <HAL_GPIO_Init+0x13a>
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	e001      	b.n	8000966 <HAL_GPIO_Init+0x13e>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	3304      	adds	r3, #4
 8000966:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000968:	69bb      	ldr	r3, [r7, #24]
 800096a:	2bff      	cmp	r3, #255	@ 0xff
 800096c:	d802      	bhi.n	8000974 <HAL_GPIO_Init+0x14c>
 800096e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	e002      	b.n	800097a <HAL_GPIO_Init+0x152>
 8000974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000976:	3b08      	subs	r3, #8
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	210f      	movs	r1, #15
 8000982:	693b      	ldr	r3, [r7, #16]
 8000984:	fa01 f303 	lsl.w	r3, r1, r3
 8000988:	43db      	mvns	r3, r3
 800098a:	401a      	ands	r2, r3
 800098c:	6a39      	ldr	r1, [r7, #32]
 800098e:	693b      	ldr	r3, [r7, #16]
 8000990:	fa01 f303 	lsl.w	r3, r1, r3
 8000994:	431a      	orrs	r2, r3
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	f000 80b1 	beq.w	8000b0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009a8:	4b4d      	ldr	r3, [pc, #308]	@ (8000ae0 <HAL_GPIO_Init+0x2b8>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	4a4c      	ldr	r2, [pc, #304]	@ (8000ae0 <HAL_GPIO_Init+0x2b8>)
 80009ae:	f043 0301 	orr.w	r3, r3, #1
 80009b2:	6193      	str	r3, [r2, #24]
 80009b4:	4b4a      	ldr	r3, [pc, #296]	@ (8000ae0 <HAL_GPIO_Init+0x2b8>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009c0:	4a48      	ldr	r2, [pc, #288]	@ (8000ae4 <HAL_GPIO_Init+0x2bc>)
 80009c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009c4:	089b      	lsrs	r3, r3, #2
 80009c6:	3302      	adds	r3, #2
 80009c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009d0:	f003 0303 	and.w	r3, r3, #3
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	220f      	movs	r2, #15
 80009d8:	fa02 f303 	lsl.w	r3, r2, r3
 80009dc:	43db      	mvns	r3, r3
 80009de:	68fa      	ldr	r2, [r7, #12]
 80009e0:	4013      	ands	r3, r2
 80009e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4a40      	ldr	r2, [pc, #256]	@ (8000ae8 <HAL_GPIO_Init+0x2c0>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d013      	beq.n	8000a14 <HAL_GPIO_Init+0x1ec>
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4a3f      	ldr	r2, [pc, #252]	@ (8000aec <HAL_GPIO_Init+0x2c4>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d00d      	beq.n	8000a10 <HAL_GPIO_Init+0x1e8>
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a3e      	ldr	r2, [pc, #248]	@ (8000af0 <HAL_GPIO_Init+0x2c8>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d007      	beq.n	8000a0c <HAL_GPIO_Init+0x1e4>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4a3d      	ldr	r2, [pc, #244]	@ (8000af4 <HAL_GPIO_Init+0x2cc>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d101      	bne.n	8000a08 <HAL_GPIO_Init+0x1e0>
 8000a04:	2303      	movs	r3, #3
 8000a06:	e006      	b.n	8000a16 <HAL_GPIO_Init+0x1ee>
 8000a08:	2304      	movs	r3, #4
 8000a0a:	e004      	b.n	8000a16 <HAL_GPIO_Init+0x1ee>
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	e002      	b.n	8000a16 <HAL_GPIO_Init+0x1ee>
 8000a10:	2301      	movs	r3, #1
 8000a12:	e000      	b.n	8000a16 <HAL_GPIO_Init+0x1ee>
 8000a14:	2300      	movs	r3, #0
 8000a16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a18:	f002 0203 	and.w	r2, r2, #3
 8000a1c:	0092      	lsls	r2, r2, #2
 8000a1e:	4093      	lsls	r3, r2
 8000a20:	68fa      	ldr	r2, [r7, #12]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a26:	492f      	ldr	r1, [pc, #188]	@ (8000ae4 <HAL_GPIO_Init+0x2bc>)
 8000a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a2a:	089b      	lsrs	r3, r3, #2
 8000a2c:	3302      	adds	r3, #2
 8000a2e:	68fa      	ldr	r2, [r7, #12]
 8000a30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d006      	beq.n	8000a4e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a40:	4b2d      	ldr	r3, [pc, #180]	@ (8000af8 <HAL_GPIO_Init+0x2d0>)
 8000a42:	689a      	ldr	r2, [r3, #8]
 8000a44:	492c      	ldr	r1, [pc, #176]	@ (8000af8 <HAL_GPIO_Init+0x2d0>)
 8000a46:	69bb      	ldr	r3, [r7, #24]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	608b      	str	r3, [r1, #8]
 8000a4c:	e006      	b.n	8000a5c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a4e:	4b2a      	ldr	r3, [pc, #168]	@ (8000af8 <HAL_GPIO_Init+0x2d0>)
 8000a50:	689a      	ldr	r2, [r3, #8]
 8000a52:	69bb      	ldr	r3, [r7, #24]
 8000a54:	43db      	mvns	r3, r3
 8000a56:	4928      	ldr	r1, [pc, #160]	@ (8000af8 <HAL_GPIO_Init+0x2d0>)
 8000a58:	4013      	ands	r3, r2
 8000a5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d006      	beq.n	8000a76 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a68:	4b23      	ldr	r3, [pc, #140]	@ (8000af8 <HAL_GPIO_Init+0x2d0>)
 8000a6a:	68da      	ldr	r2, [r3, #12]
 8000a6c:	4922      	ldr	r1, [pc, #136]	@ (8000af8 <HAL_GPIO_Init+0x2d0>)
 8000a6e:	69bb      	ldr	r3, [r7, #24]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	60cb      	str	r3, [r1, #12]
 8000a74:	e006      	b.n	8000a84 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a76:	4b20      	ldr	r3, [pc, #128]	@ (8000af8 <HAL_GPIO_Init+0x2d0>)
 8000a78:	68da      	ldr	r2, [r3, #12]
 8000a7a:	69bb      	ldr	r3, [r7, #24]
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	491e      	ldr	r1, [pc, #120]	@ (8000af8 <HAL_GPIO_Init+0x2d0>)
 8000a80:	4013      	ands	r3, r2
 8000a82:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d006      	beq.n	8000a9e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a90:	4b19      	ldr	r3, [pc, #100]	@ (8000af8 <HAL_GPIO_Init+0x2d0>)
 8000a92:	685a      	ldr	r2, [r3, #4]
 8000a94:	4918      	ldr	r1, [pc, #96]	@ (8000af8 <HAL_GPIO_Init+0x2d0>)
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	604b      	str	r3, [r1, #4]
 8000a9c:	e006      	b.n	8000aac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a9e:	4b16      	ldr	r3, [pc, #88]	@ (8000af8 <HAL_GPIO_Init+0x2d0>)
 8000aa0:	685a      	ldr	r2, [r3, #4]
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	4914      	ldr	r1, [pc, #80]	@ (8000af8 <HAL_GPIO_Init+0x2d0>)
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d021      	beq.n	8000afc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8000af8 <HAL_GPIO_Init+0x2d0>)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	490e      	ldr	r1, [pc, #56]	@ (8000af8 <HAL_GPIO_Init+0x2d0>)
 8000abe:	69bb      	ldr	r3, [r7, #24]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	600b      	str	r3, [r1, #0]
 8000ac4:	e021      	b.n	8000b0a <HAL_GPIO_Init+0x2e2>
 8000ac6:	bf00      	nop
 8000ac8:	10320000 	.word	0x10320000
 8000acc:	10310000 	.word	0x10310000
 8000ad0:	10220000 	.word	0x10220000
 8000ad4:	10210000 	.word	0x10210000
 8000ad8:	10120000 	.word	0x10120000
 8000adc:	10110000 	.word	0x10110000
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	40010000 	.word	0x40010000
 8000ae8:	40010800 	.word	0x40010800
 8000aec:	40010c00 	.word	0x40010c00
 8000af0:	40011000 	.word	0x40011000
 8000af4:	40011400 	.word	0x40011400
 8000af8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000afc:	4b0b      	ldr	r3, [pc, #44]	@ (8000b2c <HAL_GPIO_Init+0x304>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	43db      	mvns	r3, r3
 8000b04:	4909      	ldr	r1, [pc, #36]	@ (8000b2c <HAL_GPIO_Init+0x304>)
 8000b06:	4013      	ands	r3, r2
 8000b08:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b16:	fa22 f303 	lsr.w	r3, r2, r3
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	f47f ae8e 	bne.w	800083c <HAL_GPIO_Init+0x14>
  }
}
 8000b20:	bf00      	nop
 8000b22:	bf00      	nop
 8000b24:	372c      	adds	r7, #44	@ 0x2c
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr
 8000b2c:	40010400 	.word	0x40010400

08000b30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	689a      	ldr	r2, [r3, #8]
 8000b40:	887b      	ldrh	r3, [r7, #2]
 8000b42:	4013      	ands	r3, r2
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d002      	beq.n	8000b4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	73fb      	strb	r3, [r7, #15]
 8000b4c:	e001      	b.n	8000b52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr

08000b5e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	b083      	sub	sp, #12
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
 8000b66:	460b      	mov	r3, r1
 8000b68:	807b      	strh	r3, [r7, #2]
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b6e:	787b      	ldrb	r3, [r7, #1]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d003      	beq.n	8000b7c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b74:	887a      	ldrh	r2, [r7, #2]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b7a:	e003      	b.n	8000b84 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b7c:	887b      	ldrh	r3, [r7, #2]
 8000b7e:	041a      	lsls	r2, r3, #16
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	611a      	str	r2, [r3, #16]
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr

08000b8e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	b085      	sub	sp, #20
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
 8000b96:	460b      	mov	r3, r1
 8000b98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	68db      	ldr	r3, [r3, #12]
 8000b9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ba0:	887a      	ldrh	r2, [r7, #2]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	041a      	lsls	r2, r3, #16
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	43d9      	mvns	r1, r3
 8000bac:	887b      	ldrh	r3, [r7, #2]
 8000bae:	400b      	ands	r3, r1
 8000bb0:	431a      	orrs	r2, r3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	611a      	str	r2, [r3, #16]
}
 8000bb6:	bf00      	nop
 8000bb8:	3714      	adds	r7, #20
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr

08000bc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000bca:	4b08      	ldr	r3, [pc, #32]	@ (8000bec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bcc:	695a      	ldr	r2, [r3, #20]
 8000bce:	88fb      	ldrh	r3, [r7, #6]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d006      	beq.n	8000be4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000bd6:	4a05      	ldr	r2, [pc, #20]	@ (8000bec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bd8:	88fb      	ldrh	r3, [r7, #6]
 8000bda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000bdc:	88fb      	ldrh	r3, [r7, #6]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 f806 	bl	8000bf0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40010400 	.word	0x40010400

08000bf0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr

08000c04 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c06:	b08b      	sub	sp, #44	@ 0x2c
 8000c08:	af06      	add	r7, sp, #24
 8000c0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d101      	bne.n	8000c16 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e0f1      	b.n	8000dfa <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d106      	bne.n	8000c30 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2200      	movs	r2, #0
 8000c26:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f006 f9d6 	bl	8006fdc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2203      	movs	r2, #3
 8000c34:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f002 fa29 	bl	8003094 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	687e      	ldr	r6, [r7, #4]
 8000c4a:	466d      	mov	r5, sp
 8000c4c:	f106 0410 	add.w	r4, r6, #16
 8000c50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c54:	6823      	ldr	r3, [r4, #0]
 8000c56:	602b      	str	r3, [r5, #0]
 8000c58:	1d33      	adds	r3, r6, #4
 8000c5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c5c:	6838      	ldr	r0, [r7, #0]
 8000c5e:	f002 f9f3 	bl	8003048 <USB_CoreInit>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d005      	beq.n	8000c74 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2202      	movs	r2, #2
 8000c6c:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8000c70:	2301      	movs	r3, #1
 8000c72:	e0c2      	b.n	8000dfa <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f002 fa24 	bl	80030c8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c80:	2300      	movs	r3, #0
 8000c82:	73fb      	strb	r3, [r7, #15]
 8000c84:	e040      	b.n	8000d08 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c86:	7bfb      	ldrb	r3, [r7, #15]
 8000c88:	6879      	ldr	r1, [r7, #4]
 8000c8a:	1c5a      	adds	r2, r3, #1
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	4413      	add	r3, r2
 8000c92:	00db      	lsls	r3, r3, #3
 8000c94:	440b      	add	r3, r1
 8000c96:	3301      	adds	r3, #1
 8000c98:	2201      	movs	r2, #1
 8000c9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	1c5a      	adds	r2, r3, #1
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	4413      	add	r3, r2
 8000ca8:	00db      	lsls	r3, r3, #3
 8000caa:	440b      	add	r3, r1
 8000cac:	7bfa      	ldrb	r2, [r7, #15]
 8000cae:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000cb0:	7bfb      	ldrb	r3, [r7, #15]
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	1c5a      	adds	r2, r3, #1
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	4413      	add	r3, r2
 8000cbc:	00db      	lsls	r3, r3, #3
 8000cbe:	440b      	add	r3, r1
 8000cc0:	3303      	adds	r3, #3
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000cc6:	7bfa      	ldrb	r2, [r7, #15]
 8000cc8:	6879      	ldr	r1, [r7, #4]
 8000cca:	4613      	mov	r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	4413      	add	r3, r2
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	440b      	add	r3, r1
 8000cd4:	3338      	adds	r3, #56	@ 0x38
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000cda:	7bfa      	ldrb	r2, [r7, #15]
 8000cdc:	6879      	ldr	r1, [r7, #4]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	4413      	add	r3, r2
 8000ce4:	00db      	lsls	r3, r3, #3
 8000ce6:	440b      	add	r3, r1
 8000ce8:	333c      	adds	r3, #60	@ 0x3c
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000cee:	7bfa      	ldrb	r2, [r7, #15]
 8000cf0:	6879      	ldr	r1, [r7, #4]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	4413      	add	r3, r2
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	440b      	add	r3, r1
 8000cfc:	3340      	adds	r3, #64	@ 0x40
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d02:	7bfb      	ldrb	r3, [r7, #15]
 8000d04:	3301      	adds	r3, #1
 8000d06:	73fb      	strb	r3, [r7, #15]
 8000d08:	7bfa      	ldrb	r2, [r7, #15]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d3b9      	bcc.n	8000c86 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d12:	2300      	movs	r3, #0
 8000d14:	73fb      	strb	r3, [r7, #15]
 8000d16:	e044      	b.n	8000da2 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000d18:	7bfa      	ldrb	r2, [r7, #15]
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	4413      	add	r3, r2
 8000d22:	00db      	lsls	r3, r3, #3
 8000d24:	440b      	add	r3, r1
 8000d26:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000d2e:	7bfa      	ldrb	r2, [r7, #15]
 8000d30:	6879      	ldr	r1, [r7, #4]
 8000d32:	4613      	mov	r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	4413      	add	r3, r2
 8000d38:	00db      	lsls	r3, r3, #3
 8000d3a:	440b      	add	r3, r1
 8000d3c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8000d40:	7bfa      	ldrb	r2, [r7, #15]
 8000d42:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000d44:	7bfa      	ldrb	r2, [r7, #15]
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	4413      	add	r3, r2
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	440b      	add	r3, r1
 8000d52:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8000d56:	2200      	movs	r2, #0
 8000d58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d5a:	7bfa      	ldrb	r2, [r7, #15]
 8000d5c:	6879      	ldr	r1, [r7, #4]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	4413      	add	r3, r2
 8000d64:	00db      	lsls	r3, r3, #3
 8000d66:	440b      	add	r3, r1
 8000d68:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d70:	7bfa      	ldrb	r2, [r7, #15]
 8000d72:	6879      	ldr	r1, [r7, #4]
 8000d74:	4613      	mov	r3, r2
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	4413      	add	r3, r2
 8000d7a:	00db      	lsls	r3, r3, #3
 8000d7c:	440b      	add	r3, r1
 8000d7e:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d86:	7bfa      	ldrb	r2, [r7, #15]
 8000d88:	6879      	ldr	r1, [r7, #4]
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	4413      	add	r3, r2
 8000d90:	00db      	lsls	r3, r3, #3
 8000d92:	440b      	add	r3, r1
 8000d94:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	73fb      	strb	r3, [r7, #15]
 8000da2:	7bfa      	ldrb	r2, [r7, #15]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d3b5      	bcc.n	8000d18 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	603b      	str	r3, [r7, #0]
 8000db2:	687e      	ldr	r6, [r7, #4]
 8000db4:	466d      	mov	r5, sp
 8000db6:	f106 0410 	add.w	r4, r6, #16
 8000dba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dbe:	6823      	ldr	r3, [r4, #0]
 8000dc0:	602b      	str	r3, [r5, #0]
 8000dc2:	1d33      	adds	r3, r6, #4
 8000dc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dc6:	6838      	ldr	r0, [r7, #0]
 8000dc8:	f002 f98a 	bl	80030e0 <USB_DevInit>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d005      	beq.n	8000dde <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2202      	movs	r2, #2
 8000dd6:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e00d      	b.n	8000dfa <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2200      	movs	r2, #0
 8000de2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2201      	movs	r2, #1
 8000dea:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f004 fc0b 	bl	800560e <USB_DevDisconnect>

  return HAL_OK;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e02 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d101      	bne.n	8000e18 <HAL_PCD_Start+0x16>
 8000e14:	2302      	movs	r3, #2
 8000e16:	e016      	b.n	8000e46 <HAL_PCD_Start+0x44>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f002 f91f 	bl	8003068 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f006 fb2c 	bl	800748a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f004 fbdf 	bl	80055fa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b088      	sub	sp, #32
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f004 fbe1 	bl	8005622 <USB_ReadInterrupts>
 8000e60:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d003      	beq.n	8000e74 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f000 fb04 	bl	800147a <PCD_EP_ISR_Handler>

    return;
 8000e72:	e119      	b.n	80010a8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d013      	beq.n	8000ea6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000e86:	b29a      	uxth	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000e90:	b292      	uxth	r2, r2
 8000e92:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f006 f91b 	bl	80070d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f000 f905 	bl	80010ae <HAL_PCD_SetAddress>

    return;
 8000ea4:	e100      	b.n	80010a8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d00c      	beq.n	8000eca <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000ec2:	b292      	uxth	r2, r2
 8000ec4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000ec8:	e0ee      	b.n	80010a8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d00c      	beq.n	8000eee <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000ee6:	b292      	uxth	r2, r2
 8000ee8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000eec:	e0dc      	b.n	80010a8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d027      	beq.n	8000f48 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f022 0204 	bic.w	r2, r2, #4
 8000f0a:	b292      	uxth	r2, r2
 8000f0c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f022 0208 	bic.w	r2, r2, #8
 8000f22:	b292      	uxth	r2, r2
 8000f24:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f006 f90b 	bl	8007144 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000f40:	b292      	uxth	r2, r2
 8000f42:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000f46:	e0af      	b.n	80010a8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f000 8083 	beq.w	800105a <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8000f54:	2300      	movs	r3, #0
 8000f56:	77fb      	strb	r3, [r7, #31]
 8000f58:	e010      	b.n	8000f7c <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	7ffb      	ldrb	r3, [r7, #31]
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	441a      	add	r2, r3
 8000f66:	7ffb      	ldrb	r3, [r7, #31]
 8000f68:	8812      	ldrh	r2, [r2, #0]
 8000f6a:	b292      	uxth	r2, r2
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	3320      	adds	r3, #32
 8000f70:	443b      	add	r3, r7
 8000f72:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8000f76:	7ffb      	ldrb	r3, [r7, #31]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	77fb      	strb	r3, [r7, #31]
 8000f7c:	7ffb      	ldrb	r3, [r7, #31]
 8000f7e:	2b07      	cmp	r3, #7
 8000f80:	d9eb      	bls.n	8000f5a <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f042 0201 	orr.w	r2, r2, #1
 8000f94:	b292      	uxth	r2, r2
 8000f96:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f022 0201 	bic.w	r2, r2, #1
 8000fac:	b292      	uxth	r2, r2
 8000fae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000fb2:	bf00      	nop
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d0f6      	beq.n	8000fb4 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000fd8:	b292      	uxth	r2, r2
 8000fda:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000fde:	2300      	movs	r3, #0
 8000fe0:	77fb      	strb	r3, [r7, #31]
 8000fe2:	e00f      	b.n	8001004 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000fe4:	7ffb      	ldrb	r3, [r7, #31]
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	6812      	ldr	r2, [r2, #0]
 8000fea:	4611      	mov	r1, r2
 8000fec:	7ffa      	ldrb	r2, [r7, #31]
 8000fee:	0092      	lsls	r2, r2, #2
 8000ff0:	440a      	add	r2, r1
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	3320      	adds	r3, #32
 8000ff6:	443b      	add	r3, r7
 8000ff8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8000ffc:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000ffe:	7ffb      	ldrb	r3, [r7, #31]
 8001000:	3301      	adds	r3, #1
 8001002:	77fb      	strb	r3, [r7, #31]
 8001004:	7ffb      	ldrb	r3, [r7, #31]
 8001006:	2b07      	cmp	r3, #7
 8001008:	d9ec      	bls.n	8000fe4 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001012:	b29a      	uxth	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f042 0208 	orr.w	r2, r2, #8
 800101c:	b292      	uxth	r2, r2
 800101e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800102a:	b29a      	uxth	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001034:	b292      	uxth	r2, r2
 8001036:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001042:	b29a      	uxth	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f042 0204 	orr.w	r2, r2, #4
 800104c:	b292      	uxth	r2, r2
 800104e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f006 f85c 	bl	8007110 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001058:	e026      	b.n	80010a8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001060:	2b00      	cmp	r3, #0
 8001062:	d00f      	beq.n	8001084 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800106c:	b29a      	uxth	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001076:	b292      	uxth	r2, r2
 8001078:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f006 f81a 	bl	80070b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001082:	e011      	b.n	80010a8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800108a:	2b00      	cmp	r3, #0
 800108c:	d00c      	beq.n	80010a8 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001096:	b29a      	uxth	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80010a0:	b292      	uxth	r2, r2
 80010a2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80010a6:	bf00      	nop
  }
}
 80010a8:	3720      	adds	r7, #32
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
 80010b6:	460b      	mov	r3, r1
 80010b8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d101      	bne.n	80010c8 <HAL_PCD_SetAddress+0x1a>
 80010c4:	2302      	movs	r3, #2
 80010c6:	e013      	b.n	80010f0 <HAL_PCD_SetAddress+0x42>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2201      	movs	r2, #1
 80010cc:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	78fa      	ldrb	r2, [r7, #3]
 80010d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	78fa      	ldrb	r2, [r7, #3]
 80010de:	4611      	mov	r1, r2
 80010e0:	4618      	mov	r0, r3
 80010e2:	f004 fa77 	bl	80055d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80010ee:	2300      	movs	r3, #0
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	4608      	mov	r0, r1
 8001102:	4611      	mov	r1, r2
 8001104:	461a      	mov	r2, r3
 8001106:	4603      	mov	r3, r0
 8001108:	70fb      	strb	r3, [r7, #3]
 800110a:	460b      	mov	r3, r1
 800110c:	803b      	strh	r3, [r7, #0]
 800110e:	4613      	mov	r3, r2
 8001110:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001112:	2300      	movs	r3, #0
 8001114:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001116:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800111a:	2b00      	cmp	r3, #0
 800111c:	da0e      	bge.n	800113c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800111e:	78fb      	ldrb	r3, [r7, #3]
 8001120:	f003 0307 	and.w	r3, r3, #7
 8001124:	1c5a      	adds	r2, r3, #1
 8001126:	4613      	mov	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4413      	add	r3, r2
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2201      	movs	r2, #1
 8001138:	705a      	strb	r2, [r3, #1]
 800113a:	e00e      	b.n	800115a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800113c:	78fb      	ldrb	r3, [r7, #3]
 800113e:	f003 0207 	and.w	r2, r3, #7
 8001142:	4613      	mov	r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	4413      	add	r3, r2
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	4413      	add	r3, r2
 8001152:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2200      	movs	r2, #0
 8001158:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800115a:	78fb      	ldrb	r3, [r7, #3]
 800115c:	f003 0307 	and.w	r3, r3, #7
 8001160:	b2da      	uxtb	r2, r3
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001166:	883a      	ldrh	r2, [r7, #0]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	78ba      	ldrb	r2, [r7, #2]
 8001170:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001172:	78bb      	ldrb	r3, [r7, #2]
 8001174:	2b02      	cmp	r3, #2
 8001176:	d102      	bne.n	800117e <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2200      	movs	r2, #0
 800117c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001184:	2b01      	cmp	r3, #1
 8001186:	d101      	bne.n	800118c <HAL_PCD_EP_Open+0x94>
 8001188:	2302      	movs	r3, #2
 800118a:	e00e      	b.n	80011aa <HAL_PCD_EP_Open+0xb2>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2201      	movs	r2, #1
 8001190:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	68f9      	ldr	r1, [r7, #12]
 800119a:	4618      	mov	r0, r3
 800119c:	f001 ffc0 	bl	8003120 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 80011a8:	7afb      	ldrb	r3, [r7, #11]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b084      	sub	sp, #16
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
 80011ba:	460b      	mov	r3, r1
 80011bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80011be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	da0e      	bge.n	80011e4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011c6:	78fb      	ldrb	r3, [r7, #3]
 80011c8:	f003 0307 	and.w	r3, r3, #7
 80011cc:	1c5a      	adds	r2, r3, #1
 80011ce:	4613      	mov	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4413      	add	r3, r2
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	4413      	add	r3, r2
 80011da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2201      	movs	r2, #1
 80011e0:	705a      	strb	r2, [r3, #1]
 80011e2:	e00e      	b.n	8001202 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011e4:	78fb      	ldrb	r3, [r7, #3]
 80011e6:	f003 0207 	and.w	r2, r3, #7
 80011ea:	4613      	mov	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	4413      	add	r3, r2
 80011fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2200      	movs	r2, #0
 8001200:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001202:	78fb      	ldrb	r3, [r7, #3]
 8001204:	f003 0307 	and.w	r3, r3, #7
 8001208:	b2da      	uxtb	r2, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001214:	2b01      	cmp	r3, #1
 8001216:	d101      	bne.n	800121c <HAL_PCD_EP_Close+0x6a>
 8001218:	2302      	movs	r3, #2
 800121a:	e00e      	b.n	800123a <HAL_PCD_EP_Close+0x88>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2201      	movs	r2, #1
 8001220:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	68f9      	ldr	r1, [r7, #12]
 800122a:	4618      	mov	r0, r3
 800122c:	f002 fb38 	bl	80038a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b086      	sub	sp, #24
 8001246:	af00      	add	r7, sp, #0
 8001248:	60f8      	str	r0, [r7, #12]
 800124a:	607a      	str	r2, [r7, #4]
 800124c:	603b      	str	r3, [r7, #0]
 800124e:	460b      	mov	r3, r1
 8001250:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001252:	7afb      	ldrb	r3, [r7, #11]
 8001254:	f003 0207 	and.w	r2, r3, #7
 8001258:	4613      	mov	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001264:	68fa      	ldr	r2, [r7, #12]
 8001266:	4413      	add	r3, r2
 8001268:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	683a      	ldr	r2, [r7, #0]
 8001274:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	2200      	movs	r2, #0
 800127a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	2200      	movs	r2, #0
 8001280:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001282:	7afb      	ldrb	r3, [r7, #11]
 8001284:	f003 0307 	and.w	r3, r3, #7
 8001288:	b2da      	uxtb	r2, r3
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6979      	ldr	r1, [r7, #20]
 8001294:	4618      	mov	r0, r3
 8001296:	f002 fcef 	bl	8003c78 <USB_EPStartXfer>

  return HAL_OK;
 800129a:	2300      	movs	r3, #0
}
 800129c:	4618      	mov	r0, r3
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	460b      	mov	r3, r1
 80012b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012b4:	7afb      	ldrb	r3, [r7, #11]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	1c5a      	adds	r2, r3, #1
 80012bc:	4613      	mov	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4413      	add	r3, r2
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	68fa      	ldr	r2, [r7, #12]
 80012c6:	4413      	add	r3, r2
 80012c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	683a      	ldr	r2, [r7, #0]
 80012d4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	2201      	movs	r2, #1
 80012da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	683a      	ldr	r2, [r7, #0]
 80012e2:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	2201      	movs	r2, #1
 80012ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80012f0:	7afb      	ldrb	r3, [r7, #11]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6979      	ldr	r1, [r7, #20]
 8001302:	4618      	mov	r0, r3
 8001304:	f002 fcb8 	bl	8003c78 <USB_EPStartXfer>

  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b084      	sub	sp, #16
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
 800131a:	460b      	mov	r3, r1
 800131c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800131e:	78fb      	ldrb	r3, [r7, #3]
 8001320:	f003 0207 	and.w	r2, r3, #7
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	429a      	cmp	r2, r3
 800132a:	d901      	bls.n	8001330 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e04c      	b.n	80013ca <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001330:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001334:	2b00      	cmp	r3, #0
 8001336:	da0e      	bge.n	8001356 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001338:	78fb      	ldrb	r3, [r7, #3]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	1c5a      	adds	r2, r3, #1
 8001340:	4613      	mov	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4413      	add	r3, r2
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	4413      	add	r3, r2
 800134c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2201      	movs	r2, #1
 8001352:	705a      	strb	r2, [r3, #1]
 8001354:	e00c      	b.n	8001370 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001356:	78fa      	ldrb	r2, [r7, #3]
 8001358:	4613      	mov	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	4413      	add	r3, r2
 8001368:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2200      	movs	r2, #0
 800136e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2201      	movs	r2, #1
 8001374:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001376:	78fb      	ldrb	r3, [r7, #3]
 8001378:	f003 0307 	and.w	r3, r3, #7
 800137c:	b2da      	uxtb	r2, r3
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001388:	2b01      	cmp	r3, #1
 800138a:	d101      	bne.n	8001390 <HAL_PCD_EP_SetStall+0x7e>
 800138c:	2302      	movs	r3, #2
 800138e:	e01c      	b.n	80013ca <HAL_PCD_EP_SetStall+0xb8>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2201      	movs	r2, #1
 8001394:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	68f9      	ldr	r1, [r7, #12]
 800139e:	4618      	mov	r0, r3
 80013a0:	f004 f81b 	bl	80053da <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80013a4:	78fb      	ldrb	r3, [r7, #3]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d108      	bne.n	80013c0 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 80013b8:	4619      	mov	r1, r3
 80013ba:	4610      	mov	r0, r2
 80013bc:	f004 f940 	bl	8005640 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b084      	sub	sp, #16
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	460b      	mov	r3, r1
 80013dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80013de:	78fb      	ldrb	r3, [r7, #3]
 80013e0:	f003 020f 	and.w	r2, r3, #15
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d901      	bls.n	80013f0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e040      	b.n	8001472 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80013f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	da0e      	bge.n	8001416 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013f8:	78fb      	ldrb	r3, [r7, #3]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	1c5a      	adds	r2, r3, #1
 8001400:	4613      	mov	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4413      	add	r3, r2
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	4413      	add	r3, r2
 800140c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2201      	movs	r2, #1
 8001412:	705a      	strb	r2, [r3, #1]
 8001414:	e00e      	b.n	8001434 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001416:	78fb      	ldrb	r3, [r7, #3]
 8001418:	f003 0207 	and.w	r2, r3, #7
 800141c:	4613      	mov	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4413      	add	r3, r2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	4413      	add	r3, r2
 800142c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2200      	movs	r2, #0
 8001432:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2200      	movs	r2, #0
 8001438:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800143a:	78fb      	ldrb	r3, [r7, #3]
 800143c:	f003 0307 	and.w	r3, r3, #7
 8001440:	b2da      	uxtb	r2, r3
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800144c:	2b01      	cmp	r3, #1
 800144e:	d101      	bne.n	8001454 <HAL_PCD_EP_ClrStall+0x82>
 8001450:	2302      	movs	r3, #2
 8001452:	e00e      	b.n	8001472 <HAL_PCD_EP_ClrStall+0xa0>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	68f9      	ldr	r1, [r7, #12]
 8001462:	4618      	mov	r0, r3
 8001464:	f004 f809 	bl	800547a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b096      	sub	sp, #88	@ 0x58
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001482:	e3be      	b.n	8001c02 <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800148c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001490:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001494:	b2db      	uxtb	r3, r3
 8001496:	f003 030f 	and.w	r3, r3, #15
 800149a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800149e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f040 8178 	bne.w	8001798 <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80014a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80014ac:	f003 0310 	and.w	r3, r3, #16
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d151      	bne.n	8001558 <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	881b      	ldrh	r3, [r3, #0]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80014c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80014c4:	81fb      	strh	r3, [r7, #14]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	89fb      	ldrh	r3, [r7, #14]
 80014cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80014d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3328      	adds	r3, #40	@ 0x28
 80014dc:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	461a      	mov	r2, r3
 80014ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	4413      	add	r3, r2
 80014f2:	3302      	adds	r3, #2
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	6812      	ldr	r2, [r2, #0]
 80014fa:	4413      	add	r3, r2
 80014fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001506:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001508:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800150a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800150c:	695a      	ldr	r2, [r3, #20]
 800150e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	441a      	add	r2, r3
 8001514:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001516:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001518:	2100      	movs	r1, #0
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f005 fdb1 	bl	8007082 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 836a 	beq.w	8001c02 <PCD_EP_ISR_Handler+0x788>
 800152e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	2b00      	cmp	r3, #0
 8001534:	f040 8365 	bne.w	8001c02 <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800153e:	b2db      	uxtb	r3, r3
 8001540:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001544:	b2da      	uxtb	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001556:	e354      	b.n	8001c02 <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800155e:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	881b      	ldrh	r3, [r3, #0]
 8001566:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800156a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800156e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001572:	2b00      	cmp	r3, #0
 8001574:	d034      	beq.n	80015e0 <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800157e:	b29b      	uxth	r3, r3
 8001580:	461a      	mov	r2, r3
 8001582:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	4413      	add	r3, r2
 800158a:	3306      	adds	r3, #6
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	6812      	ldr	r2, [r2, #0]
 8001592:	4413      	add	r3, r2
 8001594:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800159e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015a0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6818      	ldr	r0, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 80015ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015ae:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80015b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015b2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	f004 f893 	bl	80056e0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	881b      	ldrh	r3, [r3, #0]
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80015c6:	4013      	ands	r3, r2
 80015c8:	823b      	strh	r3, [r7, #16]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	8a3a      	ldrh	r2, [r7, #16]
 80015d0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80015d4:	b292      	uxth	r2, r2
 80015d6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f005 fd25 	bl	8007028 <HAL_PCD_SetupStageCallback>
 80015de:	e310      	b.n	8001c02 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80015e0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f280 830c 	bge.w	8001c02 <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80015f6:	4013      	ands	r3, r2
 80015f8:	83fb      	strh	r3, [r7, #30]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	8bfa      	ldrh	r2, [r7, #30]
 8001600:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001604:	b292      	uxth	r2, r2
 8001606:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001610:	b29b      	uxth	r3, r3
 8001612:	461a      	mov	r2, r3
 8001614:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	4413      	add	r3, r2
 800161c:	3306      	adds	r3, #6
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	6812      	ldr	r2, [r2, #0]
 8001624:	4413      	add	r3, r2
 8001626:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800162a:	881b      	ldrh	r3, [r3, #0]
 800162c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001630:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001632:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001634:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001636:	69db      	ldr	r3, [r3, #28]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d019      	beq.n	8001670 <PCD_EP_ISR_Handler+0x1f6>
 800163c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800163e:	695b      	ldr	r3, [r3, #20]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d015      	beq.n	8001670 <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6818      	ldr	r0, [r3, #0]
 8001648:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800164a:	6959      	ldr	r1, [r3, #20]
 800164c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800164e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001650:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001652:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001654:	b29b      	uxth	r3, r3
 8001656:	f004 f843 	bl	80056e0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800165a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800165c:	695a      	ldr	r2, [r3, #20]
 800165e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	441a      	add	r2, r3
 8001664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001666:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001668:	2100      	movs	r1, #0
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f005 fcee 	bl	800704c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	881b      	ldrh	r3, [r3, #0]
 8001676:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800167a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800167e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001682:	2b00      	cmp	r3, #0
 8001684:	f040 82bd 	bne.w	8001c02 <PCD_EP_ISR_Handler+0x788>
 8001688:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800168c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001690:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001694:	f000 82b5 	beq.w	8001c02 <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	61bb      	str	r3, [r7, #24]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	461a      	mov	r2, r3
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	4413      	add	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	881b      	ldrh	r3, [r3, #0]
 80016bc:	b29b      	uxth	r3, r3
 80016be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	801a      	strh	r2, [r3, #0]
 80016c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80016ce:	d91d      	bls.n	800170c <PCD_EP_ISR_Handler+0x292>
 80016d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	095b      	lsrs	r3, r3, #5
 80016d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80016d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016da:	691b      	ldr	r3, [r3, #16]
 80016dc:	f003 031f 	and.w	r3, r3, #31
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d102      	bne.n	80016ea <PCD_EP_ISR_Handler+0x270>
 80016e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016e6:	3b01      	subs	r3, #1
 80016e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	881b      	ldrh	r3, [r3, #0]
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	029b      	lsls	r3, r3, #10
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	4313      	orrs	r3, r2
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001700:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001704:	b29a      	uxth	r2, r3
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	801a      	strh	r2, [r3, #0]
 800170a:	e026      	b.n	800175a <PCD_EP_ISR_Handler+0x2e0>
 800170c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d10a      	bne.n	800172a <PCD_EP_ISR_Handler+0x2b0>
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	881b      	ldrh	r3, [r3, #0]
 8001718:	b29b      	uxth	r3, r3
 800171a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800171e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001722:	b29a      	uxth	r2, r3
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	801a      	strh	r2, [r3, #0]
 8001728:	e017      	b.n	800175a <PCD_EP_ISR_Handler+0x2e0>
 800172a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	085b      	lsrs	r3, r3, #1
 8001730:	647b      	str	r3, [r7, #68]	@ 0x44
 8001732:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b00      	cmp	r3, #0
 800173c:	d002      	beq.n	8001744 <PCD_EP_ISR_Handler+0x2ca>
 800173e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001740:	3301      	adds	r3, #1
 8001742:	647b      	str	r3, [r7, #68]	@ 0x44
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	881b      	ldrh	r3, [r3, #0]
 8001748:	b29a      	uxth	r2, r3
 800174a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800174c:	b29b      	uxth	r3, r3
 800174e:	029b      	lsls	r3, r3, #10
 8001750:	b29b      	uxth	r3, r3
 8001752:	4313      	orrs	r3, r2
 8001754:	b29a      	uxth	r2, r3
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	881b      	ldrh	r3, [r3, #0]
 8001760:	b29b      	uxth	r3, r3
 8001762:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001766:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800176a:	827b      	strh	r3, [r7, #18]
 800176c:	8a7b      	ldrh	r3, [r7, #18]
 800176e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001772:	827b      	strh	r3, [r7, #18]
 8001774:	8a7b      	ldrh	r3, [r7, #18]
 8001776:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800177a:	827b      	strh	r3, [r7, #18]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	8a7b      	ldrh	r3, [r7, #18]
 8001782:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001786:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800178a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800178e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001792:	b29b      	uxth	r3, r3
 8001794:	8013      	strh	r3, [r2, #0]
 8001796:	e234      	b.n	8001c02 <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	881b      	ldrh	r3, [r3, #0]
 80017a8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80017ac:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f280 80fc 	bge.w	80019ae <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	461a      	mov	r2, r3
 80017bc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	881b      	ldrh	r3, [r3, #0]
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80017cc:	4013      	ands	r3, r2
 80017ce:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	461a      	mov	r2, r3
 80017d8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80017e4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80017e8:	b292      	uxth	r2, r2
 80017ea:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80017ec:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80017f0:	4613      	mov	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	4413      	add	r3, r2
 8001800:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001802:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001804:	7b1b      	ldrb	r3, [r3, #12]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d125      	bne.n	8001856 <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001812:	b29b      	uxth	r3, r3
 8001814:	461a      	mov	r2, r3
 8001816:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	4413      	add	r3, r2
 800181e:	3306      	adds	r3, #6
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	6812      	ldr	r2, [r2, #0]
 8001826:	4413      	add	r3, r2
 8001828:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001832:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001836:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 8092 	beq.w	8001964 <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6818      	ldr	r0, [r3, #0]
 8001844:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001846:	6959      	ldr	r1, [r3, #20]
 8001848:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800184a:	88da      	ldrh	r2, [r3, #6]
 800184c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001850:	f003 ff46 	bl	80056e0 <USB_ReadPMA>
 8001854:	e086      	b.n	8001964 <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001856:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001858:	78db      	ldrb	r3, [r3, #3]
 800185a:	2b02      	cmp	r3, #2
 800185c:	d10a      	bne.n	8001874 <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800185e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001862:	461a      	mov	r2, r3
 8001864:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 f9d9 	bl	8001c1e <HAL_PCD_EP_DB_Receive>
 800186c:	4603      	mov	r3, r0
 800186e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001872:	e077      	b.n	8001964 <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	881b      	ldrh	r3, [r3, #0]
 8001884:	b29b      	uxth	r3, r3
 8001886:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800188a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800188e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	461a      	mov	r2, r3
 8001898:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	441a      	add	r2, r3
 80018a0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80018a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80018a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80018ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018b0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	461a      	mov	r2, r3
 80018be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d024      	beq.n	800191c <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80018da:	b29b      	uxth	r3, r3
 80018dc:	461a      	mov	r2, r3
 80018de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	4413      	add	r3, r2
 80018e6:	3302      	adds	r3, #2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	6812      	ldr	r2, [r2, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80018f4:	881b      	ldrh	r3, [r3, #0]
 80018f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018fa:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80018fe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001902:	2b00      	cmp	r3, #0
 8001904:	d02e      	beq.n	8001964 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6818      	ldr	r0, [r3, #0]
 800190a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800190c:	6959      	ldr	r1, [r3, #20]
 800190e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001910:	891a      	ldrh	r2, [r3, #8]
 8001912:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001916:	f003 fee3 	bl	80056e0 <USB_ReadPMA>
 800191a:	e023      	b.n	8001964 <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001924:	b29b      	uxth	r3, r3
 8001926:	461a      	mov	r2, r3
 8001928:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	4413      	add	r3, r2
 8001930:	3306      	adds	r3, #6
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	6812      	ldr	r2, [r2, #0]
 8001938:	4413      	add	r3, r2
 800193a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001944:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001948:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800194c:	2b00      	cmp	r3, #0
 800194e:	d009      	beq.n	8001964 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6818      	ldr	r0, [r3, #0]
 8001954:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001956:	6959      	ldr	r1, [r3, #20]
 8001958:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800195a:	895a      	ldrh	r2, [r3, #10]
 800195c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001960:	f003 febe 	bl	80056e0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001964:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001966:	69da      	ldr	r2, [r3, #28]
 8001968:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800196c:	441a      	add	r2, r3
 800196e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001970:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001972:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001974:	695a      	ldr	r2, [r3, #20]
 8001976:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800197a:	441a      	add	r2, r3
 800197c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800197e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001980:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d005      	beq.n	8001994 <PCD_EP_ISR_Handler+0x51a>
 8001988:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800198c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	429a      	cmp	r2, r3
 8001992:	d206      	bcs.n	80019a2 <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001994:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	4619      	mov	r1, r3
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f005 fb56 	bl	800704c <HAL_PCD_DataOutStageCallback>
 80019a0:	e005      	b.n	80019ae <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80019a8:	4618      	mov	r0, r3
 80019aa:	f002 f965 	bl	8003c78 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80019ae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80019b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 8123 	beq.w	8001c02 <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 80019bc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80019c0:	1c5a      	adds	r2, r3, #1
 80019c2:	4613      	mov	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	461a      	mov	r2, r3
 80019d6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	881b      	ldrh	r3, [r3, #0]
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80019e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80019ea:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	461a      	mov	r2, r3
 80019f4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	441a      	add	r2, r3
 80019fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001a00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001a0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a0e:	78db      	ldrb	r3, [r3, #3]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	f040 80a2 	bne.w	8001b5a <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 8001a16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a18:	2200      	movs	r2, #0
 8001a1a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001a1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a1e:	7b1b      	ldrb	r3, [r3, #12]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f000 8093 	beq.w	8001b4c <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001a26:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001a2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d046      	beq.n	8001ac0 <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001a32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a34:	785b      	ldrb	r3, [r3, #1]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d126      	bne.n	8001a88 <PCD_EP_ISR_Handler+0x60e>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4e:	4413      	add	r3, r2
 8001a50:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	011a      	lsls	r2, r3, #4
 8001a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5a:	4413      	add	r3, r2
 8001a5c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001a60:	623b      	str	r3, [r7, #32]
 8001a62:	6a3b      	ldr	r3, [r7, #32]
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	6a3b      	ldr	r3, [r7, #32]
 8001a70:	801a      	strh	r2, [r3, #0]
 8001a72:	6a3b      	ldr	r3, [r7, #32]
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	6a3b      	ldr	r3, [r7, #32]
 8001a84:	801a      	strh	r2, [r3, #0]
 8001a86:	e061      	b.n	8001b4c <PCD_EP_ISR_Handler+0x6d2>
 8001a88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a8a:	785b      	ldrb	r3, [r3, #1]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d15d      	bne.n	8001b4c <PCD_EP_ISR_Handler+0x6d2>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aa4:	4413      	add	r3, r2
 8001aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001aa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	011a      	lsls	r2, r3, #4
 8001aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ab0:	4413      	add	r3, r2
 8001ab2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001aba:	2200      	movs	r2, #0
 8001abc:	801a      	strh	r2, [r3, #0]
 8001abe:	e045      	b.n	8001b4c <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ac6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ac8:	785b      	ldrb	r3, [r3, #1]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d126      	bne.n	8001b1c <PCD_EP_ISR_Handler+0x6a2>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	461a      	mov	r2, r3
 8001ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ae2:	4413      	add	r3, r2
 8001ae4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ae6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	011a      	lsls	r2, r3, #4
 8001aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001aee:	4413      	add	r3, r2
 8001af0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001af4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001af8:	881b      	ldrh	r3, [r3, #0]
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b04:	801a      	strh	r2, [r3, #0]
 8001b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b18:	801a      	strh	r2, [r3, #0]
 8001b1a:	e017      	b.n	8001b4c <PCD_EP_ISR_Handler+0x6d2>
 8001b1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b1e:	785b      	ldrb	r3, [r3, #1]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d113      	bne.n	8001b4c <PCD_EP_ISR_Handler+0x6d2>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	461a      	mov	r2, r3
 8001b30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b32:	4413      	add	r3, r2
 8001b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	011a      	lsls	r2, r3, #4
 8001b3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b3e:	4413      	add	r3, r2
 8001b40:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001b44:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b48:	2200      	movs	r2, #0
 8001b4a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001b4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	4619      	mov	r1, r3
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f005 fa95 	bl	8007082 <HAL_PCD_DataInStageCallback>
 8001b58:	e053      	b.n	8001c02 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001b5a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001b5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d146      	bne.n	8001bf4 <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	461a      	mov	r2, r3
 8001b72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	4413      	add	r3, r2
 8001b7a:	3302      	adds	r3, #2
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	6812      	ldr	r2, [r2, #0]
 8001b82:	4413      	add	r3, r2
 8001b84:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b8e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8001b92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b94:	699a      	ldr	r2, [r3, #24]
 8001b96:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d907      	bls.n	8001bae <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 8001b9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ba0:	699a      	ldr	r2, [r3, #24]
 8001ba2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001ba6:	1ad2      	subs	r2, r2, r3
 8001ba8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001baa:	619a      	str	r2, [r3, #24]
 8001bac:	e002      	b.n	8001bb4 <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 8001bae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001bb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d106      	bne.n	8001bca <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001bbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f005 fa5d 	bl	8007082 <HAL_PCD_DataInStageCallback>
 8001bc8:	e01b      	b.n	8001c02 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001bca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bcc:	695a      	ldr	r2, [r3, #20]
 8001bce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001bd2:	441a      	add	r2, r3
 8001bd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bd6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001bd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bda:	69da      	ldr	r2, [r3, #28]
 8001bdc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001be0:	441a      	add	r2, r3
 8001be2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001be4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001bec:	4618      	mov	r0, r3
 8001bee:	f002 f843 	bl	8003c78 <USB_EPStartXfer>
 8001bf2:	e006      	b.n	8001c02 <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001bf4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f91b 	bl	8001e38 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	b21b      	sxth	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f6ff ac38 	blt.w	8001484 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3758      	adds	r7, #88	@ 0x58
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b088      	sub	sp, #32
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	60f8      	str	r0, [r7, #12]
 8001c26:	60b9      	str	r1, [r7, #8]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001c2c:	88fb      	ldrh	r3, [r7, #6]
 8001c2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d07e      	beq.n	8001d34 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	461a      	mov	r2, r3
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	4413      	add	r3, r2
 8001c4a:	3302      	adds	r3, #2
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	6812      	ldr	r2, [r2, #0]
 8001c52:	4413      	add	r3, r2
 8001c54:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001c58:	881b      	ldrh	r3, [r3, #0]
 8001c5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c5e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	699a      	ldr	r2, [r3, #24]
 8001c64:	8b7b      	ldrh	r3, [r7, #26]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d306      	bcc.n	8001c78 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	699a      	ldr	r2, [r3, #24]
 8001c6e:	8b7b      	ldrh	r3, [r7, #26]
 8001c70:	1ad2      	subs	r2, r2, r3
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	619a      	str	r2, [r3, #24]
 8001c76:	e002      	b.n	8001c7e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d123      	bne.n	8001cce <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001c9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ca0:	833b      	strh	r3, [r7, #24]
 8001ca2:	8b3b      	ldrh	r3, [r7, #24]
 8001ca4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001ca8:	833b      	strh	r3, [r7, #24]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	441a      	add	r2, r3
 8001cb8:	8b3b      	ldrh	r3, [r7, #24]
 8001cba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001cbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001cc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001cce:	88fb      	ldrh	r3, [r7, #6]
 8001cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d01f      	beq.n	8001d18 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	881b      	ldrh	r3, [r3, #0]
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001cee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001cf2:	82fb      	strh	r3, [r7, #22]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	441a      	add	r2, r3
 8001d02:	8afb      	ldrh	r3, [r7, #22]
 8001d04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001d08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001d0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d10:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001d18:	8b7b      	ldrh	r3, [r7, #26]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f000 8087 	beq.w	8001e2e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6818      	ldr	r0, [r3, #0]
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	6959      	ldr	r1, [r3, #20]
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	891a      	ldrh	r2, [r3, #8]
 8001d2c:	8b7b      	ldrh	r3, [r7, #26]
 8001d2e:	f003 fcd7 	bl	80056e0 <USB_ReadPMA>
 8001d32:	e07c      	b.n	8001e2e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	461a      	mov	r2, r3
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	4413      	add	r3, r2
 8001d48:	3306      	adds	r3, #6
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	6812      	ldr	r2, [r2, #0]
 8001d50:	4413      	add	r3, r2
 8001d52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d56:	881b      	ldrh	r3, [r3, #0]
 8001d58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d5c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	699a      	ldr	r2, [r3, #24]
 8001d62:	8b7b      	ldrh	r3, [r7, #26]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d306      	bcc.n	8001d76 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	699a      	ldr	r2, [r3, #24]
 8001d6c:	8b7b      	ldrh	r3, [r7, #26]
 8001d6e:	1ad2      	subs	r2, r2, r3
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	619a      	str	r2, [r3, #24]
 8001d74:	e002      	b.n	8001d7c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d123      	bne.n	8001dcc <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001d9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d9e:	83fb      	strh	r3, [r7, #30]
 8001da0:	8bfb      	ldrh	r3, [r7, #30]
 8001da2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001da6:	83fb      	strh	r3, [r7, #30]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	461a      	mov	r2, r3
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	441a      	add	r2, r3
 8001db6:	8bfb      	ldrh	r3, [r7, #30]
 8001db8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001dbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001dc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001dcc:	88fb      	ldrh	r3, [r7, #6]
 8001dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d11f      	bne.n	8001e16 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	881b      	ldrh	r3, [r3, #0]
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001dec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001df0:	83bb      	strh	r3, [r7, #28]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	461a      	mov	r2, r3
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	441a      	add	r2, r3
 8001e00:	8bbb      	ldrh	r3, [r7, #28]
 8001e02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001e06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001e0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e0e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001e16:	8b7b      	ldrh	r3, [r7, #26]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d008      	beq.n	8001e2e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6818      	ldr	r0, [r3, #0]
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	6959      	ldr	r1, [r3, #20]
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	895a      	ldrh	r2, [r3, #10]
 8001e28:	8b7b      	ldrh	r3, [r7, #26]
 8001e2a:	f003 fc59 	bl	80056e0 <USB_ReadPMA>
    }
  }

  return count;
 8001e2e:	8b7b      	ldrh	r3, [r7, #26]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3720      	adds	r7, #32
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b0a4      	sub	sp, #144	@ 0x90
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	4613      	mov	r3, r2
 8001e44:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f000 81dd 	beq.w	800220c <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	4413      	add	r3, r2
 8001e66:	3302      	adds	r3, #2
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	6812      	ldr	r2, [r2, #0]
 8001e6e:	4413      	add	r3, r2
 8001e70:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001e74:	881b      	ldrh	r3, [r3, #0]
 8001e76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e7a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	699a      	ldr	r2, [r3, #24]
 8001e82:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d907      	bls.n	8001e9a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	699a      	ldr	r2, [r3, #24]
 8001e8e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001e92:	1ad2      	subs	r2, r2, r3
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	619a      	str	r2, [r3, #24]
 8001e98:	e002      	b.n	8001ea0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f040 80b9 	bne.w	800201c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	785b      	ldrb	r3, [r3, #1]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d126      	bne.n	8001f00 <HAL_PCD_EP_DB_Transmit+0xc8>
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ec6:	4413      	add	r3, r2
 8001ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	011a      	lsls	r2, r3, #4
 8001ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ed2:	4413      	add	r3, r2
 8001ed4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001edc:	881b      	ldrh	r3, [r3, #0]
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ee8:	801a      	strh	r2, [r3, #0]
 8001eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eec:	881b      	ldrh	r3, [r3, #0]
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ef4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001efc:	801a      	strh	r2, [r3, #0]
 8001efe:	e01a      	b.n	8001f36 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	785b      	ldrb	r3, [r3, #1]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d116      	bne.n	8001f36 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	461a      	mov	r2, r3
 8001f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f1c:	4413      	add	r3, r2
 8001f1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	011a      	lsls	r2, r3, #4
 8001f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f28:	4413      	add	r3, r2
 8001f2a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001f2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f32:	2200      	movs	r2, #0
 8001f34:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	785b      	ldrb	r3, [r3, #1]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d126      	bne.n	8001f92 <HAL_PCD_EP_DB_Transmit+0x15a>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	61fb      	str	r3, [r7, #28]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	461a      	mov	r2, r3
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	4413      	add	r3, r2
 8001f5a:	61fb      	str	r3, [r7, #28]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	011a      	lsls	r2, r3, #4
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	4413      	add	r3, r2
 8001f66:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001f6a:	61bb      	str	r3, [r7, #24]
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	801a      	strh	r2, [r3, #0]
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	881b      	ldrh	r3, [r3, #0]
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	801a      	strh	r2, [r3, #0]
 8001f90:	e017      	b.n	8001fc2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	785b      	ldrb	r3, [r3, #1]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d113      	bne.n	8001fc2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa8:	4413      	add	r3, r2
 8001faa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	011a      	lsls	r2, r3, #4
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb4:	4413      	add	r3, r2
 8001fb6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001fba:	623b      	str	r3, [r7, #32]
 8001fbc:	6a3b      	ldr	r3, [r7, #32]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	68f8      	ldr	r0, [r7, #12]
 8001fca:	f005 f85a 	bl	8007082 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001fce:	88fb      	ldrh	r3, [r7, #6]
 8001fd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 82fc 	beq.w	80025d2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4413      	add	r3, r2
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001ff0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ff4:	82fb      	strh	r3, [r7, #22]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	441a      	add	r2, r3
 8002004:	8afb      	ldrh	r3, [r7, #22]
 8002006:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800200a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800200e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002012:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002016:	b29b      	uxth	r3, r3
 8002018:	8013      	strh	r3, [r2, #0]
 800201a:	e2da      	b.n	80025d2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800201c:	88fb      	ldrh	r3, [r7, #6]
 800201e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d021      	beq.n	800206a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	461a      	mov	r2, r3
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	b29b      	uxth	r3, r3
 8002038:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800203c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002040:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	461a      	mov	r2, r3
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	441a      	add	r2, r3
 8002052:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002056:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800205a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800205e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002062:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002066:	b29b      	uxth	r3, r3
 8002068:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002070:	2b01      	cmp	r3, #1
 8002072:	f040 82ae 	bne.w	80025d2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	695a      	ldr	r2, [r3, #20]
 800207a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800207e:	441a      	add	r2, r3
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	69da      	ldr	r2, [r3, #28]
 8002088:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800208c:	441a      	add	r2, r3
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	6a1a      	ldr	r2, [r3, #32]
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	429a      	cmp	r2, r3
 800209c:	d30b      	bcc.n	80020b6 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	6a1a      	ldr	r2, [r3, #32]
 80020aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020ae:	1ad2      	subs	r2, r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	621a      	str	r2, [r3, #32]
 80020b4:	e017      	b.n	80020e6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d108      	bne.n	80020d0 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80020be:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80020c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80020ce:	e00a      	b.n	80020e6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2200      	movs	r2, #0
 80020e4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	785b      	ldrb	r3, [r3, #1]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d165      	bne.n	80021ba <HAL_PCD_EP_DB_Transmit+0x382>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	461a      	mov	r2, r3
 8002100:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002102:	4413      	add	r3, r2
 8002104:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	011a      	lsls	r2, r3, #4
 800210c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800210e:	4413      	add	r3, r2
 8002110:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002114:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002118:	881b      	ldrh	r3, [r3, #0]
 800211a:	b29b      	uxth	r3, r3
 800211c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002120:	b29a      	uxth	r2, r3
 8002122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002124:	801a      	strh	r2, [r3, #0]
 8002126:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800212a:	2b3e      	cmp	r3, #62	@ 0x3e
 800212c:	d91d      	bls.n	800216a <HAL_PCD_EP_DB_Transmit+0x332>
 800212e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002132:	095b      	lsrs	r3, r3, #5
 8002134:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002136:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800213a:	f003 031f 	and.w	r3, r3, #31
 800213e:	2b00      	cmp	r3, #0
 8002140:	d102      	bne.n	8002148 <HAL_PCD_EP_DB_Transmit+0x310>
 8002142:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002144:	3b01      	subs	r3, #1
 8002146:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800214a:	881b      	ldrh	r3, [r3, #0]
 800214c:	b29a      	uxth	r2, r3
 800214e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002150:	b29b      	uxth	r3, r3
 8002152:	029b      	lsls	r3, r3, #10
 8002154:	b29b      	uxth	r3, r3
 8002156:	4313      	orrs	r3, r2
 8002158:	b29b      	uxth	r3, r3
 800215a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800215e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002162:	b29a      	uxth	r2, r3
 8002164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002166:	801a      	strh	r2, [r3, #0]
 8002168:	e044      	b.n	80021f4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800216a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10a      	bne.n	8002188 <HAL_PCD_EP_DB_Transmit+0x350>
 8002172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	b29b      	uxth	r3, r3
 8002178:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800217c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002180:	b29a      	uxth	r2, r3
 8002182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002184:	801a      	strh	r2, [r3, #0]
 8002186:	e035      	b.n	80021f4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002188:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800218c:	085b      	lsrs	r3, r3, #1
 800218e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002190:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	d002      	beq.n	80021a2 <HAL_PCD_EP_DB_Transmit+0x36a>
 800219c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800219e:	3301      	adds	r3, #1
 80021a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80021a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021a4:	881b      	ldrh	r3, [r3, #0]
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	029b      	lsls	r3, r3, #10
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	4313      	orrs	r3, r2
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021b6:	801a      	strh	r2, [r3, #0]
 80021b8:	e01c      	b.n	80021f4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	785b      	ldrb	r3, [r3, #1]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d118      	bne.n	80021f4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	461a      	mov	r2, r3
 80021d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021d6:	4413      	add	r3, r2
 80021d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	011a      	lsls	r2, r3, #4
 80021e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021e2:	4413      	add	r3, r2
 80021e4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80021e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80021ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021f2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6818      	ldr	r0, [r3, #0]
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	6959      	ldr	r1, [r3, #20]
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	891a      	ldrh	r2, [r3, #8]
 8002200:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002204:	b29b      	uxth	r3, r3
 8002206:	f003 fa26 	bl	8005656 <USB_WritePMA>
 800220a:	e1e2      	b.n	80025d2 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002214:	b29b      	uxth	r3, r3
 8002216:	461a      	mov	r2, r3
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	4413      	add	r3, r2
 8002220:	3306      	adds	r3, #6
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	6812      	ldr	r2, [r2, #0]
 8002228:	4413      	add	r3, r2
 800222a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800222e:	881b      	ldrh	r3, [r3, #0]
 8002230:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002234:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	699a      	ldr	r2, [r3, #24]
 800223c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002240:	429a      	cmp	r2, r3
 8002242:	d307      	bcc.n	8002254 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	699a      	ldr	r2, [r3, #24]
 8002248:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800224c:	1ad2      	subs	r2, r2, r3
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	619a      	str	r2, [r3, #24]
 8002252:	e002      	b.n	800225a <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	2200      	movs	r2, #0
 8002258:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	2b00      	cmp	r3, #0
 8002260:	f040 80c0 	bne.w	80023e4 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	785b      	ldrb	r3, [r3, #1]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d126      	bne.n	80022ba <HAL_PCD_EP_DB_Transmit+0x482>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800227a:	b29b      	uxth	r3, r3
 800227c:	461a      	mov	r2, r3
 800227e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002280:	4413      	add	r3, r2
 8002282:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	011a      	lsls	r2, r3, #4
 800228a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800228c:	4413      	add	r3, r2
 800228e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002292:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002294:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	b29b      	uxth	r3, r3
 800229a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800229e:	b29a      	uxth	r2, r3
 80022a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80022a2:	801a      	strh	r2, [r3, #0]
 80022a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80022b6:	801a      	strh	r2, [r3, #0]
 80022b8:	e01a      	b.n	80022f0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	785b      	ldrb	r3, [r3, #1]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d116      	bne.n	80022f0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	461a      	mov	r2, r3
 80022d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80022d6:	4413      	add	r3, r2
 80022d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	011a      	lsls	r2, r3, #4
 80022e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80022e2:	4413      	add	r3, r2
 80022e4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80022e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80022ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022ec:	2200      	movs	r2, #0
 80022ee:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	677b      	str	r3, [r7, #116]	@ 0x74
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	785b      	ldrb	r3, [r3, #1]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d12b      	bne.n	8002356 <HAL_PCD_EP_DB_Transmit+0x51e>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800230c:	b29b      	uxth	r3, r3
 800230e:	461a      	mov	r2, r3
 8002310:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002312:	4413      	add	r3, r2
 8002314:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	011a      	lsls	r2, r3, #4
 800231c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800231e:	4413      	add	r3, r2
 8002320:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002324:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002328:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	b29b      	uxth	r3, r3
 8002330:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002334:	b29a      	uxth	r2, r3
 8002336:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800233a:	801a      	strh	r2, [r3, #0]
 800233c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002340:	881b      	ldrh	r3, [r3, #0]
 8002342:	b29b      	uxth	r3, r3
 8002344:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002348:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800234c:	b29a      	uxth	r2, r3
 800234e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002352:	801a      	strh	r2, [r3, #0]
 8002354:	e017      	b.n	8002386 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	785b      	ldrb	r3, [r3, #1]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d113      	bne.n	8002386 <HAL_PCD_EP_DB_Transmit+0x54e>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002366:	b29b      	uxth	r3, r3
 8002368:	461a      	mov	r2, r3
 800236a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800236c:	4413      	add	r3, r2
 800236e:	677b      	str	r3, [r7, #116]	@ 0x74
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	011a      	lsls	r2, r3, #4
 8002376:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002378:	4413      	add	r3, r2
 800237a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800237e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002380:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002382:	2200      	movs	r2, #0
 8002384:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	4619      	mov	r1, r3
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f004 fe78 	bl	8007082 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002392:	88fb      	ldrh	r3, [r7, #6]
 8002394:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002398:	2b00      	cmp	r3, #0
 800239a:	f040 811a 	bne.w	80025d2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80023b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023b8:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	461a      	mov	r2, r3
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	441a      	add	r2, r3
 80023ca:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80023ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80023d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80023d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023de:	b29b      	uxth	r3, r3
 80023e0:	8013      	strh	r3, [r2, #0]
 80023e2:	e0f6      	b.n	80025d2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80023e4:	88fb      	ldrh	r3, [r7, #6]
 80023e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d121      	bne.n	8002432 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	461a      	mov	r2, r3
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	881b      	ldrh	r3, [r3, #0]
 80023fe:	b29b      	uxth	r3, r3
 8002400:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002404:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002408:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	461a      	mov	r2, r3
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	441a      	add	r2, r3
 800241a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800241e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002422:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002426:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800242a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800242e:	b29b      	uxth	r3, r3
 8002430:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002438:	2b01      	cmp	r3, #1
 800243a:	f040 80ca 	bne.w	80025d2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	695a      	ldr	r2, [r3, #20]
 8002442:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002446:	441a      	add	r2, r3
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	69da      	ldr	r2, [r3, #28]
 8002450:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002454:	441a      	add	r2, r3
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	6a1a      	ldr	r2, [r3, #32]
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	429a      	cmp	r2, r3
 8002464:	d30b      	bcc.n	800247e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	6a1a      	ldr	r2, [r3, #32]
 8002472:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002476:	1ad2      	subs	r2, r2, r3
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	621a      	str	r2, [r3, #32]
 800247c:	e017      	b.n	80024ae <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d108      	bne.n	8002498 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002486:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800248a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002496:	e00a      	b.n	80024ae <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	2200      	movs	r2, #0
 80024a4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	785b      	ldrb	r3, [r3, #1]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d165      	bne.n	8002588 <HAL_PCD_EP_DB_Transmit+0x750>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	461a      	mov	r2, r3
 80024ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024d0:	4413      	add	r3, r2
 80024d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	011a      	lsls	r2, r3, #4
 80024da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024dc:	4413      	add	r3, r2
 80024de:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80024e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80024e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024f2:	801a      	strh	r2, [r3, #0]
 80024f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80024fa:	d91d      	bls.n	8002538 <HAL_PCD_EP_DB_Transmit+0x700>
 80024fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002500:	095b      	lsrs	r3, r3, #5
 8002502:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002504:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002508:	f003 031f 	and.w	r3, r3, #31
 800250c:	2b00      	cmp	r3, #0
 800250e:	d102      	bne.n	8002516 <HAL_PCD_EP_DB_Transmit+0x6de>
 8002510:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002512:	3b01      	subs	r3, #1
 8002514:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002516:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	b29a      	uxth	r2, r3
 800251c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800251e:	b29b      	uxth	r3, r3
 8002520:	029b      	lsls	r3, r3, #10
 8002522:	b29b      	uxth	r3, r3
 8002524:	4313      	orrs	r3, r2
 8002526:	b29b      	uxth	r3, r3
 8002528:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800252c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002530:	b29a      	uxth	r2, r3
 8002532:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002534:	801a      	strh	r2, [r3, #0]
 8002536:	e041      	b.n	80025bc <HAL_PCD_EP_DB_Transmit+0x784>
 8002538:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10a      	bne.n	8002556 <HAL_PCD_EP_DB_Transmit+0x71e>
 8002540:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	b29b      	uxth	r3, r3
 8002546:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800254a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800254e:	b29a      	uxth	r2, r3
 8002550:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002552:	801a      	strh	r2, [r3, #0]
 8002554:	e032      	b.n	80025bc <HAL_PCD_EP_DB_Transmit+0x784>
 8002556:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800255a:	085b      	lsrs	r3, r3, #1
 800255c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800255e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d002      	beq.n	8002570 <HAL_PCD_EP_DB_Transmit+0x738>
 800256a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800256c:	3301      	adds	r3, #1
 800256e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002570:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	b29a      	uxth	r2, r3
 8002576:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002578:	b29b      	uxth	r3, r3
 800257a:	029b      	lsls	r3, r3, #10
 800257c:	b29b      	uxth	r3, r3
 800257e:	4313      	orrs	r3, r2
 8002580:	b29a      	uxth	r2, r3
 8002582:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002584:	801a      	strh	r2, [r3, #0]
 8002586:	e019      	b.n	80025bc <HAL_PCD_EP_DB_Transmit+0x784>
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	785b      	ldrb	r3, [r3, #1]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d115      	bne.n	80025bc <HAL_PCD_EP_DB_Transmit+0x784>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002598:	b29b      	uxth	r3, r3
 800259a:	461a      	mov	r2, r3
 800259c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800259e:	4413      	add	r3, r2
 80025a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	011a      	lsls	r2, r3, #4
 80025a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025aa:	4413      	add	r3, r2
 80025ac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80025b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80025b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025ba:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6818      	ldr	r0, [r3, #0]
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	6959      	ldr	r1, [r3, #20]
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	895a      	ldrh	r2, [r3, #10]
 80025c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	f003 f842 	bl	8005656 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	881b      	ldrh	r3, [r3, #0]
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80025e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80025ec:	82bb      	strh	r3, [r7, #20]
 80025ee:	8abb      	ldrh	r3, [r7, #20]
 80025f0:	f083 0310 	eor.w	r3, r3, #16
 80025f4:	82bb      	strh	r3, [r7, #20]
 80025f6:	8abb      	ldrh	r3, [r7, #20]
 80025f8:	f083 0320 	eor.w	r3, r3, #32
 80025fc:	82bb      	strh	r3, [r7, #20]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	461a      	mov	r2, r3
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	441a      	add	r2, r3
 800260c:	8abb      	ldrh	r3, [r7, #20]
 800260e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002612:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002616:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800261a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800261e:	b29b      	uxth	r3, r3
 8002620:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3790      	adds	r7, #144	@ 0x90
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800262c:	b480      	push	{r7}
 800262e:	b087      	sub	sp, #28
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	607b      	str	r3, [r7, #4]
 8002636:	460b      	mov	r3, r1
 8002638:	817b      	strh	r3, [r7, #10]
 800263a:	4613      	mov	r3, r2
 800263c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800263e:	897b      	ldrh	r3, [r7, #10]
 8002640:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002644:	b29b      	uxth	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00b      	beq.n	8002662 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800264a:	897b      	ldrh	r3, [r7, #10]
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	4613      	mov	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	4413      	add	r3, r2
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	e009      	b.n	8002676 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002662:	897a      	ldrh	r2, [r7, #10]
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	4413      	add	r3, r2
 8002674:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002676:	893b      	ldrh	r3, [r7, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d107      	bne.n	800268c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	2200      	movs	r2, #0
 8002680:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	b29a      	uxth	r2, r3
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	80da      	strh	r2, [r3, #6]
 800268a:	e00b      	b.n	80026a4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	2201      	movs	r2, #1
 8002690:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	b29a      	uxth	r2, r3
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	0c1b      	lsrs	r3, r3, #16
 800269e:	b29a      	uxth	r2, r3
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	371c      	adds	r7, #28
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr

080026b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e272      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 8087 	beq.w	80027de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026d0:	4b92      	ldr	r3, [pc, #584]	@ (800291c <HAL_RCC_OscConfig+0x26c>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 030c 	and.w	r3, r3, #12
 80026d8:	2b04      	cmp	r3, #4
 80026da:	d00c      	beq.n	80026f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026dc:	4b8f      	ldr	r3, [pc, #572]	@ (800291c <HAL_RCC_OscConfig+0x26c>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f003 030c 	and.w	r3, r3, #12
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d112      	bne.n	800270e <HAL_RCC_OscConfig+0x5e>
 80026e8:	4b8c      	ldr	r3, [pc, #560]	@ (800291c <HAL_RCC_OscConfig+0x26c>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026f4:	d10b      	bne.n	800270e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f6:	4b89      	ldr	r3, [pc, #548]	@ (800291c <HAL_RCC_OscConfig+0x26c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d06c      	beq.n	80027dc <HAL_RCC_OscConfig+0x12c>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d168      	bne.n	80027dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e24c      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002716:	d106      	bne.n	8002726 <HAL_RCC_OscConfig+0x76>
 8002718:	4b80      	ldr	r3, [pc, #512]	@ (800291c <HAL_RCC_OscConfig+0x26c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a7f      	ldr	r2, [pc, #508]	@ (800291c <HAL_RCC_OscConfig+0x26c>)
 800271e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002722:	6013      	str	r3, [r2, #0]
 8002724:	e02e      	b.n	8002784 <HAL_RCC_OscConfig+0xd4>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10c      	bne.n	8002748 <HAL_RCC_OscConfig+0x98>
 800272e:	4b7b      	ldr	r3, [pc, #492]	@ (800291c <HAL_RCC_OscConfig+0x26c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a7a      	ldr	r2, [pc, #488]	@ (800291c <HAL_RCC_OscConfig+0x26c>)
 8002734:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002738:	6013      	str	r3, [r2, #0]
 800273a:	4b78      	ldr	r3, [pc, #480]	@ (800291c <HAL_RCC_OscConfig+0x26c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a77      	ldr	r2, [pc, #476]	@ (800291c <HAL_RCC_OscConfig+0x26c>)
 8002740:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002744:	6013      	str	r3, [r2, #0]
 8002746:	e01d      	b.n	8002784 <HAL_RCC_OscConfig+0xd4>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002750:	d10c      	bne.n	800276c <HAL_RCC_OscConfig+0xbc>
 8002752:	4b72      	ldr	r3, [pc, #456]	@ (800291c <HAL_RCC_OscConfig+0x26c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a71      	ldr	r2, [pc, #452]	@ (800291c <HAL_RCC_OscConfig+0x26c>)
 8002758:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	4b6f      	ldr	r3, [pc, #444]	@ (800291c <HAL_RCC_OscConfig+0x26c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a6e      	ldr	r2, [pc, #440]	@ (800291c <HAL_RCC_OscConfig+0x26c>)
 8002764:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	e00b      	b.n	8002784 <HAL_RCC_OscConfig+0xd4>
 800276c:	4b6b      	ldr	r3, [pc, #428]	@ (800291c <HAL_RCC_OscConfig+0x26c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a6a      	ldr	r2, [pc, #424]	@ (800291c <HAL_RCC_OscConfig+0x26c>)
 8002772:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002776:	6013      	str	r3, [r2, #0]
 8002778:	4b68      	ldr	r3, [pc, #416]	@ (800291c <HAL_RCC_OscConfig+0x26c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a67      	ldr	r2, [pc, #412]	@ (800291c <HAL_RCC_OscConfig+0x26c>)
 800277e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002782:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d013      	beq.n	80027b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278c:	f7fd ff34 	bl	80005f8 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002794:	f7fd ff30 	bl	80005f8 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b64      	cmp	r3, #100	@ 0x64
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e200      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a6:	4b5d      	ldr	r3, [pc, #372]	@ (800291c <HAL_RCC_OscConfig+0x26c>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d0f0      	beq.n	8002794 <HAL_RCC_OscConfig+0xe4>
 80027b2:	e014      	b.n	80027de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b4:	f7fd ff20 	bl	80005f8 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027bc:	f7fd ff1c 	bl	80005f8 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b64      	cmp	r3, #100	@ 0x64
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e1ec      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ce:	4b53      	ldr	r3, [pc, #332]	@ (800291c <HAL_RCC_OscConfig+0x26c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f0      	bne.n	80027bc <HAL_RCC_OscConfig+0x10c>
 80027da:	e000      	b.n	80027de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d063      	beq.n	80028b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027ea:	4b4c      	ldr	r3, [pc, #304]	@ (800291c <HAL_RCC_OscConfig+0x26c>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f003 030c 	and.w	r3, r3, #12
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00b      	beq.n	800280e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027f6:	4b49      	ldr	r3, [pc, #292]	@ (800291c <HAL_RCC_OscConfig+0x26c>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f003 030c 	and.w	r3, r3, #12
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d11c      	bne.n	800283c <HAL_RCC_OscConfig+0x18c>
 8002802:	4b46      	ldr	r3, [pc, #280]	@ (800291c <HAL_RCC_OscConfig+0x26c>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d116      	bne.n	800283c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800280e:	4b43      	ldr	r3, [pc, #268]	@ (800291c <HAL_RCC_OscConfig+0x26c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d005      	beq.n	8002826 <HAL_RCC_OscConfig+0x176>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d001      	beq.n	8002826 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e1c0      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002826:	4b3d      	ldr	r3, [pc, #244]	@ (800291c <HAL_RCC_OscConfig+0x26c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	4939      	ldr	r1, [pc, #228]	@ (800291c <HAL_RCC_OscConfig+0x26c>)
 8002836:	4313      	orrs	r3, r2
 8002838:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800283a:	e03a      	b.n	80028b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d020      	beq.n	8002886 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002844:	4b36      	ldr	r3, [pc, #216]	@ (8002920 <HAL_RCC_OscConfig+0x270>)
 8002846:	2201      	movs	r2, #1
 8002848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284a:	f7fd fed5 	bl	80005f8 <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002852:	f7fd fed1 	bl	80005f8 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e1a1      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002864:	4b2d      	ldr	r3, [pc, #180]	@ (800291c <HAL_RCC_OscConfig+0x26c>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0f0      	beq.n	8002852 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002870:	4b2a      	ldr	r3, [pc, #168]	@ (800291c <HAL_RCC_OscConfig+0x26c>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	4927      	ldr	r1, [pc, #156]	@ (800291c <HAL_RCC_OscConfig+0x26c>)
 8002880:	4313      	orrs	r3, r2
 8002882:	600b      	str	r3, [r1, #0]
 8002884:	e015      	b.n	80028b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002886:	4b26      	ldr	r3, [pc, #152]	@ (8002920 <HAL_RCC_OscConfig+0x270>)
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288c:	f7fd feb4 	bl	80005f8 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002894:	f7fd feb0 	bl	80005f8 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e180      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028a6:	4b1d      	ldr	r3, [pc, #116]	@ (800291c <HAL_RCC_OscConfig+0x26c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f0      	bne.n	8002894 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0308 	and.w	r3, r3, #8
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d03a      	beq.n	8002934 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d019      	beq.n	80028fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028c6:	4b17      	ldr	r3, [pc, #92]	@ (8002924 <HAL_RCC_OscConfig+0x274>)
 80028c8:	2201      	movs	r2, #1
 80028ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028cc:	f7fd fe94 	bl	80005f8 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028d4:	f7fd fe90 	bl	80005f8 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e160      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028e6:	4b0d      	ldr	r3, [pc, #52]	@ (800291c <HAL_RCC_OscConfig+0x26c>)
 80028e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0f0      	beq.n	80028d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80028f2:	2001      	movs	r0, #1
 80028f4:	f000 fad4 	bl	8002ea0 <RCC_Delay>
 80028f8:	e01c      	b.n	8002934 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002924 <HAL_RCC_OscConfig+0x274>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002900:	f7fd fe7a 	bl	80005f8 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002906:	e00f      	b.n	8002928 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002908:	f7fd fe76 	bl	80005f8 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d908      	bls.n	8002928 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e146      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4f8>
 800291a:	bf00      	nop
 800291c:	40021000 	.word	0x40021000
 8002920:	42420000 	.word	0x42420000
 8002924:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002928:	4b92      	ldr	r3, [pc, #584]	@ (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 800292a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1e9      	bne.n	8002908 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 80a6 	beq.w	8002a8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002942:	2300      	movs	r3, #0
 8002944:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002946:	4b8b      	ldr	r3, [pc, #556]	@ (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 8002948:	69db      	ldr	r3, [r3, #28]
 800294a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10d      	bne.n	800296e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002952:	4b88      	ldr	r3, [pc, #544]	@ (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	4a87      	ldr	r2, [pc, #540]	@ (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 8002958:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800295c:	61d3      	str	r3, [r2, #28]
 800295e:	4b85      	ldr	r3, [pc, #532]	@ (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002966:	60bb      	str	r3, [r7, #8]
 8002968:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800296a:	2301      	movs	r3, #1
 800296c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800296e:	4b82      	ldr	r3, [pc, #520]	@ (8002b78 <HAL_RCC_OscConfig+0x4c8>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002976:	2b00      	cmp	r3, #0
 8002978:	d118      	bne.n	80029ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800297a:	4b7f      	ldr	r3, [pc, #508]	@ (8002b78 <HAL_RCC_OscConfig+0x4c8>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a7e      	ldr	r2, [pc, #504]	@ (8002b78 <HAL_RCC_OscConfig+0x4c8>)
 8002980:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002984:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002986:	f7fd fe37 	bl	80005f8 <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800298e:	f7fd fe33 	bl	80005f8 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b64      	cmp	r3, #100	@ 0x64
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e103      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a0:	4b75      	ldr	r3, [pc, #468]	@ (8002b78 <HAL_RCC_OscConfig+0x4c8>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d0f0      	beq.n	800298e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d106      	bne.n	80029c2 <HAL_RCC_OscConfig+0x312>
 80029b4:	4b6f      	ldr	r3, [pc, #444]	@ (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	4a6e      	ldr	r2, [pc, #440]	@ (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 80029ba:	f043 0301 	orr.w	r3, r3, #1
 80029be:	6213      	str	r3, [r2, #32]
 80029c0:	e02d      	b.n	8002a1e <HAL_RCC_OscConfig+0x36e>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10c      	bne.n	80029e4 <HAL_RCC_OscConfig+0x334>
 80029ca:	4b6a      	ldr	r3, [pc, #424]	@ (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	4a69      	ldr	r2, [pc, #420]	@ (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 80029d0:	f023 0301 	bic.w	r3, r3, #1
 80029d4:	6213      	str	r3, [r2, #32]
 80029d6:	4b67      	ldr	r3, [pc, #412]	@ (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	4a66      	ldr	r2, [pc, #408]	@ (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 80029dc:	f023 0304 	bic.w	r3, r3, #4
 80029e0:	6213      	str	r3, [r2, #32]
 80029e2:	e01c      	b.n	8002a1e <HAL_RCC_OscConfig+0x36e>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	2b05      	cmp	r3, #5
 80029ea:	d10c      	bne.n	8002a06 <HAL_RCC_OscConfig+0x356>
 80029ec:	4b61      	ldr	r3, [pc, #388]	@ (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	4a60      	ldr	r2, [pc, #384]	@ (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 80029f2:	f043 0304 	orr.w	r3, r3, #4
 80029f6:	6213      	str	r3, [r2, #32]
 80029f8:	4b5e      	ldr	r3, [pc, #376]	@ (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	4a5d      	ldr	r2, [pc, #372]	@ (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 80029fe:	f043 0301 	orr.w	r3, r3, #1
 8002a02:	6213      	str	r3, [r2, #32]
 8002a04:	e00b      	b.n	8002a1e <HAL_RCC_OscConfig+0x36e>
 8002a06:	4b5b      	ldr	r3, [pc, #364]	@ (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	4a5a      	ldr	r2, [pc, #360]	@ (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 8002a0c:	f023 0301 	bic.w	r3, r3, #1
 8002a10:	6213      	str	r3, [r2, #32]
 8002a12:	4b58      	ldr	r3, [pc, #352]	@ (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	4a57      	ldr	r2, [pc, #348]	@ (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 8002a18:	f023 0304 	bic.w	r3, r3, #4
 8002a1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d015      	beq.n	8002a52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a26:	f7fd fde7 	bl	80005f8 <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a2c:	e00a      	b.n	8002a44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a2e:	f7fd fde3 	bl	80005f8 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e0b1      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a44:	4b4b      	ldr	r3, [pc, #300]	@ (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0ee      	beq.n	8002a2e <HAL_RCC_OscConfig+0x37e>
 8002a50:	e014      	b.n	8002a7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a52:	f7fd fdd1 	bl	80005f8 <HAL_GetTick>
 8002a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a58:	e00a      	b.n	8002a70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a5a:	f7fd fdcd 	bl	80005f8 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e09b      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a70:	4b40      	ldr	r3, [pc, #256]	@ (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1ee      	bne.n	8002a5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a7c:	7dfb      	ldrb	r3, [r7, #23]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d105      	bne.n	8002a8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a82:	4b3c      	ldr	r3, [pc, #240]	@ (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	4a3b      	ldr	r2, [pc, #236]	@ (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 8002a88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 8087 	beq.w	8002ba6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a98:	4b36      	ldr	r3, [pc, #216]	@ (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f003 030c 	and.w	r3, r3, #12
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d061      	beq.n	8002b68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	69db      	ldr	r3, [r3, #28]
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d146      	bne.n	8002b3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aac:	4b33      	ldr	r3, [pc, #204]	@ (8002b7c <HAL_RCC_OscConfig+0x4cc>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab2:	f7fd fda1 	bl	80005f8 <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ab8:	e008      	b.n	8002acc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aba:	f7fd fd9d 	bl	80005f8 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e06d      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002acc:	4b29      	ldr	r3, [pc, #164]	@ (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1f0      	bne.n	8002aba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ae0:	d108      	bne.n	8002af4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ae2:	4b24      	ldr	r3, [pc, #144]	@ (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	4921      	ldr	r1, [pc, #132]	@ (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002af4:	4b1f      	ldr	r3, [pc, #124]	@ (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a19      	ldr	r1, [r3, #32]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b04:	430b      	orrs	r3, r1
 8002b06:	491b      	ldr	r1, [pc, #108]	@ (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8002b7c <HAL_RCC_OscConfig+0x4cc>)
 8002b0e:	2201      	movs	r2, #1
 8002b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b12:	f7fd fd71 	bl	80005f8 <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b1a:	f7fd fd6d 	bl	80005f8 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e03d      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b2c:	4b11      	ldr	r3, [pc, #68]	@ (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0f0      	beq.n	8002b1a <HAL_RCC_OscConfig+0x46a>
 8002b38:	e035      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b3a:	4b10      	ldr	r3, [pc, #64]	@ (8002b7c <HAL_RCC_OscConfig+0x4cc>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b40:	f7fd fd5a 	bl	80005f8 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b48:	f7fd fd56 	bl	80005f8 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e026      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b5a:	4b06      	ldr	r3, [pc, #24]	@ (8002b74 <HAL_RCC_OscConfig+0x4c4>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1f0      	bne.n	8002b48 <HAL_RCC_OscConfig+0x498>
 8002b66:	e01e      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	69db      	ldr	r3, [r3, #28]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d107      	bne.n	8002b80 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e019      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4f8>
 8002b74:	40021000 	.word	0x40021000
 8002b78:	40007000 	.word	0x40007000
 8002b7c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b80:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb0 <HAL_RCC_OscConfig+0x500>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d106      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d001      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40021000 	.word	0x40021000

08002bb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d101      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e0d0      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bc8:	4b6a      	ldr	r3, [pc, #424]	@ (8002d74 <HAL_RCC_ClockConfig+0x1c0>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d910      	bls.n	8002bf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd6:	4b67      	ldr	r3, [pc, #412]	@ (8002d74 <HAL_RCC_ClockConfig+0x1c0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f023 0207 	bic.w	r2, r3, #7
 8002bde:	4965      	ldr	r1, [pc, #404]	@ (8002d74 <HAL_RCC_ClockConfig+0x1c0>)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be6:	4b63      	ldr	r3, [pc, #396]	@ (8002d74 <HAL_RCC_ClockConfig+0x1c0>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0307 	and.w	r3, r3, #7
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d001      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e0b8      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d020      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d005      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c10:	4b59      	ldr	r3, [pc, #356]	@ (8002d78 <HAL_RCC_ClockConfig+0x1c4>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	4a58      	ldr	r2, [pc, #352]	@ (8002d78 <HAL_RCC_ClockConfig+0x1c4>)
 8002c16:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002c1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0308 	and.w	r3, r3, #8
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d005      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c28:	4b53      	ldr	r3, [pc, #332]	@ (8002d78 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	4a52      	ldr	r2, [pc, #328]	@ (8002d78 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002c32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c34:	4b50      	ldr	r3, [pc, #320]	@ (8002d78 <HAL_RCC_ClockConfig+0x1c4>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	494d      	ldr	r1, [pc, #308]	@ (8002d78 <HAL_RCC_ClockConfig+0x1c4>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d040      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d107      	bne.n	8002c6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5a:	4b47      	ldr	r3, [pc, #284]	@ (8002d78 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d115      	bne.n	8002c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e07f      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d107      	bne.n	8002c82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c72:	4b41      	ldr	r3, [pc, #260]	@ (8002d78 <HAL_RCC_ClockConfig+0x1c4>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d109      	bne.n	8002c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e073      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c82:	4b3d      	ldr	r3, [pc, #244]	@ (8002d78 <HAL_RCC_ClockConfig+0x1c4>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e06b      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c92:	4b39      	ldr	r3, [pc, #228]	@ (8002d78 <HAL_RCC_ClockConfig+0x1c4>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f023 0203 	bic.w	r2, r3, #3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	4936      	ldr	r1, [pc, #216]	@ (8002d78 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ca4:	f7fd fca8 	bl	80005f8 <HAL_GetTick>
 8002ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002caa:	e00a      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cac:	f7fd fca4 	bl	80005f8 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e053      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc2:	4b2d      	ldr	r3, [pc, #180]	@ (8002d78 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f003 020c 	and.w	r2, r3, #12
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d1eb      	bne.n	8002cac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cd4:	4b27      	ldr	r3, [pc, #156]	@ (8002d74 <HAL_RCC_ClockConfig+0x1c0>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d210      	bcs.n	8002d04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce2:	4b24      	ldr	r3, [pc, #144]	@ (8002d74 <HAL_RCC_ClockConfig+0x1c0>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f023 0207 	bic.w	r2, r3, #7
 8002cea:	4922      	ldr	r1, [pc, #136]	@ (8002d74 <HAL_RCC_ClockConfig+0x1c0>)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf2:	4b20      	ldr	r3, [pc, #128]	@ (8002d74 <HAL_RCC_ClockConfig+0x1c0>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d001      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e032      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d10:	4b19      	ldr	r3, [pc, #100]	@ (8002d78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	4916      	ldr	r1, [pc, #88]	@ (8002d78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d009      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d2e:	4b12      	ldr	r3, [pc, #72]	@ (8002d78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	490e      	ldr	r1, [pc, #56]	@ (8002d78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d42:	f000 f859 	bl	8002df8 <HAL_RCC_GetSysClockFreq>
 8002d46:	4602      	mov	r2, r0
 8002d48:	4b0b      	ldr	r3, [pc, #44]	@ (8002d78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	091b      	lsrs	r3, r3, #4
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	490a      	ldr	r1, [pc, #40]	@ (8002d7c <HAL_RCC_ClockConfig+0x1c8>)
 8002d54:	5ccb      	ldrb	r3, [r1, r3]
 8002d56:	fa22 f303 	lsr.w	r3, r2, r3
 8002d5a:	4a09      	ldr	r2, [pc, #36]	@ (8002d80 <HAL_RCC_ClockConfig+0x1cc>)
 8002d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d5e:	4b09      	ldr	r3, [pc, #36]	@ (8002d84 <HAL_RCC_ClockConfig+0x1d0>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fd fc06 	bl	8000574 <HAL_InitTick>

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	40022000 	.word	0x40022000
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	080075bc 	.word	0x080075bc
 8002d80:	20000004 	.word	0x20000004
 8002d84:	20000008 	.word	0x20000008

08002d88 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08a      	sub	sp, #40	@ 0x28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8002d94:	f107 0318 	add.w	r3, r7, #24
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	605a      	str	r2, [r3, #4]
 8002d9e:	609a      	str	r2, [r3, #8]
 8002da0:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8002da2:	2302      	movs	r3, #2
 8002da4:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002da6:	2303      	movs	r3, #3
 8002da8:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio.Pull      = GPIO_NOPULL;
 8002daa:	2300      	movs	r3, #0
 8002dac:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 8002dae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002db2:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8002db4:	4b0e      	ldr	r3, [pc, #56]	@ (8002df0 <HAL_RCC_MCOConfig+0x68>)
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	4a0d      	ldr	r2, [pc, #52]	@ (8002df0 <HAL_RCC_MCOConfig+0x68>)
 8002dba:	f043 0304 	orr.w	r3, r3, #4
 8002dbe:	6193      	str	r3, [r2, #24]
 8002dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8002df0 <HAL_RCC_MCOConfig+0x68>)
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8002dcc:	f107 0318 	add.w	r3, r7, #24
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4808      	ldr	r0, [pc, #32]	@ (8002df4 <HAL_RCC_MCOConfig+0x6c>)
 8002dd4:	f7fd fd28 	bl	8000828 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8002dd8:	4b05      	ldr	r3, [pc, #20]	@ (8002df0 <HAL_RCC_MCOConfig+0x68>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8002de0:	4903      	ldr	r1, [pc, #12]	@ (8002df0 <HAL_RCC_MCOConfig+0x68>)
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	604b      	str	r3, [r1, #4]
}
 8002de8:	bf00      	nop
 8002dea:	3728      	adds	r7, #40	@ 0x28
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40010800 	.word	0x40010800

08002df8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b087      	sub	sp, #28
 8002dfc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	2300      	movs	r3, #0
 8002e04:	60bb      	str	r3, [r7, #8]
 8002e06:	2300      	movs	r3, #0
 8002e08:	617b      	str	r3, [r7, #20]
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e12:	4b1e      	ldr	r3, [pc, #120]	@ (8002e8c <HAL_RCC_GetSysClockFreq+0x94>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f003 030c 	and.w	r3, r3, #12
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d002      	beq.n	8002e28 <HAL_RCC_GetSysClockFreq+0x30>
 8002e22:	2b08      	cmp	r3, #8
 8002e24:	d003      	beq.n	8002e2e <HAL_RCC_GetSysClockFreq+0x36>
 8002e26:	e027      	b.n	8002e78 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e28:	4b19      	ldr	r3, [pc, #100]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e2a:	613b      	str	r3, [r7, #16]
      break;
 8002e2c:	e027      	b.n	8002e7e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	0c9b      	lsrs	r3, r3, #18
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	4a17      	ldr	r2, [pc, #92]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e38:	5cd3      	ldrb	r3, [r2, r3]
 8002e3a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d010      	beq.n	8002e68 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e46:	4b11      	ldr	r3, [pc, #68]	@ (8002e8c <HAL_RCC_GetSysClockFreq+0x94>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	0c5b      	lsrs	r3, r3, #17
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	4a11      	ldr	r2, [pc, #68]	@ (8002e98 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e52:	5cd3      	ldrb	r3, [r2, r3]
 8002e54:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a0d      	ldr	r2, [pc, #52]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e5a:	fb03 f202 	mul.w	r2, r3, r2
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	e004      	b.n	8002e72 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a0c      	ldr	r2, [pc, #48]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e6c:	fb02 f303 	mul.w	r3, r2, r3
 8002e70:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	613b      	str	r3, [r7, #16]
      break;
 8002e76:	e002      	b.n	8002e7e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e78:	4b05      	ldr	r3, [pc, #20]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e7a:	613b      	str	r3, [r7, #16]
      break;
 8002e7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e7e:	693b      	ldr	r3, [r7, #16]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	371c      	adds	r7, #28
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bc80      	pop	{r7}
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	007a1200 	.word	0x007a1200
 8002e94:	080075cc 	.word	0x080075cc
 8002e98:	080075dc 	.word	0x080075dc
 8002e9c:	003d0900 	.word	0x003d0900

08002ea0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed4 <RCC_Delay+0x34>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a0a      	ldr	r2, [pc, #40]	@ (8002ed8 <RCC_Delay+0x38>)
 8002eae:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb2:	0a5b      	lsrs	r3, r3, #9
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	fb02 f303 	mul.w	r3, r2, r3
 8002eba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ebc:	bf00      	nop
  }
  while (Delay --);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	1e5a      	subs	r2, r3, #1
 8002ec2:	60fa      	str	r2, [r7, #12]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1f9      	bne.n	8002ebc <RCC_Delay+0x1c>
}
 8002ec8:	bf00      	nop
 8002eca:	bf00      	nop
 8002ecc:	3714      	adds	r7, #20
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bc80      	pop	{r7}
 8002ed2:	4770      	bx	lr
 8002ed4:	20000004 	.word	0x20000004
 8002ed8:	10624dd3 	.word	0x10624dd3

08002edc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	613b      	str	r3, [r7, #16]
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d07d      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002efc:	4b4f      	ldr	r3, [pc, #316]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10d      	bne.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f08:	4b4c      	ldr	r3, [pc, #304]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f0a:	69db      	ldr	r3, [r3, #28]
 8002f0c:	4a4b      	ldr	r2, [pc, #300]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f12:	61d3      	str	r3, [r2, #28]
 8002f14:	4b49      	ldr	r3, [pc, #292]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f1c:	60bb      	str	r3, [r7, #8]
 8002f1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f20:	2301      	movs	r3, #1
 8002f22:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f24:	4b46      	ldr	r3, [pc, #280]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d118      	bne.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f30:	4b43      	ldr	r3, [pc, #268]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a42      	ldr	r2, [pc, #264]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f3c:	f7fd fb5c 	bl	80005f8 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f42:	e008      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f44:	f7fd fb58 	bl	80005f8 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b64      	cmp	r3, #100	@ 0x64
 8002f50:	d901      	bls.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e06d      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f56:	4b3a      	ldr	r3, [pc, #232]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0f0      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f62:	4b36      	ldr	r3, [pc, #216]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f6a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d02e      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d027      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f80:	4b2e      	ldr	r3, [pc, #184]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f88:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f8a:	4b2e      	ldr	r3, [pc, #184]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f90:	4b2c      	ldr	r3, [pc, #176]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f96:	4a29      	ldr	r2, [pc, #164]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d014      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa6:	f7fd fb27 	bl	80005f8 <HAL_GetTick>
 8002faa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fac:	e00a      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fae:	f7fd fb23 	bl	80005f8 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e036      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0ee      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	4917      	ldr	r1, [pc, #92]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fe2:	7dfb      	ldrb	r3, [r7, #23]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d105      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fe8:	4b14      	ldr	r3, [pc, #80]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fea:	69db      	ldr	r3, [r3, #28]
 8002fec:	4a13      	ldr	r2, [pc, #76]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ff2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d008      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003000:	4b0e      	ldr	r3, [pc, #56]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	490b      	ldr	r1, [pc, #44]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800300e:	4313      	orrs	r3, r2
 8003010:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0310 	and.w	r3, r3, #16
 800301a:	2b00      	cmp	r3, #0
 800301c:	d008      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800301e:	4b07      	ldr	r3, [pc, #28]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	4904      	ldr	r1, [pc, #16]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800302c:	4313      	orrs	r3, r2
 800302e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3718      	adds	r7, #24
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40021000 	.word	0x40021000
 8003040:	40007000 	.word	0x40007000
 8003044:	42420440 	.word	0x42420440

08003048 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003048:	b084      	sub	sp, #16
 800304a:	b480      	push	{r7}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
 8003052:	f107 0014 	add.w	r0, r7, #20
 8003056:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	bc80      	pop	{r7}
 8003064:	b004      	add	sp, #16
 8003066:	4770      	bx	lr

08003068 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003078:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800307c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	b29a      	uxth	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3714      	adds	r7, #20
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr

08003094 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800309c:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80030a0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	43db      	mvns	r3, r3
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	4013      	ands	r3, r2
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3714      	adds	r7, #20
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr

080030c8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	bc80      	pop	{r7}
 80030de:	4770      	bx	lr

080030e0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80030e0:	b084      	sub	sp, #16
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
 80030ea:	f107 0014 	add.w	r0, r7, #20
 80030ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	bc80      	pop	{r7}
 800311c:	b004      	add	sp, #16
 800311e:	4770      	bx	lr

08003120 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003120:	b480      	push	{r7}
 8003122:	b09d      	sub	sp, #116	@ 0x74
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	b29b      	uxth	r3, r3
 800313e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8003142:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003146:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	78db      	ldrb	r3, [r3, #3]
 800314e:	2b03      	cmp	r3, #3
 8003150:	d81f      	bhi.n	8003192 <USB_ActivateEndpoint+0x72>
 8003152:	a201      	add	r2, pc, #4	@ (adr r2, 8003158 <USB_ActivateEndpoint+0x38>)
 8003154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003158:	08003169 	.word	0x08003169
 800315c:	08003185 	.word	0x08003185
 8003160:	0800319b 	.word	0x0800319b
 8003164:	08003177 	.word	0x08003177
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003168:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800316c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003170:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003174:	e012      	b.n	800319c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003176:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800317a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800317e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003182:	e00b      	b.n	800319c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003184:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003188:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800318c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003190:	e004      	b.n	800319c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8003198:	e000      	b.n	800319c <USB_ActivateEndpoint+0x7c>
      break;
 800319a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	441a      	add	r2, r3
 80031a6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80031aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80031ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80031b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	881b      	ldrh	r3, [r3, #0]
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	7812      	ldrb	r2, [r2, #0]
 80031da:	4313      	orrs	r3, r2
 80031dc:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	441a      	add	r2, r3
 80031ea:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80031ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80031f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80031f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031fe:	b29b      	uxth	r3, r3
 8003200:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	7b1b      	ldrb	r3, [r3, #12]
 8003206:	2b00      	cmp	r3, #0
 8003208:	f040 8178 	bne.w	80034fc <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	785b      	ldrb	r3, [r3, #1]
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 8084 	beq.w	800331e <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	61bb      	str	r3, [r7, #24]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003220:	b29b      	uxth	r3, r3
 8003222:	461a      	mov	r2, r3
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	4413      	add	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	011a      	lsls	r2, r3, #4
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	4413      	add	r3, r2
 8003234:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003238:	617b      	str	r3, [r7, #20]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	88db      	ldrh	r3, [r3, #6]
 800323e:	085b      	lsrs	r3, r3, #1
 8003240:	b29b      	uxth	r3, r3
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	b29a      	uxth	r2, r3
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	881b      	ldrh	r3, [r3, #0]
 8003256:	827b      	strh	r3, [r7, #18]
 8003258:	8a7b      	ldrh	r3, [r7, #18]
 800325a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800325e:	2b00      	cmp	r3, #0
 8003260:	d01b      	beq.n	800329a <USB_ActivateEndpoint+0x17a>
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	881b      	ldrh	r3, [r3, #0]
 800326e:	b29b      	uxth	r3, r3
 8003270:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003274:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003278:	823b      	strh	r3, [r7, #16]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	441a      	add	r2, r3
 8003284:	8a3b      	ldrh	r3, [r7, #16]
 8003286:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800328a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800328e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003292:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003296:	b29b      	uxth	r3, r3
 8003298:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	78db      	ldrb	r3, [r3, #3]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d020      	beq.n	80032e4 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032b8:	81bb      	strh	r3, [r7, #12]
 80032ba:	89bb      	ldrh	r3, [r7, #12]
 80032bc:	f083 0320 	eor.w	r3, r3, #32
 80032c0:	81bb      	strh	r3, [r7, #12]
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	441a      	add	r2, r3
 80032cc:	89bb      	ldrh	r3, [r7, #12]
 80032ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80032d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80032d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032de:	b29b      	uxth	r3, r3
 80032e0:	8013      	strh	r3, [r2, #0]
 80032e2:	e2d5      	b.n	8003890 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4413      	add	r3, r2
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032fa:	81fb      	strh	r3, [r7, #14]
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	441a      	add	r2, r3
 8003306:	89fb      	ldrh	r3, [r7, #14]
 8003308:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800330c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003310:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003314:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003318:	b29b      	uxth	r3, r3
 800331a:	8013      	strh	r3, [r2, #0]
 800331c:	e2b8      	b.n	8003890 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	633b      	str	r3, [r7, #48]	@ 0x30
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003328:	b29b      	uxth	r3, r3
 800332a:	461a      	mov	r2, r3
 800332c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800332e:	4413      	add	r3, r2
 8003330:	633b      	str	r3, [r7, #48]	@ 0x30
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	011a      	lsls	r2, r3, #4
 8003338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800333a:	4413      	add	r3, r2
 800333c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8003340:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	88db      	ldrh	r3, [r3, #6]
 8003346:	085b      	lsrs	r3, r3, #1
 8003348:	b29b      	uxth	r3, r3
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	b29a      	uxth	r2, r3
 800334e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003350:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800335c:	b29b      	uxth	r3, r3
 800335e:	461a      	mov	r2, r3
 8003360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003362:	4413      	add	r3, r2
 8003364:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	011a      	lsls	r2, r3, #4
 800336c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800336e:	4413      	add	r3, r2
 8003370:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003374:	627b      	str	r3, [r7, #36]	@ 0x24
 8003376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003378:	881b      	ldrh	r3, [r3, #0]
 800337a:	b29b      	uxth	r3, r3
 800337c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003380:	b29a      	uxth	r2, r3
 8003382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003384:	801a      	strh	r2, [r3, #0]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	2b3e      	cmp	r3, #62	@ 0x3e
 800338c:	d91d      	bls.n	80033ca <USB_ActivateEndpoint+0x2aa>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	095b      	lsrs	r3, r3, #5
 8003394:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	f003 031f 	and.w	r3, r3, #31
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d102      	bne.n	80033a8 <USB_ActivateEndpoint+0x288>
 80033a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80033a4:	3b01      	subs	r3, #1
 80033a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80033a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033aa:	881b      	ldrh	r3, [r3, #0]
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	029b      	lsls	r3, r3, #10
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	4313      	orrs	r3, r2
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c6:	801a      	strh	r2, [r3, #0]
 80033c8:	e026      	b.n	8003418 <USB_ActivateEndpoint+0x2f8>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10a      	bne.n	80033e8 <USB_ActivateEndpoint+0x2c8>
 80033d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d4:	881b      	ldrh	r3, [r3, #0]
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e4:	801a      	strh	r2, [r3, #0]
 80033e6:	e017      	b.n	8003418 <USB_ActivateEndpoint+0x2f8>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	085b      	lsrs	r3, r3, #1
 80033ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d002      	beq.n	8003402 <USB_ActivateEndpoint+0x2e2>
 80033fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80033fe:	3301      	adds	r3, #1
 8003400:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003404:	881b      	ldrh	r3, [r3, #0]
 8003406:	b29a      	uxth	r2, r3
 8003408:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800340a:	b29b      	uxth	r3, r3
 800340c:	029b      	lsls	r3, r3, #10
 800340e:	b29b      	uxth	r3, r3
 8003410:	4313      	orrs	r3, r2
 8003412:	b29a      	uxth	r2, r3
 8003414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003416:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	881b      	ldrh	r3, [r3, #0]
 8003424:	847b      	strh	r3, [r7, #34]	@ 0x22
 8003426:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003428:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d01b      	beq.n	8003468 <USB_ActivateEndpoint+0x348>
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	881b      	ldrh	r3, [r3, #0]
 800343c:	b29b      	uxth	r3, r3
 800343e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003446:	843b      	strh	r3, [r7, #32]
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	441a      	add	r2, r3
 8003452:	8c3b      	ldrh	r3, [r7, #32]
 8003454:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003458:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800345c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003460:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003464:	b29b      	uxth	r3, r3
 8003466:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d124      	bne.n	80034ba <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	b29b      	uxth	r3, r3
 800347e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003486:	83bb      	strh	r3, [r7, #28]
 8003488:	8bbb      	ldrh	r3, [r7, #28]
 800348a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800348e:	83bb      	strh	r3, [r7, #28]
 8003490:	8bbb      	ldrh	r3, [r7, #28]
 8003492:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003496:	83bb      	strh	r3, [r7, #28]
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	441a      	add	r2, r3
 80034a2:	8bbb      	ldrh	r3, [r7, #28]
 80034a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	8013      	strh	r3, [r2, #0]
 80034b8:	e1ea      	b.n	8003890 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	881b      	ldrh	r3, [r3, #0]
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80034cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034d0:	83fb      	strh	r3, [r7, #30]
 80034d2:	8bfb      	ldrh	r3, [r7, #30]
 80034d4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80034d8:	83fb      	strh	r3, [r7, #30]
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	441a      	add	r2, r3
 80034e4:	8bfb      	ldrh	r3, [r7, #30]
 80034e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	8013      	strh	r3, [r2, #0]
 80034fa:	e1c9      	b.n	8003890 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	78db      	ldrb	r3, [r3, #3]
 8003500:	2b02      	cmp	r3, #2
 8003502:	d11e      	bne.n	8003542 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	b29b      	uxth	r3, r3
 8003512:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003516:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800351a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	441a      	add	r2, r3
 8003528:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800352c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003530:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003534:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8003538:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800353c:	b29b      	uxth	r3, r3
 800353e:	8013      	strh	r3, [r2, #0]
 8003540:	e01d      	b.n	800357e <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	b29b      	uxth	r3, r3
 8003550:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8003554:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003558:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	441a      	add	r2, r3
 8003566:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800356a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800356e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003572:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003576:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800357a:	b29b      	uxth	r3, r3
 800357c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003588:	b29b      	uxth	r3, r3
 800358a:	461a      	mov	r2, r3
 800358c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800358e:	4413      	add	r3, r2
 8003590:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	011a      	lsls	r2, r3, #4
 8003598:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800359a:	4413      	add	r3, r2
 800359c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80035a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	891b      	ldrh	r3, [r3, #8]
 80035a6:	085b      	lsrs	r3, r3, #1
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035b0:	801a      	strh	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035bc:	b29b      	uxth	r3, r3
 80035be:	461a      	mov	r2, r3
 80035c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035c2:	4413      	add	r3, r2
 80035c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	011a      	lsls	r2, r3, #4
 80035cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80035d4:	653b      	str	r3, [r7, #80]	@ 0x50
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	895b      	ldrh	r3, [r3, #10]
 80035da:	085b      	lsrs	r3, r3, #1
 80035dc:	b29b      	uxth	r3, r3
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035e4:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	785b      	ldrb	r3, [r3, #1]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f040 8093 	bne.w	8003716 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4413      	add	r3, r2
 80035fa:	881b      	ldrh	r3, [r3, #0]
 80035fc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8003600:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003604:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d01b      	beq.n	8003644 <USB_ActivateEndpoint+0x524>
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	881b      	ldrh	r3, [r3, #0]
 8003618:	b29b      	uxth	r3, r3
 800361a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800361e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003622:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	441a      	add	r2, r3
 800362e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003630:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003634:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003638:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800363c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003640:	b29b      	uxth	r3, r3
 8003642:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4413      	add	r3, r2
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8003652:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8003654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003658:	2b00      	cmp	r3, #0
 800365a:	d01b      	beq.n	8003694 <USB_ActivateEndpoint+0x574>
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	881b      	ldrh	r3, [r3, #0]
 8003668:	b29b      	uxth	r3, r3
 800366a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800366e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003672:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	441a      	add	r2, r3
 800367e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003680:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003684:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003688:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800368c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003690:	b29b      	uxth	r3, r3
 8003692:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	881b      	ldrh	r3, [r3, #0]
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036aa:	873b      	strh	r3, [r7, #56]	@ 0x38
 80036ac:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80036ae:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80036b2:	873b      	strh	r3, [r7, #56]	@ 0x38
 80036b4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80036b6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80036ba:	873b      	strh	r3, [r7, #56]	@ 0x38
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	441a      	add	r2, r3
 80036c6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80036c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036d8:	b29b      	uxth	r3, r3
 80036da:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	881b      	ldrh	r3, [r3, #0]
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036f2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	441a      	add	r2, r3
 80036fe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003700:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003704:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003708:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800370c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003710:	b29b      	uxth	r3, r3
 8003712:	8013      	strh	r3, [r2, #0]
 8003714:	e0bc      	b.n	8003890 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4413      	add	r3, r2
 8003720:	881b      	ldrh	r3, [r3, #0]
 8003722:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003726:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800372a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d01d      	beq.n	800376e <USB_ActivateEndpoint+0x64e>
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4413      	add	r3, r2
 800373c:	881b      	ldrh	r3, [r3, #0]
 800373e:	b29b      	uxth	r3, r3
 8003740:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003744:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003748:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	441a      	add	r2, r3
 8003756:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800375a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800375e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003762:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003766:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800376a:	b29b      	uxth	r3, r3
 800376c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4413      	add	r3, r2
 8003778:	881b      	ldrh	r3, [r3, #0]
 800377a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800377e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003782:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003786:	2b00      	cmp	r3, #0
 8003788:	d01d      	beq.n	80037c6 <USB_ActivateEndpoint+0x6a6>
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4413      	add	r3, r2
 8003794:	881b      	ldrh	r3, [r3, #0]
 8003796:	b29b      	uxth	r3, r3
 8003798:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800379c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037a0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	441a      	add	r2, r3
 80037ae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80037b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80037b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80037ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037be:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	78db      	ldrb	r3, [r3, #3]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d024      	beq.n	8003818 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4413      	add	r3, r2
 80037d8:	881b      	ldrh	r3, [r3, #0]
 80037da:	b29b      	uxth	r3, r3
 80037dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037e4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80037e8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80037ec:	f083 0320 	eor.w	r3, r3, #32
 80037f0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	441a      	add	r2, r3
 80037fe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003802:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003806:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800380a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800380e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003812:	b29b      	uxth	r3, r3
 8003814:	8013      	strh	r3, [r2, #0]
 8003816:	e01d      	b.n	8003854 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	881b      	ldrh	r3, [r3, #0]
 8003824:	b29b      	uxth	r3, r3
 8003826:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800382a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800382e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	441a      	add	r2, r3
 800383c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003840:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003844:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003848:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800384c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003850:	b29b      	uxth	r3, r3
 8003852:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4413      	add	r3, r2
 800385e:	881b      	ldrh	r3, [r3, #0]
 8003860:	b29b      	uxth	r3, r3
 8003862:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003866:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800386a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	441a      	add	r2, r3
 8003878:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800387c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003880:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003884:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003888:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800388c:	b29b      	uxth	r3, r3
 800388e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8003890:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8003894:	4618      	mov	r0, r3
 8003896:	3774      	adds	r7, #116	@ 0x74
 8003898:	46bd      	mov	sp, r7
 800389a:	bc80      	pop	{r7}
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop

080038a0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b08d      	sub	sp, #52	@ 0x34
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	7b1b      	ldrb	r3, [r3, #12]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f040 808e 	bne.w	80039d0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	785b      	ldrb	r3, [r3, #1]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d044      	beq.n	8003946 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4413      	add	r3, r2
 80038c6:	881b      	ldrh	r3, [r3, #0]
 80038c8:	81bb      	strh	r3, [r7, #12]
 80038ca:	89bb      	ldrh	r3, [r7, #12]
 80038cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d01b      	beq.n	800390c <USB_DeactivateEndpoint+0x6c>
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	881b      	ldrh	r3, [r3, #0]
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038ea:	817b      	strh	r3, [r7, #10]
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	441a      	add	r2, r3
 80038f6:	897b      	ldrh	r3, [r7, #10]
 80038f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003900:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003904:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003908:	b29b      	uxth	r3, r3
 800390a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4413      	add	r3, r2
 8003916:	881b      	ldrh	r3, [r3, #0]
 8003918:	b29b      	uxth	r3, r3
 800391a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800391e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003922:	813b      	strh	r3, [r7, #8]
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	441a      	add	r2, r3
 800392e:	893b      	ldrh	r3, [r7, #8]
 8003930:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003934:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003938:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800393c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003940:	b29b      	uxth	r3, r3
 8003942:	8013      	strh	r3, [r2, #0]
 8003944:	e192      	b.n	8003c6c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4413      	add	r3, r2
 8003950:	881b      	ldrh	r3, [r3, #0]
 8003952:	827b      	strh	r3, [r7, #18]
 8003954:	8a7b      	ldrh	r3, [r7, #18]
 8003956:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d01b      	beq.n	8003996 <USB_DeactivateEndpoint+0xf6>
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	4413      	add	r3, r2
 8003968:	881b      	ldrh	r3, [r3, #0]
 800396a:	b29b      	uxth	r3, r3
 800396c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003970:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003974:	823b      	strh	r3, [r7, #16]
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	441a      	add	r2, r3
 8003980:	8a3b      	ldrh	r3, [r7, #16]
 8003982:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003986:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800398a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800398e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003992:	b29b      	uxth	r3, r3
 8003994:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4413      	add	r3, r2
 80039a0:	881b      	ldrh	r3, [r3, #0]
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80039a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039ac:	81fb      	strh	r3, [r7, #14]
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	441a      	add	r2, r3
 80039b8:	89fb      	ldrh	r3, [r7, #14]
 80039ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	8013      	strh	r3, [r2, #0]
 80039ce:	e14d      	b.n	8003c6c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	785b      	ldrb	r3, [r3, #1]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f040 80a5 	bne.w	8003b24 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	881b      	ldrh	r3, [r3, #0]
 80039e6:	843b      	strh	r3, [r7, #32]
 80039e8:	8c3b      	ldrh	r3, [r7, #32]
 80039ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d01b      	beq.n	8003a2a <USB_DeactivateEndpoint+0x18a>
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	881b      	ldrh	r3, [r3, #0]
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a08:	83fb      	strh	r3, [r7, #30]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	441a      	add	r2, r3
 8003a14:	8bfb      	ldrh	r3, [r7, #30]
 8003a16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a1e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	881b      	ldrh	r3, [r3, #0]
 8003a36:	83bb      	strh	r3, [r7, #28]
 8003a38:	8bbb      	ldrh	r3, [r7, #28]
 8003a3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d01b      	beq.n	8003a7a <USB_DeactivateEndpoint+0x1da>
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	4413      	add	r3, r2
 8003a4c:	881b      	ldrh	r3, [r3, #0]
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a58:	837b      	strh	r3, [r7, #26]
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	441a      	add	r2, r3
 8003a64:	8b7b      	ldrh	r3, [r7, #26]
 8003a66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a72:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4413      	add	r3, r2
 8003a84:	881b      	ldrh	r3, [r3, #0]
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a90:	833b      	strh	r3, [r7, #24]
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	441a      	add	r2, r3
 8003a9c:	8b3b      	ldrh	r3, [r7, #24]
 8003a9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003aa2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003aa6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003aaa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ac4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ac8:	82fb      	strh	r3, [r7, #22]
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	441a      	add	r2, r3
 8003ad4:	8afb      	ldrh	r3, [r7, #22]
 8003ad6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ada:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ade:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ae2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	881b      	ldrh	r3, [r3, #0]
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003afc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b00:	82bb      	strh	r3, [r7, #20]
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	441a      	add	r2, r3
 8003b0c:	8abb      	ldrh	r3, [r7, #20]
 8003b0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	8013      	strh	r3, [r2, #0]
 8003b22:	e0a3      	b.n	8003c6c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8003b32:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003b34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d01b      	beq.n	8003b74 <USB_DeactivateEndpoint+0x2d4>
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	881b      	ldrh	r3, [r3, #0]
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b52:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	441a      	add	r2, r3
 8003b5e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003b60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4413      	add	r3, r2
 8003b7e:	881b      	ldrh	r3, [r3, #0]
 8003b80:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8003b82:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d01b      	beq.n	8003bc4 <USB_DeactivateEndpoint+0x324>
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	881b      	ldrh	r3, [r3, #0]
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ba2:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	441a      	add	r2, r3
 8003bae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003bb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bbc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4413      	add	r3, r2
 8003bce:	881b      	ldrh	r3, [r3, #0]
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bda:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	441a      	add	r2, r3
 8003be6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003be8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bf0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003bf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	881b      	ldrh	r3, [r3, #0]
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c12:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	441a      	add	r2, r3
 8003c1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003c20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	881b      	ldrh	r3, [r3, #0]
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c4a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	441a      	add	r2, r3
 8003c56:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003c58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3734      	adds	r7, #52	@ 0x34
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bc80      	pop	{r7}
 8003c76:	4770      	bx	lr

08003c78 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b0c2      	sub	sp, #264	@ 0x108
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003c86:	6018      	str	r0, [r3, #0]
 8003c88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c90:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003c92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	785b      	ldrb	r3, [r3, #1]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	f040 86b7 	bne.w	8004a12 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003ca4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ca8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	699a      	ldr	r2, [r3, #24]
 8003cb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003cb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d908      	bls.n	8003cd2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8003cc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003cc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003cd0:	e007      	b.n	8003ce2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8003cd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003cd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003ce2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ce6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	7b1b      	ldrb	r3, [r3, #12]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d13a      	bne.n	8003d68 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003cf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003cf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6959      	ldr	r1, [r3, #20]
 8003cfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	88da      	ldrh	r2, [r3, #6]
 8003d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8003d14:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8003d18:	6800      	ldr	r0, [r0, #0]
 8003d1a:	f001 fc9c 	bl	8005656 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003d1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	613b      	str	r3, [r7, #16]
 8003d2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	4413      	add	r3, r2
 8003d40:	613b      	str	r3, [r7, #16]
 8003d42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	011a      	lsls	r2, r3, #4
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	4413      	add	r3, r2
 8003d54:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	801a      	strh	r2, [r3, #0]
 8003d64:	f000 be1f 	b.w	80049a6 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003d68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	78db      	ldrb	r3, [r3, #3]
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	f040 8462 	bne.w	800463e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003d7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6a1a      	ldr	r2, [r3, #32]
 8003d86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	f240 83df 	bls.w	8004556 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003d98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003da6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dbe:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8003dc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003dc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003dd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	441a      	add	r2, r3
 8003ddc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8003de0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003de4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003de8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8003dec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003df4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003df8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6a1a      	ldr	r2, [r3, #32]
 8003e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e04:	1ad2      	subs	r2, r2, r3
 8003e06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003e12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	4413      	add	r3, r2
 8003e2c:	881b      	ldrh	r3, [r3, #0]
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 81c7 	beq.w	80041c8 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003e3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	785b      	ldrb	r3, [r3, #1]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d177      	bne.n	8003f46 <USB_EPStartXfer+0x2ce>
 8003e56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	461a      	mov	r2, r3
 8003e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e76:	4413      	add	r3, r2
 8003e78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	011a      	lsls	r2, r3, #4
 8003e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003e90:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e94:	881b      	ldrh	r3, [r3, #0]
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea0:	801a      	strh	r2, [r3, #0]
 8003ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ea6:	2b3e      	cmp	r3, #62	@ 0x3e
 8003ea8:	d921      	bls.n	8003eee <USB_EPStartXfer+0x276>
 8003eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eae:	095b      	lsrs	r3, r3, #5
 8003eb0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eb8:	f003 031f 	and.w	r3, r3, #31
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d104      	bne.n	8003eca <USB_EPStartXfer+0x252>
 8003ec0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ecc:	881b      	ldrh	r3, [r3, #0]
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	029b      	lsls	r3, r3, #10
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	4313      	orrs	r3, r2
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ee2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eea:	801a      	strh	r2, [r3, #0]
 8003eec:	e050      	b.n	8003f90 <USB_EPStartXfer+0x318>
 8003eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10a      	bne.n	8003f0c <USB_EPStartXfer+0x294>
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef8:	881b      	ldrh	r3, [r3, #0]
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f08:	801a      	strh	r2, [r3, #0]
 8003f0a:	e041      	b.n	8003f90 <USB_EPStartXfer+0x318>
 8003f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f10:	085b      	lsrs	r3, r3, #1
 8003f12:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d004      	beq.n	8003f2c <USB_EPStartXfer+0x2b4>
 8003f22:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003f26:	3301      	adds	r3, #1
 8003f28:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	029b      	lsls	r3, r3, #10
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f42:	801a      	strh	r2, [r3, #0]
 8003f44:	e024      	b.n	8003f90 <USB_EPStartXfer+0x318>
 8003f46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	785b      	ldrb	r3, [r3, #1]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d11c      	bne.n	8003f90 <USB_EPStartXfer+0x318>
 8003f56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	461a      	mov	r2, r3
 8003f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f6a:	4413      	add	r3, r2
 8003f6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	011a      	lsls	r2, r3, #4
 8003f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f7e:	4413      	add	r3, r2
 8003f80:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f8e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003f90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	895b      	ldrh	r3, [r3, #10]
 8003f9c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003fa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6959      	ldr	r1, [r3, #20]
 8003fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8003fb6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8003fba:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8003fbe:	6800      	ldr	r0, [r0, #0]
 8003fc0:	f001 fb49 	bl	8005656 <USB_WritePMA>
            ep->xfer_buff += len;
 8003fc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	695a      	ldr	r2, [r3, #20]
 8003fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fd4:	441a      	add	r2, r3
 8003fd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003fe2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fe6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6a1a      	ldr	r2, [r3, #32]
 8003fee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ff2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d90f      	bls.n	800401e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8003ffe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004002:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6a1a      	ldr	r2, [r3, #32]
 800400a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800400e:	1ad2      	subs	r2, r2, r3
 8004010:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004014:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	621a      	str	r2, [r3, #32]
 800401c:	e00e      	b.n	800403c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800401e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004022:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800402e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004032:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2200      	movs	r2, #0
 800403a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800403c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004040:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	785b      	ldrb	r3, [r3, #1]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d177      	bne.n	800413c <USB_EPStartXfer+0x4c4>
 800404c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004050:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	61bb      	str	r3, [r7, #24]
 8004058:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800405c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004066:	b29b      	uxth	r3, r3
 8004068:	461a      	mov	r2, r3
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	4413      	add	r3, r2
 800406e:	61bb      	str	r3, [r7, #24]
 8004070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004074:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	011a      	lsls	r2, r3, #4
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	4413      	add	r3, r2
 8004082:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	881b      	ldrh	r3, [r3, #0]
 800408c:	b29b      	uxth	r3, r3
 800408e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004092:	b29a      	uxth	r2, r3
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	801a      	strh	r2, [r3, #0]
 8004098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800409c:	2b3e      	cmp	r3, #62	@ 0x3e
 800409e:	d921      	bls.n	80040e4 <USB_EPStartXfer+0x46c>
 80040a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040a4:	095b      	lsrs	r3, r3, #5
 80040a6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80040aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040ae:	f003 031f 	and.w	r3, r3, #31
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d104      	bne.n	80040c0 <USB_EPStartXfer+0x448>
 80040b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040ba:	3b01      	subs	r3, #1
 80040bc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	881b      	ldrh	r3, [r3, #0]
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	029b      	lsls	r3, r3, #10
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	4313      	orrs	r3, r2
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040dc:	b29a      	uxth	r2, r3
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	801a      	strh	r2, [r3, #0]
 80040e2:	e056      	b.n	8004192 <USB_EPStartXfer+0x51a>
 80040e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10a      	bne.n	8004102 <USB_EPStartXfer+0x48a>
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	881b      	ldrh	r3, [r3, #0]
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	801a      	strh	r2, [r3, #0]
 8004100:	e047      	b.n	8004192 <USB_EPStartXfer+0x51a>
 8004102:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004106:	085b      	lsrs	r3, r3, #1
 8004108:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800410c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b00      	cmp	r3, #0
 8004116:	d004      	beq.n	8004122 <USB_EPStartXfer+0x4aa>
 8004118:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800411c:	3301      	adds	r3, #1
 800411e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	881b      	ldrh	r3, [r3, #0]
 8004126:	b29a      	uxth	r2, r3
 8004128:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800412c:	b29b      	uxth	r3, r3
 800412e:	029b      	lsls	r3, r3, #10
 8004130:	b29b      	uxth	r3, r3
 8004132:	4313      	orrs	r3, r2
 8004134:	b29a      	uxth	r2, r3
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	801a      	strh	r2, [r3, #0]
 800413a:	e02a      	b.n	8004192 <USB_EPStartXfer+0x51a>
 800413c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004140:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	785b      	ldrb	r3, [r3, #1]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d122      	bne.n	8004192 <USB_EPStartXfer+0x51a>
 800414c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004150:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	623b      	str	r3, [r7, #32]
 8004158:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800415c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004166:	b29b      	uxth	r3, r3
 8004168:	461a      	mov	r2, r3
 800416a:	6a3b      	ldr	r3, [r7, #32]
 800416c:	4413      	add	r3, r2
 800416e:	623b      	str	r3, [r7, #32]
 8004170:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004174:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	011a      	lsls	r2, r3, #4
 800417e:	6a3b      	ldr	r3, [r7, #32]
 8004180:	4413      	add	r3, r2
 8004182:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004186:	61fb      	str	r3, [r7, #28]
 8004188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800418c:	b29a      	uxth	r2, r3
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004192:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004196:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	891b      	ldrh	r3, [r3, #8]
 800419e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80041a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6959      	ldr	r1, [r3, #20]
 80041ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80041b8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80041bc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80041c0:	6800      	ldr	r0, [r0, #0]
 80041c2:	f001 fa48 	bl	8005656 <USB_WritePMA>
 80041c6:	e3ee      	b.n	80049a6 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80041c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	785b      	ldrb	r3, [r3, #1]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d177      	bne.n	80042c8 <USB_EPStartXfer+0x650>
 80041d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	461a      	mov	r2, r3
 80041f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041f8:	4413      	add	r3, r2
 80041fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004200:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	011a      	lsls	r2, r3, #4
 800420a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800420c:	4413      	add	r3, r2
 800420e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004212:	647b      	str	r3, [r7, #68]	@ 0x44
 8004214:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004216:	881b      	ldrh	r3, [r3, #0]
 8004218:	b29b      	uxth	r3, r3
 800421a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800421e:	b29a      	uxth	r2, r3
 8004220:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004222:	801a      	strh	r2, [r3, #0]
 8004224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004228:	2b3e      	cmp	r3, #62	@ 0x3e
 800422a:	d921      	bls.n	8004270 <USB_EPStartXfer+0x5f8>
 800422c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004230:	095b      	lsrs	r3, r3, #5
 8004232:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004236:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800423a:	f003 031f 	and.w	r3, r3, #31
 800423e:	2b00      	cmp	r3, #0
 8004240:	d104      	bne.n	800424c <USB_EPStartXfer+0x5d4>
 8004242:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004246:	3b01      	subs	r3, #1
 8004248:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800424c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800424e:	881b      	ldrh	r3, [r3, #0]
 8004250:	b29a      	uxth	r2, r3
 8004252:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004256:	b29b      	uxth	r3, r3
 8004258:	029b      	lsls	r3, r3, #10
 800425a:	b29b      	uxth	r3, r3
 800425c:	4313      	orrs	r3, r2
 800425e:	b29b      	uxth	r3, r3
 8004260:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004264:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004268:	b29a      	uxth	r2, r3
 800426a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800426c:	801a      	strh	r2, [r3, #0]
 800426e:	e056      	b.n	800431e <USB_EPStartXfer+0x6a6>
 8004270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10a      	bne.n	800428e <USB_EPStartXfer+0x616>
 8004278:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800427a:	881b      	ldrh	r3, [r3, #0]
 800427c:	b29b      	uxth	r3, r3
 800427e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004282:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004286:	b29a      	uxth	r2, r3
 8004288:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800428a:	801a      	strh	r2, [r3, #0]
 800428c:	e047      	b.n	800431e <USB_EPStartXfer+0x6a6>
 800428e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004292:	085b      	lsrs	r3, r3, #1
 8004294:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004298:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d004      	beq.n	80042ae <USB_EPStartXfer+0x636>
 80042a4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80042a8:	3301      	adds	r3, #1
 80042aa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80042ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	029b      	lsls	r3, r3, #10
 80042bc:	b29b      	uxth	r3, r3
 80042be:	4313      	orrs	r3, r2
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042c4:	801a      	strh	r2, [r3, #0]
 80042c6:	e02a      	b.n	800431e <USB_EPStartXfer+0x6a6>
 80042c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80042cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	785b      	ldrb	r3, [r3, #1]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d122      	bne.n	800431e <USB_EPStartXfer+0x6a6>
 80042d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80042dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80042e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80042e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	461a      	mov	r2, r3
 80042f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042f8:	4413      	add	r3, r2
 80042fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80042fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004300:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	011a      	lsls	r2, r3, #4
 800430a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800430c:	4413      	add	r3, r2
 800430e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004312:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004318:	b29a      	uxth	r2, r3
 800431a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800431c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800431e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004322:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	891b      	ldrh	r3, [r3, #8]
 800432a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800432e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004332:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6959      	ldr	r1, [r3, #20]
 800433a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800433e:	b29b      	uxth	r3, r3
 8004340:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004344:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004348:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800434c:	6800      	ldr	r0, [r0, #0]
 800434e:	f001 f982 	bl	8005656 <USB_WritePMA>
            ep->xfer_buff += len;
 8004352:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004356:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	695a      	ldr	r2, [r3, #20]
 800435e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004362:	441a      	add	r2, r3
 8004364:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004368:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004370:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004374:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6a1a      	ldr	r2, [r3, #32]
 800437c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004380:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	429a      	cmp	r2, r3
 800438a:	d90f      	bls.n	80043ac <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800438c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004390:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	6a1a      	ldr	r2, [r3, #32]
 8004398:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800439c:	1ad2      	subs	r2, r2, r3
 800439e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	621a      	str	r2, [r3, #32]
 80043aa:	e00e      	b.n	80043ca <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80043ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80043bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2200      	movs	r2, #0
 80043c8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80043ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80043d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	785b      	ldrb	r3, [r3, #1]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d177      	bne.n	80044d6 <USB_EPStartXfer+0x85e>
 80043e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004400:	b29b      	uxth	r3, r3
 8004402:	461a      	mov	r2, r3
 8004404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004406:	4413      	add	r3, r2
 8004408:	63bb      	str	r3, [r7, #56]	@ 0x38
 800440a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800440e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	011a      	lsls	r2, r3, #4
 8004418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800441a:	4413      	add	r3, r2
 800441c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004420:	637b      	str	r3, [r7, #52]	@ 0x34
 8004422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	b29b      	uxth	r3, r3
 8004428:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800442c:	b29a      	uxth	r2, r3
 800442e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004430:	801a      	strh	r2, [r3, #0]
 8004432:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004436:	2b3e      	cmp	r3, #62	@ 0x3e
 8004438:	d921      	bls.n	800447e <USB_EPStartXfer+0x806>
 800443a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800443e:	095b      	lsrs	r3, r3, #5
 8004440:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004444:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004448:	f003 031f 	and.w	r3, r3, #31
 800444c:	2b00      	cmp	r3, #0
 800444e:	d104      	bne.n	800445a <USB_EPStartXfer+0x7e2>
 8004450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004454:	3b01      	subs	r3, #1
 8004456:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800445a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800445c:	881b      	ldrh	r3, [r3, #0]
 800445e:	b29a      	uxth	r2, r3
 8004460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004464:	b29b      	uxth	r3, r3
 8004466:	029b      	lsls	r3, r3, #10
 8004468:	b29b      	uxth	r3, r3
 800446a:	4313      	orrs	r3, r2
 800446c:	b29b      	uxth	r3, r3
 800446e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004472:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004476:	b29a      	uxth	r2, r3
 8004478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800447a:	801a      	strh	r2, [r3, #0]
 800447c:	e050      	b.n	8004520 <USB_EPStartXfer+0x8a8>
 800447e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10a      	bne.n	800449c <USB_EPStartXfer+0x824>
 8004486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004488:	881b      	ldrh	r3, [r3, #0]
 800448a:	b29b      	uxth	r3, r3
 800448c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004494:	b29a      	uxth	r2, r3
 8004496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004498:	801a      	strh	r2, [r3, #0]
 800449a:	e041      	b.n	8004520 <USB_EPStartXfer+0x8a8>
 800449c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044a0:	085b      	lsrs	r3, r3, #1
 80044a2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80044a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d004      	beq.n	80044bc <USB_EPStartXfer+0x844>
 80044b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044b6:	3301      	adds	r3, #1
 80044b8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80044bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044be:	881b      	ldrh	r3, [r3, #0]
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	029b      	lsls	r3, r3, #10
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	4313      	orrs	r3, r2
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044d2:	801a      	strh	r2, [r3, #0]
 80044d4:	e024      	b.n	8004520 <USB_EPStartXfer+0x8a8>
 80044d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	785b      	ldrb	r3, [r3, #1]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d11c      	bne.n	8004520 <USB_EPStartXfer+0x8a8>
 80044e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	461a      	mov	r2, r3
 80044f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044fa:	4413      	add	r3, r2
 80044fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80044fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004502:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	011a      	lsls	r2, r3, #4
 800450c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800450e:	4413      	add	r3, r2
 8004510:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004514:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800451a:	b29a      	uxth	r2, r3
 800451c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800451e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004520:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004524:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	895b      	ldrh	r3, [r3, #10]
 800452c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004530:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004534:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6959      	ldr	r1, [r3, #20]
 800453c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004540:	b29b      	uxth	r3, r3
 8004542:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004546:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800454a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800454e:	6800      	ldr	r0, [r0, #0]
 8004550:	f001 f881 	bl	8005656 <USB_WritePMA>
 8004554:	e227      	b.n	80049a6 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004556:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800455a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004566:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800456a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004574:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4413      	add	r3, r2
 8004580:	881b      	ldrh	r3, [r3, #0]
 8004582:	b29b      	uxth	r3, r3
 8004584:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004588:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800458c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004594:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800459e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	441a      	add	r2, r3
 80045aa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80045ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045be:	b29b      	uxth	r3, r3
 80045c0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80045c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045dc:	b29b      	uxth	r3, r3
 80045de:	461a      	mov	r2, r3
 80045e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045e2:	4413      	add	r3, r2
 80045e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	011a      	lsls	r2, r3, #4
 80045f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045f6:	4413      	add	r3, r2
 80045f8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80045fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80045fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004602:	b29a      	uxth	r2, r3
 8004604:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004606:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004608:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800460c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	891b      	ldrh	r3, [r3, #8]
 8004614:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004618:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800461c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6959      	ldr	r1, [r3, #20]
 8004624:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004628:	b29b      	uxth	r3, r3
 800462a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800462e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004632:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004636:	6800      	ldr	r0, [r0, #0]
 8004638:	f001 f80d 	bl	8005656 <USB_WritePMA>
 800463c:	e1b3      	b.n	80049a6 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800463e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004642:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6a1a      	ldr	r2, [r3, #32]
 800464a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800464e:	1ad2      	subs	r2, r2, r3
 8004650:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004654:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800465c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004660:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800466a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4413      	add	r3, r2
 8004676:	881b      	ldrh	r3, [r3, #0]
 8004678:	b29b      	uxth	r3, r3
 800467a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800467e:	2b00      	cmp	r3, #0
 8004680:	f000 80c6 	beq.w	8004810 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004684:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004688:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004690:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004694:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	785b      	ldrb	r3, [r3, #1]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d177      	bne.n	8004790 <USB_EPStartXfer+0xb18>
 80046a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	461a      	mov	r2, r3
 80046be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80046c0:	4413      	add	r3, r2
 80046c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	011a      	lsls	r2, r3, #4
 80046d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80046d4:	4413      	add	r3, r2
 80046d6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80046da:	667b      	str	r3, [r7, #100]	@ 0x64
 80046dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046de:	881b      	ldrh	r3, [r3, #0]
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046ea:	801a      	strh	r2, [r3, #0]
 80046ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80046f2:	d921      	bls.n	8004738 <USB_EPStartXfer+0xac0>
 80046f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046f8:	095b      	lsrs	r3, r3, #5
 80046fa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80046fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004702:	f003 031f 	and.w	r3, r3, #31
 8004706:	2b00      	cmp	r3, #0
 8004708:	d104      	bne.n	8004714 <USB_EPStartXfer+0xa9c>
 800470a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800470e:	3b01      	subs	r3, #1
 8004710:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004714:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004716:	881b      	ldrh	r3, [r3, #0]
 8004718:	b29a      	uxth	r2, r3
 800471a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800471e:	b29b      	uxth	r3, r3
 8004720:	029b      	lsls	r3, r3, #10
 8004722:	b29b      	uxth	r3, r3
 8004724:	4313      	orrs	r3, r2
 8004726:	b29b      	uxth	r3, r3
 8004728:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800472c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004730:	b29a      	uxth	r2, r3
 8004732:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004734:	801a      	strh	r2, [r3, #0]
 8004736:	e050      	b.n	80047da <USB_EPStartXfer+0xb62>
 8004738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10a      	bne.n	8004756 <USB_EPStartXfer+0xade>
 8004740:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004742:	881b      	ldrh	r3, [r3, #0]
 8004744:	b29b      	uxth	r3, r3
 8004746:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800474a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800474e:	b29a      	uxth	r2, r3
 8004750:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004752:	801a      	strh	r2, [r3, #0]
 8004754:	e041      	b.n	80047da <USB_EPStartXfer+0xb62>
 8004756:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800475a:	085b      	lsrs	r3, r3, #1
 800475c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b00      	cmp	r3, #0
 800476a:	d004      	beq.n	8004776 <USB_EPStartXfer+0xafe>
 800476c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004770:	3301      	adds	r3, #1
 8004772:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004776:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004778:	881b      	ldrh	r3, [r3, #0]
 800477a:	b29a      	uxth	r2, r3
 800477c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004780:	b29b      	uxth	r3, r3
 8004782:	029b      	lsls	r3, r3, #10
 8004784:	b29b      	uxth	r3, r3
 8004786:	4313      	orrs	r3, r2
 8004788:	b29a      	uxth	r2, r3
 800478a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800478c:	801a      	strh	r2, [r3, #0]
 800478e:	e024      	b.n	80047da <USB_EPStartXfer+0xb62>
 8004790:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004794:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	785b      	ldrb	r3, [r3, #1]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d11c      	bne.n	80047da <USB_EPStartXfer+0xb62>
 80047a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	461a      	mov	r2, r3
 80047b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80047b4:	4413      	add	r3, r2
 80047b6:	673b      	str	r3, [r7, #112]	@ 0x70
 80047b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	011a      	lsls	r2, r3, #4
 80047c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80047c8:	4413      	add	r3, r2
 80047ca:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80047ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80047d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047d8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80047da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	895b      	ldrh	r3, [r3, #10]
 80047e6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80047ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6959      	ldr	r1, [r3, #20]
 80047f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004800:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004804:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004808:	6800      	ldr	r0, [r0, #0]
 800480a:	f000 ff24 	bl	8005656 <USB_WritePMA>
 800480e:	e0ca      	b.n	80049a6 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004810:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004814:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	785b      	ldrb	r3, [r3, #1]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d177      	bne.n	8004910 <USB_EPStartXfer+0xc98>
 8004820:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004824:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800482c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004830:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800483a:	b29b      	uxth	r3, r3
 800483c:	461a      	mov	r2, r3
 800483e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004840:	4413      	add	r3, r2
 8004842:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004844:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004848:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	011a      	lsls	r2, r3, #4
 8004852:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004854:	4413      	add	r3, r2
 8004856:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800485a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800485c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800485e:	881b      	ldrh	r3, [r3, #0]
 8004860:	b29b      	uxth	r3, r3
 8004862:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004866:	b29a      	uxth	r2, r3
 8004868:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800486a:	801a      	strh	r2, [r3, #0]
 800486c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004870:	2b3e      	cmp	r3, #62	@ 0x3e
 8004872:	d921      	bls.n	80048b8 <USB_EPStartXfer+0xc40>
 8004874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004878:	095b      	lsrs	r3, r3, #5
 800487a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800487e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004882:	f003 031f 	and.w	r3, r3, #31
 8004886:	2b00      	cmp	r3, #0
 8004888:	d104      	bne.n	8004894 <USB_EPStartXfer+0xc1c>
 800488a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800488e:	3b01      	subs	r3, #1
 8004890:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004894:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004896:	881b      	ldrh	r3, [r3, #0]
 8004898:	b29a      	uxth	r2, r3
 800489a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800489e:	b29b      	uxth	r3, r3
 80048a0:	029b      	lsls	r3, r3, #10
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	4313      	orrs	r3, r2
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80048b4:	801a      	strh	r2, [r3, #0]
 80048b6:	e05c      	b.n	8004972 <USB_EPStartXfer+0xcfa>
 80048b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10a      	bne.n	80048d6 <USB_EPStartXfer+0xc5e>
 80048c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80048c2:	881b      	ldrh	r3, [r3, #0]
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80048d2:	801a      	strh	r2, [r3, #0]
 80048d4:	e04d      	b.n	8004972 <USB_EPStartXfer+0xcfa>
 80048d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048da:	085b      	lsrs	r3, r3, #1
 80048dc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80048e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d004      	beq.n	80048f6 <USB_EPStartXfer+0xc7e>
 80048ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80048f0:	3301      	adds	r3, #1
 80048f2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80048f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80048f8:	881b      	ldrh	r3, [r3, #0]
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004900:	b29b      	uxth	r3, r3
 8004902:	029b      	lsls	r3, r3, #10
 8004904:	b29b      	uxth	r3, r3
 8004906:	4313      	orrs	r3, r2
 8004908:	b29a      	uxth	r2, r3
 800490a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800490c:	801a      	strh	r2, [r3, #0]
 800490e:	e030      	b.n	8004972 <USB_EPStartXfer+0xcfa>
 8004910:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004914:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	785b      	ldrb	r3, [r3, #1]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d128      	bne.n	8004972 <USB_EPStartXfer+0xcfa>
 8004920:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004924:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800492e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004932:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800493c:	b29b      	uxth	r3, r3
 800493e:	461a      	mov	r2, r3
 8004940:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004944:	4413      	add	r3, r2
 8004946:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800494a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800494e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	011a      	lsls	r2, r3, #4
 8004958:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800495c:	4413      	add	r3, r2
 800495e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004962:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004966:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800496a:	b29a      	uxth	r2, r3
 800496c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004970:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004976:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	891b      	ldrh	r3, [r3, #8]
 800497e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004982:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004986:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6959      	ldr	r1, [r3, #20]
 800498e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004992:	b29b      	uxth	r3, r3
 8004994:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004998:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800499c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80049a0:	6800      	ldr	r0, [r0, #0]
 80049a2:	f000 fe58 	bl	8005656 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80049a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	881b      	ldrh	r3, [r3, #0]
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049cc:	817b      	strh	r3, [r7, #10]
 80049ce:	897b      	ldrh	r3, [r7, #10]
 80049d0:	f083 0310 	eor.w	r3, r3, #16
 80049d4:	817b      	strh	r3, [r7, #10]
 80049d6:	897b      	ldrh	r3, [r7, #10]
 80049d8:	f083 0320 	eor.w	r3, r3, #32
 80049dc:	817b      	strh	r3, [r7, #10]
 80049de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	441a      	add	r2, r3
 80049f8:	897b      	ldrh	r3, [r7, #10]
 80049fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	8013      	strh	r3, [r2, #0]
 8004a0e:	f000 bcde 	b.w	80053ce <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004a12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	7b1b      	ldrb	r3, [r3, #12]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f040 80bb 	bne.w	8004b9a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004a24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	699a      	ldr	r2, [r3, #24]
 8004a30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d917      	bls.n	8004a70 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8004a40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8004a50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	699a      	ldr	r2, [r3, #24]
 8004a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a60:	1ad2      	subs	r2, r2, r3
 8004a62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	619a      	str	r2, [r3, #24]
 8004a6e:	e00e      	b.n	8004a8e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8004a70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8004a80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004a8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004aa0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	461a      	mov	r2, r3
 8004aae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ab8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004abc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	011a      	lsls	r2, r3, #4
 8004ac6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004aca:	4413      	add	r3, r2
 8004acc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004ad0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004ad4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ad8:	881b      	ldrh	r3, [r3, #0]
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ae6:	801a      	strh	r2, [r3, #0]
 8004ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aec:	2b3e      	cmp	r3, #62	@ 0x3e
 8004aee:	d924      	bls.n	8004b3a <USB_EPStartXfer+0xec2>
 8004af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004af4:	095b      	lsrs	r3, r3, #5
 8004af6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004afe:	f003 031f 	and.w	r3, r3, #31
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d104      	bne.n	8004b10 <USB_EPStartXfer+0xe98>
 8004b06:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004b10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b14:	881b      	ldrh	r3, [r3, #0]
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	029b      	lsls	r3, r3, #10
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	4313      	orrs	r3, r2
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b34:	801a      	strh	r2, [r3, #0]
 8004b36:	f000 bc10 	b.w	800535a <USB_EPStartXfer+0x16e2>
 8004b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10c      	bne.n	8004b5c <USB_EPStartXfer+0xee4>
 8004b42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b46:	881b      	ldrh	r3, [r3, #0]
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b58:	801a      	strh	r2, [r3, #0]
 8004b5a:	e3fe      	b.n	800535a <USB_EPStartXfer+0x16e2>
 8004b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b60:	085b      	lsrs	r3, r3, #1
 8004b62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d004      	beq.n	8004b7c <USB_EPStartXfer+0xf04>
 8004b72:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004b76:	3301      	adds	r3, #1
 8004b78:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004b7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b80:	881b      	ldrh	r3, [r3, #0]
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	029b      	lsls	r3, r3, #10
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b96:	801a      	strh	r2, [r3, #0]
 8004b98:	e3df      	b.n	800535a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004b9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	78db      	ldrb	r3, [r3, #3]
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	f040 8218 	bne.w	8004fdc <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004bac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	785b      	ldrb	r3, [r3, #1]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f040 809d 	bne.w	8004cf8 <USB_EPStartXfer+0x1080>
 8004bbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004bcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bd0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	461a      	mov	r2, r3
 8004bde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004be2:	4413      	add	r3, r2
 8004be4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004be8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	011a      	lsls	r2, r3, #4
 8004bf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004c00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004c04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004c08:	881b      	ldrh	r3, [r3, #0]
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004c16:	801a      	strh	r2, [r3, #0]
 8004c18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	2b3e      	cmp	r3, #62	@ 0x3e
 8004c26:	d92b      	bls.n	8004c80 <USB_EPStartXfer+0x1008>
 8004c28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	095b      	lsrs	r3, r3, #5
 8004c36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	f003 031f 	and.w	r3, r3, #31
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d104      	bne.n	8004c58 <USB_EPStartXfer+0xfe0>
 8004c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c52:	3b01      	subs	r3, #1
 8004c54:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004c5c:	881b      	ldrh	r3, [r3, #0]
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	029b      	lsls	r3, r3, #10
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004c7c:	801a      	strh	r2, [r3, #0]
 8004c7e:	e070      	b.n	8004d62 <USB_EPStartXfer+0x10ea>
 8004c80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10c      	bne.n	8004caa <USB_EPStartXfer+0x1032>
 8004c90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004c94:	881b      	ldrh	r3, [r3, #0]
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004ca6:	801a      	strh	r2, [r3, #0]
 8004ca8:	e05b      	b.n	8004d62 <USB_EPStartXfer+0x10ea>
 8004caa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	085b      	lsrs	r3, r3, #1
 8004cb8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004cbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d004      	beq.n	8004cda <USB_EPStartXfer+0x1062>
 8004cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004cda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004cde:	881b      	ldrh	r3, [r3, #0]
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	029b      	lsls	r3, r3, #10
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	4313      	orrs	r3, r2
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004cf4:	801a      	strh	r2, [r3, #0]
 8004cf6:	e034      	b.n	8004d62 <USB_EPStartXfer+0x10ea>
 8004cf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	785b      	ldrb	r3, [r3, #1]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d12c      	bne.n	8004d62 <USB_EPStartXfer+0x10ea>
 8004d08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	461a      	mov	r2, r3
 8004d28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	011a      	lsls	r2, r3, #4
 8004d40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004d44:	4413      	add	r3, r2
 8004d46:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004d4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004d60:	801a      	strh	r2, [r3, #0]
 8004d62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004d70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	785b      	ldrb	r3, [r3, #1]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f040 809d 	bne.w	8004ebc <USB_EPStartXfer+0x1244>
 8004d82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004d90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	461a      	mov	r2, r3
 8004da2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004da6:	4413      	add	r3, r2
 8004da8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004dac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004db0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	011a      	lsls	r2, r3, #4
 8004dba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004dc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004dc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004dcc:	881b      	ldrh	r3, [r3, #0]
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004dda:	801a      	strh	r2, [r3, #0]
 8004ddc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004de0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	2b3e      	cmp	r3, #62	@ 0x3e
 8004dea:	d92b      	bls.n	8004e44 <USB_EPStartXfer+0x11cc>
 8004dec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004df0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	095b      	lsrs	r3, r3, #5
 8004dfa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004dfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	f003 031f 	and.w	r3, r3, #31
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d104      	bne.n	8004e1c <USB_EPStartXfer+0x11a4>
 8004e12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e16:	3b01      	subs	r3, #1
 8004e18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004e1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e20:	881b      	ldrh	r3, [r3, #0]
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	029b      	lsls	r3, r3, #10
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e40:	801a      	strh	r2, [r3, #0]
 8004e42:	e069      	b.n	8004f18 <USB_EPStartXfer+0x12a0>
 8004e44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10c      	bne.n	8004e6e <USB_EPStartXfer+0x11f6>
 8004e54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e6a:	801a      	strh	r2, [r3, #0]
 8004e6c:	e054      	b.n	8004f18 <USB_EPStartXfer+0x12a0>
 8004e6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	085b      	lsrs	r3, r3, #1
 8004e7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004e80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d004      	beq.n	8004e9e <USB_EPStartXfer+0x1226>
 8004e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e98:	3301      	adds	r3, #1
 8004e9a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004e9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ea2:	881b      	ldrh	r3, [r3, #0]
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	029b      	lsls	r3, r3, #10
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004eb8:	801a      	strh	r2, [r3, #0]
 8004eba:	e02d      	b.n	8004f18 <USB_EPStartXfer+0x12a0>
 8004ebc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ec0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	785b      	ldrb	r3, [r3, #1]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d125      	bne.n	8004f18 <USB_EPStartXfer+0x12a0>
 8004ecc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ed0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	461a      	mov	r2, r3
 8004ede:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004ee8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	011a      	lsls	r2, r3, #4
 8004ef6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004efa:	4413      	add	r3, r2
 8004efc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004f00:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f16:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004f18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	69db      	ldr	r3, [r3, #28]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 8218 	beq.w	800535a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004f2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	4413      	add	r3, r2
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004f4a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004f4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d005      	beq.n	8004f62 <USB_EPStartXfer+0x12ea>
 8004f56:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004f5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10d      	bne.n	8004f7e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004f62:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004f66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f040 81f5 	bne.w	800535a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004f70:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f040 81ee 	bne.w	800535a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8004f7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	4413      	add	r3, r2
 8004f98:	881b      	ldrh	r3, [r3, #0]
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fa4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004fa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	441a      	add	r2, r3
 8004fc2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004fc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fd2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	8013      	strh	r3, [r2, #0]
 8004fda:	e1be      	b.n	800535a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004fdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fe0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	78db      	ldrb	r3, [r3, #3]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	f040 81b4 	bne.w	8005356 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004fee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ff2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	699a      	ldr	r2, [r3, #24]
 8004ffa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ffe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	429a      	cmp	r2, r3
 8005008:	d917      	bls.n	800503a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800500a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800500e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800501a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800501e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	699a      	ldr	r2, [r3, #24]
 8005026:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800502a:	1ad2      	subs	r2, r2, r3
 800502c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005030:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	619a      	str	r2, [r3, #24]
 8005038:	e00e      	b.n	8005058 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800503a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800503e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800504a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800504e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2200      	movs	r2, #0
 8005056:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005058:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800505c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	785b      	ldrb	r3, [r3, #1]
 8005064:	2b00      	cmp	r3, #0
 8005066:	f040 8085 	bne.w	8005174 <USB_EPStartXfer+0x14fc>
 800506a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800506e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005078:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800507c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005086:	b29b      	uxth	r3, r3
 8005088:	461a      	mov	r2, r3
 800508a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800508e:	4413      	add	r3, r2
 8005090:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005098:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	011a      	lsls	r2, r3, #4
 80050a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80050a6:	4413      	add	r3, r2
 80050a8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80050ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80050b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80050b4:	881b      	ldrh	r3, [r3, #0]
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050bc:	b29a      	uxth	r2, r3
 80050be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80050c2:	801a      	strh	r2, [r3, #0]
 80050c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80050ca:	d923      	bls.n	8005114 <USB_EPStartXfer+0x149c>
 80050cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050d0:	095b      	lsrs	r3, r3, #5
 80050d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80050d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050da:	f003 031f 	and.w	r3, r3, #31
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d104      	bne.n	80050ec <USB_EPStartXfer+0x1474>
 80050e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050e6:	3b01      	subs	r3, #1
 80050e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80050ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80050f0:	881b      	ldrh	r3, [r3, #0]
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	029b      	lsls	r3, r3, #10
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	4313      	orrs	r3, r2
 8005100:	b29b      	uxth	r3, r3
 8005102:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005106:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800510a:	b29a      	uxth	r2, r3
 800510c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005110:	801a      	strh	r2, [r3, #0]
 8005112:	e060      	b.n	80051d6 <USB_EPStartXfer+0x155e>
 8005114:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10c      	bne.n	8005136 <USB_EPStartXfer+0x14be>
 800511c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005120:	881b      	ldrh	r3, [r3, #0]
 8005122:	b29b      	uxth	r3, r3
 8005124:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005128:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800512c:	b29a      	uxth	r2, r3
 800512e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005132:	801a      	strh	r2, [r3, #0]
 8005134:	e04f      	b.n	80051d6 <USB_EPStartXfer+0x155e>
 8005136:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800513a:	085b      	lsrs	r3, r3, #1
 800513c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005140:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	2b00      	cmp	r3, #0
 800514a:	d004      	beq.n	8005156 <USB_EPStartXfer+0x14de>
 800514c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005150:	3301      	adds	r3, #1
 8005152:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005156:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800515a:	881b      	ldrh	r3, [r3, #0]
 800515c:	b29a      	uxth	r2, r3
 800515e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005162:	b29b      	uxth	r3, r3
 8005164:	029b      	lsls	r3, r3, #10
 8005166:	b29b      	uxth	r3, r3
 8005168:	4313      	orrs	r3, r2
 800516a:	b29a      	uxth	r2, r3
 800516c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005170:	801a      	strh	r2, [r3, #0]
 8005172:	e030      	b.n	80051d6 <USB_EPStartXfer+0x155e>
 8005174:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005178:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	785b      	ldrb	r3, [r3, #1]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d128      	bne.n	80051d6 <USB_EPStartXfer+0x155e>
 8005184:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005188:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005192:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005196:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	461a      	mov	r2, r3
 80051a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051a8:	4413      	add	r3, r2
 80051aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80051ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	011a      	lsls	r2, r3, #4
 80051bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051c0:	4413      	add	r3, r2
 80051c2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80051c6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80051ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80051d4:	801a      	strh	r2, [r3, #0]
 80051d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80051e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	785b      	ldrb	r3, [r3, #1]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f040 8085 	bne.w	8005300 <USB_EPStartXfer+0x1688>
 80051f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005204:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005208:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005212:	b29b      	uxth	r3, r3
 8005214:	461a      	mov	r2, r3
 8005216:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800521a:	4413      	add	r3, r2
 800521c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005220:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005224:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	011a      	lsls	r2, r3, #4
 800522e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005232:	4413      	add	r3, r2
 8005234:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005238:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800523c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005240:	881b      	ldrh	r3, [r3, #0]
 8005242:	b29b      	uxth	r3, r3
 8005244:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005248:	b29a      	uxth	r2, r3
 800524a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800524e:	801a      	strh	r2, [r3, #0]
 8005250:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005254:	2b3e      	cmp	r3, #62	@ 0x3e
 8005256:	d923      	bls.n	80052a0 <USB_EPStartXfer+0x1628>
 8005258:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800525c:	095b      	lsrs	r3, r3, #5
 800525e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005262:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005266:	f003 031f 	and.w	r3, r3, #31
 800526a:	2b00      	cmp	r3, #0
 800526c:	d104      	bne.n	8005278 <USB_EPStartXfer+0x1600>
 800526e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005272:	3b01      	subs	r3, #1
 8005274:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005278:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800527c:	881b      	ldrh	r3, [r3, #0]
 800527e:	b29a      	uxth	r2, r3
 8005280:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005284:	b29b      	uxth	r3, r3
 8005286:	029b      	lsls	r3, r3, #10
 8005288:	b29b      	uxth	r3, r3
 800528a:	4313      	orrs	r3, r2
 800528c:	b29b      	uxth	r3, r3
 800528e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005292:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005296:	b29a      	uxth	r2, r3
 8005298:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800529c:	801a      	strh	r2, [r3, #0]
 800529e:	e05c      	b.n	800535a <USB_EPStartXfer+0x16e2>
 80052a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10c      	bne.n	80052c2 <USB_EPStartXfer+0x164a>
 80052a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80052ac:	881b      	ldrh	r3, [r3, #0]
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80052be:	801a      	strh	r2, [r3, #0]
 80052c0:	e04b      	b.n	800535a <USB_EPStartXfer+0x16e2>
 80052c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052c6:	085b      	lsrs	r3, r3, #1
 80052c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80052cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d004      	beq.n	80052e2 <USB_EPStartXfer+0x166a>
 80052d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052dc:	3301      	adds	r3, #1
 80052de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80052e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80052e6:	881b      	ldrh	r3, [r3, #0]
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	029b      	lsls	r3, r3, #10
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	4313      	orrs	r3, r2
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80052fc:	801a      	strh	r2, [r3, #0]
 80052fe:	e02c      	b.n	800535a <USB_EPStartXfer+0x16e2>
 8005300:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005304:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	785b      	ldrb	r3, [r3, #1]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d124      	bne.n	800535a <USB_EPStartXfer+0x16e2>
 8005310:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005314:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800531e:	b29b      	uxth	r3, r3
 8005320:	461a      	mov	r2, r3
 8005322:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005326:	4413      	add	r3, r2
 8005328:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800532c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005330:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	011a      	lsls	r2, r3, #4
 800533a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800533e:	4413      	add	r3, r2
 8005340:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005344:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800534c:	b29a      	uxth	r2, r3
 800534e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005352:	801a      	strh	r2, [r3, #0]
 8005354:	e001      	b.n	800535a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e03a      	b.n	80053d0 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800535a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800535e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005368:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	b29b      	uxth	r3, r3
 8005378:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800537c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005380:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005384:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005388:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800538c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005390:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005394:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005398:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800539c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	441a      	add	r2, r3
 80053b6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80053ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80053da:	b480      	push	{r7}
 80053dc:	b085      	sub	sp, #20
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
 80053e2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	785b      	ldrb	r3, [r3, #1]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d020      	beq.n	800542e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4413      	add	r3, r2
 80053f6:	881b      	ldrh	r3, [r3, #0]
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005402:	81bb      	strh	r3, [r7, #12]
 8005404:	89bb      	ldrh	r3, [r7, #12]
 8005406:	f083 0310 	eor.w	r3, r3, #16
 800540a:	81bb      	strh	r3, [r7, #12]
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	441a      	add	r2, r3
 8005416:	89bb      	ldrh	r3, [r7, #12]
 8005418:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800541c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005420:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005424:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005428:	b29b      	uxth	r3, r3
 800542a:	8013      	strh	r3, [r2, #0]
 800542c:	e01f      	b.n	800546e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	4413      	add	r3, r2
 8005438:	881b      	ldrh	r3, [r3, #0]
 800543a:	b29b      	uxth	r3, r3
 800543c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005440:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005444:	81fb      	strh	r3, [r7, #14]
 8005446:	89fb      	ldrh	r3, [r7, #14]
 8005448:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800544c:	81fb      	strh	r3, [r7, #14]
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	441a      	add	r2, r3
 8005458:	89fb      	ldrh	r3, [r7, #14]
 800545a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800545e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005462:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005466:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800546a:	b29b      	uxth	r3, r3
 800546c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3714      	adds	r7, #20
 8005474:	46bd      	mov	sp, r7
 8005476:	bc80      	pop	{r7}
 8005478:	4770      	bx	lr

0800547a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800547a:	b480      	push	{r7}
 800547c:	b087      	sub	sp, #28
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
 8005482:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	7b1b      	ldrb	r3, [r3, #12]
 8005488:	2b00      	cmp	r3, #0
 800548a:	f040 809d 	bne.w	80055c8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	785b      	ldrb	r3, [r3, #1]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d04c      	beq.n	8005530 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	4413      	add	r3, r2
 80054a0:	881b      	ldrh	r3, [r3, #0]
 80054a2:	823b      	strh	r3, [r7, #16]
 80054a4:	8a3b      	ldrh	r3, [r7, #16]
 80054a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d01b      	beq.n	80054e6 <USB_EPClearStall+0x6c>
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	881b      	ldrh	r3, [r3, #0]
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054c4:	81fb      	strh	r3, [r7, #14]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	441a      	add	r2, r3
 80054d0:	89fb      	ldrh	r3, [r7, #14]
 80054d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054de:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	78db      	ldrb	r3, [r3, #3]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d06c      	beq.n	80055c8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	4413      	add	r3, r2
 80054f8:	881b      	ldrh	r3, [r3, #0]
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005500:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005504:	81bb      	strh	r3, [r7, #12]
 8005506:	89bb      	ldrh	r3, [r7, #12]
 8005508:	f083 0320 	eor.w	r3, r3, #32
 800550c:	81bb      	strh	r3, [r7, #12]
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	441a      	add	r2, r3
 8005518:	89bb      	ldrh	r3, [r7, #12]
 800551a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800551e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005522:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005526:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800552a:	b29b      	uxth	r3, r3
 800552c:	8013      	strh	r3, [r2, #0]
 800552e:	e04b      	b.n	80055c8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4413      	add	r3, r2
 800553a:	881b      	ldrh	r3, [r3, #0]
 800553c:	82fb      	strh	r3, [r7, #22]
 800553e:	8afb      	ldrh	r3, [r7, #22]
 8005540:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d01b      	beq.n	8005580 <USB_EPClearStall+0x106>
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4413      	add	r3, r2
 8005552:	881b      	ldrh	r3, [r3, #0]
 8005554:	b29b      	uxth	r3, r3
 8005556:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800555a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800555e:	82bb      	strh	r3, [r7, #20]
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	441a      	add	r2, r3
 800556a:	8abb      	ldrh	r3, [r7, #20]
 800556c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005570:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005574:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005578:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800557c:	b29b      	uxth	r3, r3
 800557e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	4413      	add	r3, r2
 800558a:	881b      	ldrh	r3, [r3, #0]
 800558c:	b29b      	uxth	r3, r3
 800558e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005592:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005596:	827b      	strh	r3, [r7, #18]
 8005598:	8a7b      	ldrh	r3, [r7, #18]
 800559a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800559e:	827b      	strh	r3, [r7, #18]
 80055a0:	8a7b      	ldrh	r3, [r7, #18]
 80055a2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80055a6:	827b      	strh	r3, [r7, #18]
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	441a      	add	r2, r3
 80055b2:	8a7b      	ldrh	r3, [r7, #18]
 80055b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	371c      	adds	r7, #28
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bc80      	pop	{r7}
 80055d2:	4770      	bx	lr

080055d4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	460b      	mov	r3, r1
 80055de:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80055e0:	78fb      	ldrb	r3, [r7, #3]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d103      	bne.n	80055ee <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2280      	movs	r2, #128	@ 0x80
 80055ea:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bc80      	pop	{r7}
 80055f8:	4770      	bx	lr

080055fa <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80055fa:	b480      	push	{r7}
 80055fc:	b083      	sub	sp, #12
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	bc80      	pop	{r7}
 800560c:	4770      	bx	lr

0800560e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800560e:	b480      	push	{r7}
 8005610:	b083      	sub	sp, #12
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	bc80      	pop	{r7}
 8005620:	4770      	bx	lr

08005622 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8005622:	b480      	push	{r7}
 8005624:	b085      	sub	sp, #20
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005630:	b29b      	uxth	r3, r3
 8005632:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005634:	68fb      	ldr	r3, [r7, #12]
}
 8005636:	4618      	mov	r0, r3
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	bc80      	pop	{r7}
 800563e:	4770      	bx	lr

08005640 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	bc80      	pop	{r7}
 8005654:	4770      	bx	lr

08005656 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005656:	b480      	push	{r7}
 8005658:	b08b      	sub	sp, #44	@ 0x2c
 800565a:	af00      	add	r7, sp, #0
 800565c:	60f8      	str	r0, [r7, #12]
 800565e:	60b9      	str	r1, [r7, #8]
 8005660:	4611      	mov	r1, r2
 8005662:	461a      	mov	r2, r3
 8005664:	460b      	mov	r3, r1
 8005666:	80fb      	strh	r3, [r7, #6]
 8005668:	4613      	mov	r3, r2
 800566a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800566c:	88bb      	ldrh	r3, [r7, #4]
 800566e:	3301      	adds	r3, #1
 8005670:	085b      	lsrs	r3, r3, #1
 8005672:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800567c:	88fb      	ldrh	r3, [r7, #6]
 800567e:	005a      	lsls	r2, r3, #1
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	4413      	add	r3, r2
 8005684:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005688:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	627b      	str	r3, [r7, #36]	@ 0x24
 800568e:	e01e      	b.n	80056ce <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	3301      	adds	r3, #1
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	021b      	lsls	r3, r3, #8
 800569e:	b21a      	sxth	r2, r3
 80056a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	b21b      	sxth	r3, r3
 80056a8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80056aa:	6a3b      	ldr	r3, [r7, #32]
 80056ac:	8a7a      	ldrh	r2, [r7, #18]
 80056ae:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80056b0:	6a3b      	ldr	r3, [r7, #32]
 80056b2:	3302      	adds	r3, #2
 80056b4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80056b6:	6a3b      	ldr	r3, [r7, #32]
 80056b8:	3302      	adds	r3, #2
 80056ba:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	3301      	adds	r3, #1
 80056c0:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	3301      	adds	r3, #1
 80056c6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80056c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ca:	3b01      	subs	r3, #1
 80056cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80056ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1dd      	bne.n	8005690 <USB_WritePMA+0x3a>
  }
}
 80056d4:	bf00      	nop
 80056d6:	bf00      	nop
 80056d8:	372c      	adds	r7, #44	@ 0x2c
 80056da:	46bd      	mov	sp, r7
 80056dc:	bc80      	pop	{r7}
 80056de:	4770      	bx	lr

080056e0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b08b      	sub	sp, #44	@ 0x2c
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	4611      	mov	r1, r2
 80056ec:	461a      	mov	r2, r3
 80056ee:	460b      	mov	r3, r1
 80056f0:	80fb      	strh	r3, [r7, #6]
 80056f2:	4613      	mov	r3, r2
 80056f4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80056f6:	88bb      	ldrh	r3, [r7, #4]
 80056f8:	085b      	lsrs	r3, r3, #1
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005706:	88fb      	ldrh	r3, [r7, #6]
 8005708:	005a      	lsls	r2, r3, #1
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	4413      	add	r3, r2
 800570e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005712:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	627b      	str	r3, [r7, #36]	@ 0x24
 8005718:	e01b      	b.n	8005752 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800571a:	6a3b      	ldr	r3, [r7, #32]
 800571c:	881b      	ldrh	r3, [r3, #0]
 800571e:	b29b      	uxth	r3, r3
 8005720:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005722:	6a3b      	ldr	r3, [r7, #32]
 8005724:	3302      	adds	r3, #2
 8005726:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	b2da      	uxtb	r2, r3
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	3301      	adds	r3, #1
 8005734:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	0a1b      	lsrs	r3, r3, #8
 800573a:	b2da      	uxtb	r2, r3
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	3301      	adds	r3, #1
 8005744:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005746:	6a3b      	ldr	r3, [r7, #32]
 8005748:	3302      	adds	r3, #2
 800574a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800574c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574e:	3b01      	subs	r3, #1
 8005750:	627b      	str	r3, [r7, #36]	@ 0x24
 8005752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1e0      	bne.n	800571a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005758:	88bb      	ldrh	r3, [r7, #4]
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	b29b      	uxth	r3, r3
 8005760:	2b00      	cmp	r3, #0
 8005762:	d007      	beq.n	8005774 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8005764:	6a3b      	ldr	r3, [r7, #32]
 8005766:	881b      	ldrh	r3, [r3, #0]
 8005768:	b29b      	uxth	r3, r3
 800576a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	b2da      	uxtb	r2, r3
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	701a      	strb	r2, [r3, #0]
  }
}
 8005774:	bf00      	nop
 8005776:	372c      	adds	r7, #44	@ 0x2c
 8005778:	46bd      	mov	sp, r7
 800577a:	bc80      	pop	{r7}
 800577c:	4770      	bx	lr

0800577e <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b084      	sub	sp, #16
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
 8005786:	460b      	mov	r3, r1
 8005788:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800578a:	2300      	movs	r3, #0
 800578c:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 800578e:	2302      	movs	r3, #2
 8005790:	2203      	movs	r2, #3
 8005792:	2181      	movs	r1, #129	@ 0x81
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f001 fd4e 	bl	8007236 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 80057a0:	2302      	movs	r3, #2
 80057a2:	2203      	movs	r2, #3
 80057a4:	2101      	movs	r1, #1
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f001 fd45 	bl	8007236 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80057b4:	2018      	movs	r0, #24
 80057b6:	f001 fe53 	bl	8007460 <USBD_static_malloc>
 80057ba:	4602      	mov	r2, r0
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d102      	bne.n	80057d2 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 80057cc:	2301      	movs	r3, #1
 80057ce:	73fb      	strb	r3, [r7, #15]
 80057d0:	e011      	b.n	80057f6 <USBD_CUSTOM_HID_Init+0x78>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80057d8:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	2200      	movs	r2, #0
 80057de:	751a      	strb	r2, [r3, #20]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	2302      	movs	r3, #2
 80057ee:	2101      	movs	r1, #1
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f001 fe11 	bl	8007418 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 80057f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	460b      	mov	r3, r1
 800580a:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 800580c:	2181      	movs	r1, #129	@ 0x81
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f001 fd37 	bl	8007282 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 800581a:	2101      	movs	r1, #1
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f001 fd30 	bl	8007282 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00e      	beq.n	8005852 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005844:	4618      	mov	r0, r3
 8005846:	f001 fe17 	bl	8007478 <USBD_static_free>
    pdev->pClassData = NULL;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }
  return USBD_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3708      	adds	r7, #8
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b088      	sub	sp, #32
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800586c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800586e:	2300      	movs	r3, #0
 8005870:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8005872:	2300      	movs	r3, #0
 8005874:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8005876:	2300      	movs	r3, #0
 8005878:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 800587a:	2300      	movs	r3, #0
 800587c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005886:	2b00      	cmp	r3, #0
 8005888:	d051      	beq.n	800592e <USBD_CUSTOM_HID_Setup+0xd2>
 800588a:	2b20      	cmp	r3, #32
 800588c:	f040 80d8 	bne.w	8005a40 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	785b      	ldrb	r3, [r3, #1]
 8005894:	3b02      	subs	r3, #2
 8005896:	2b09      	cmp	r3, #9
 8005898:	d841      	bhi.n	800591e <USBD_CUSTOM_HID_Setup+0xc2>
 800589a:	a201      	add	r2, pc, #4	@ (adr r2, 80058a0 <USBD_CUSTOM_HID_Setup+0x44>)
 800589c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a0:	080058f9 	.word	0x080058f9
 80058a4:	080058d7 	.word	0x080058d7
 80058a8:	0800591f 	.word	0x0800591f
 80058ac:	0800591f 	.word	0x0800591f
 80058b0:	0800591f 	.word	0x0800591f
 80058b4:	0800591f 	.word	0x0800591f
 80058b8:	0800591f 	.word	0x0800591f
 80058bc:	08005909 	.word	0x08005909
 80058c0:	080058e7 	.word	0x080058e7
 80058c4:	080058c9 	.word	0x080058c9
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	885b      	ldrh	r3, [r3, #2]
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	461a      	mov	r2, r3
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	605a      	str	r2, [r3, #4]
          break;
 80058d4:	e02a      	b.n	800592c <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	3304      	adds	r3, #4
 80058da:	2201      	movs	r2, #1
 80058dc:	4619      	mov	r1, r3
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f001 f992 	bl	8006c08 <USBD_CtlSendData>
          break;
 80058e4:	e022      	b.n	800592c <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	885b      	ldrh	r3, [r3, #2]
 80058ea:	0a1b      	lsrs	r3, r3, #8
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	461a      	mov	r2, r3
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	609a      	str	r2, [r3, #8]
          break;
 80058f6:	e019      	b.n	800592c <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	3308      	adds	r3, #8
 80058fc:	2201      	movs	r2, #1
 80058fe:	4619      	mov	r1, r3
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f001 f981 	bl	8006c08 <USBD_CtlSendData>
          break;
 8005906:	e011      	b.n	800592c <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	2201      	movs	r2, #1
 800590c:	611a      	str	r2, [r3, #16]
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800590e:	6939      	ldr	r1, [r7, #16]
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	88db      	ldrh	r3, [r3, #6]
 8005914:	461a      	mov	r2, r3
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f001 f9a4 	bl	8006c64 <USBD_CtlPrepareRx>
          break;
 800591c:	e006      	b.n	800592c <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 800591e:	6839      	ldr	r1, [r7, #0]
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f001 f907 	bl	8006b34 <USBD_CtlError>
          ret = USBD_FAIL;
 8005926:	2302      	movs	r3, #2
 8005928:	75fb      	strb	r3, [r7, #23]
          break;
 800592a:	bf00      	nop
      }
      break;
 800592c:	e08f      	b.n	8005a4e <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	785b      	ldrb	r3, [r3, #1]
 8005932:	2b0b      	cmp	r3, #11
 8005934:	d87c      	bhi.n	8005a30 <USBD_CUSTOM_HID_Setup+0x1d4>
 8005936:	a201      	add	r2, pc, #4	@ (adr r2, 800593c <USBD_CUSTOM_HID_Setup+0xe0>)
 8005938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593c:	0800596d 	.word	0x0800596d
 8005940:	08005a31 	.word	0x08005a31
 8005944:	08005a31 	.word	0x08005a31
 8005948:	08005a31 	.word	0x08005a31
 800594c:	08005a31 	.word	0x08005a31
 8005950:	08005a31 	.word	0x08005a31
 8005954:	08005995 	.word	0x08005995
 8005958:	08005a31 	.word	0x08005a31
 800595c:	08005a31 	.word	0x08005a31
 8005960:	08005a31 	.word	0x08005a31
 8005964:	080059e3 	.word	0x080059e3
 8005968:	08005a0b 	.word	0x08005a0b
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005972:	2b03      	cmp	r3, #3
 8005974:	d107      	bne.n	8005986 <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005976:	f107 030e 	add.w	r3, r7, #14
 800597a:	2202      	movs	r2, #2
 800597c:	4619      	mov	r1, r3
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f001 f942 	bl	8006c08 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005984:	e05b      	b.n	8005a3e <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8005986:	6839      	ldr	r1, [r7, #0]
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f001 f8d3 	bl	8006b34 <USBD_CtlError>
            ret = USBD_FAIL;
 800598e:	2302      	movs	r3, #2
 8005990:	75fb      	strb	r3, [r7, #23]
          break;
 8005992:	e054      	b.n	8005a3e <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	885b      	ldrh	r3, [r3, #2]
 8005998:	0a1b      	lsrs	r3, r3, #8
 800599a:	b29b      	uxth	r3, r3
 800599c:	2b22      	cmp	r3, #34	@ 0x22
 800599e:	d10b      	bne.n	80059b8 <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	88db      	ldrh	r3, [r3, #6]
 80059a4:	2b37      	cmp	r3, #55	@ 0x37
 80059a6:	bf28      	it	cs
 80059a8:	2337      	movcs	r3, #55	@ 0x37
 80059aa:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	61bb      	str	r3, [r7, #24]
 80059b6:	e00d      	b.n	80059d4 <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	885b      	ldrh	r3, [r3, #2]
 80059bc:	0a1b      	lsrs	r3, r3, #8
 80059be:	b29b      	uxth	r3, r3
 80059c0:	2b21      	cmp	r3, #33	@ 0x21
 80059c2:	d107      	bne.n	80059d4 <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80059c4:	4b24      	ldr	r3, [pc, #144]	@ (8005a58 <USBD_CUSTOM_HID_Setup+0x1fc>)
 80059c6:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	88db      	ldrh	r3, [r3, #6]
 80059cc:	2b09      	cmp	r3, #9
 80059ce:	bf28      	it	cs
 80059d0:	2309      	movcs	r3, #9
 80059d2:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 80059d4:	8bfb      	ldrh	r3, [r7, #30]
 80059d6:	461a      	mov	r2, r3
 80059d8:	69b9      	ldr	r1, [r7, #24]
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f001 f914 	bl	8006c08 <USBD_CtlSendData>
          break;
 80059e0:	e02d      	b.n	8005a3e <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80059e8:	2b03      	cmp	r3, #3
 80059ea:	d107      	bne.n	80059fc <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	330c      	adds	r3, #12
 80059f0:	2201      	movs	r2, #1
 80059f2:	4619      	mov	r1, r3
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f001 f907 	bl	8006c08 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80059fa:	e020      	b.n	8005a3e <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 80059fc:	6839      	ldr	r1, [r7, #0]
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f001 f898 	bl	8006b34 <USBD_CtlError>
            ret = USBD_FAIL;
 8005a04:	2302      	movs	r3, #2
 8005a06:	75fb      	strb	r3, [r7, #23]
          break;
 8005a08:	e019      	b.n	8005a3e <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a10:	2b03      	cmp	r3, #3
 8005a12:	d106      	bne.n	8005a22 <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	885b      	ldrh	r3, [r3, #2]
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a20:	e00d      	b.n	8005a3e <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8005a22:	6839      	ldr	r1, [r7, #0]
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f001 f885 	bl	8006b34 <USBD_CtlError>
            ret = USBD_FAIL;
 8005a2a:	2302      	movs	r3, #2
 8005a2c:	75fb      	strb	r3, [r7, #23]
          break;
 8005a2e:	e006      	b.n	8005a3e <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 8005a30:	6839      	ldr	r1, [r7, #0]
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f001 f87e 	bl	8006b34 <USBD_CtlError>
          ret = USBD_FAIL;
 8005a38:	2302      	movs	r3, #2
 8005a3a:	75fb      	strb	r3, [r7, #23]
          break;
 8005a3c:	bf00      	nop
      }
      break;
 8005a3e:	e006      	b.n	8005a4e <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 8005a40:	6839      	ldr	r1, [r7, #0]
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f001 f876 	bl	8006b34 <USBD_CtlError>
      ret = USBD_FAIL;
 8005a48:	2302      	movs	r3, #2
 8005a4a:	75fb      	strb	r3, [r7, #23]
      break;
 8005a4c:	bf00      	nop
  }
  return ret;
 8005a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3720      	adds	r7, #32
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	200000cc 	.word	0x200000cc

08005a5c <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b086      	sub	sp, #24
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	4613      	mov	r3, r2
 8005a68:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a70:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a78:	2b03      	cmp	r3, #3
 8005a7a:	d10f      	bne.n	8005a9c <USBD_CUSTOM_HID_SendReport+0x40>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	7d1b      	ldrb	r3, [r3, #20]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d109      	bne.n	8005a98 <USBD_CUSTOM_HID_SendReport+0x3c>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	2201      	movs	r2, #1
 8005a88:	751a      	strb	r2, [r3, #20]
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8005a8a:	88fb      	ldrh	r3, [r7, #6]
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	2181      	movs	r1, #129	@ 0x81
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f001 fc9e 	bl	80073d2 <USBD_LL_Transmit>
 8005a96:	e001      	b.n	8005a9c <USBD_CUSTOM_HID_SendReport+0x40>
    }
    else
    {
      return USBD_BUSY;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e000      	b.n	8005a9e <USBD_CUSTOM_HID_SendReport+0x42>
    }
  }
  return USBD_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3718      	adds	r7, #24
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
	...

08005aa8 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2229      	movs	r2, #41	@ 0x29
 8005ab4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 8005ab6:	4b03      	ldr	r3, [pc, #12]	@ (8005ac4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bc80      	pop	{r7}
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	20000048 	.word	0x20000048

08005ac8 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2229      	movs	r2, #41	@ 0x29
 8005ad4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 8005ad6:	4b03      	ldr	r3, [pc, #12]	@ (8005ae4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bc80      	pop	{r7}
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	20000074 	.word	0x20000074

08005ae8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2229      	movs	r2, #41	@ 0x29
 8005af4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8005af6:	4b03      	ldr	r3, [pc, #12]	@ (8005b04 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bc80      	pop	{r7}
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	200000a0 	.word	0x200000a0

08005b08 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	460b      	mov	r3, r1
 8005b12:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	751a      	strb	r2, [r3, #20]

  return USBD_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bc80      	pop	{r7}
 8005b28:	4770      	bx	lr

08005b2a <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b084      	sub	sp, #16
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
 8005b32:	460b      	mov	r3, r1
 8005b34:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b3c:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	4610      	mov	r0, r2
 8005b4a:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	2302      	movs	r3, #2
 8005b50:	2101      	movs	r1, #1
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f001 fc60 	bl	8007418 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b084      	sub	sp, #16
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b70:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d109      	bne.n	8005b8e <USBD_CUSTOM_HID_EP0_RxReady+0x2c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	4610      	mov	r0, r2
 8005b86:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	611a      	str	r2, [r3, #16]
  }

  return USBD_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	220a      	movs	r2, #10
 8005ba4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8005ba6:	4b03      	ldr	r3, [pc, #12]	@ (8005bb4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bc80      	pop	{r7}
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	200000d8 	.word	0x200000d8

08005bb8 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005bc2:	2302      	movs	r3, #2
 8005bc4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d005      	beq.n	8005bd8 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	683a      	ldr	r2, [r7, #0]
 8005bd0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3714      	adds	r7, #20
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bc80      	pop	{r7}
 8005be2:	4770      	bx	lr

08005be4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	e01a      	b.n	8005c32 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d003      	beq.n	8005c0e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d003      	beq.n	8005c1c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	79fa      	ldrb	r2, [r7, #7]
 8005c28:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f001 fa98 	bl	8007160 <USBD_LL_Init>

  return USBD_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b085      	sub	sp, #20
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
 8005c42:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005c44:	2300      	movs	r3, #0
 8005c46:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d006      	beq.n	8005c5c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	683a      	ldr	r2, [r7, #0]
 8005c52:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8005c56:	2300      	movs	r3, #0
 8005c58:	73fb      	strb	r3, [r7, #15]
 8005c5a:	e001      	b.n	8005c60 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3714      	adds	r7, #20
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bc80      	pop	{r7}
 8005c6a:	4770      	bx	lr

08005c6c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f001 fac3 	bl	8007200 <USBD_LL_Start>

  return USBD_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3708      	adds	r7, #8
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	370c      	adds	r7, #12
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bc80      	pop	{r7}
 8005c96:	4770      	bx	lr

08005c98 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005ca4:	2302      	movs	r3, #2
 8005ca6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00c      	beq.n	8005ccc <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	78fa      	ldrb	r2, [r7, #3]
 8005cbc:	4611      	mov	r1, r2
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	4798      	blx	r3
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d101      	bne.n	8005ccc <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b082      	sub	sp, #8
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
 8005cde:	460b      	mov	r3, r1
 8005ce0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	78fa      	ldrb	r2, [r7, #3]
 8005cec:	4611      	mov	r1, r2
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	4798      	blx	r3

  return USBD_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3708      	adds	r7, #8
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8005d0c:	6839      	ldr	r1, [r7, #0]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 fed7 	bl	8006ac2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005d22:	461a      	mov	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005d30:	f003 031f 	and.w	r3, r3, #31
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d016      	beq.n	8005d66 <USBD_LL_SetupStage+0x6a>
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d81c      	bhi.n	8005d76 <USBD_LL_SetupStage+0x7a>
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d002      	beq.n	8005d46 <USBD_LL_SetupStage+0x4a>
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d008      	beq.n	8005d56 <USBD_LL_SetupStage+0x5a>
 8005d44:	e017      	b.n	8005d76 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f9ca 	bl	80060e8 <USBD_StdDevReq>
      break;
 8005d54:	e01a      	b.n	8005d8c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 fa2c 	bl	80061bc <USBD_StdItfReq>
      break;
 8005d64:	e012      	b.n	8005d8c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 fa6c 	bl	800624c <USBD_StdEPReq>
      break;
 8005d74:	e00a      	b.n	8005d8c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005d7c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	4619      	mov	r1, r3
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f001 fa9b 	bl	80072c0 <USBD_LL_StallEP>
      break;
 8005d8a:	bf00      	nop
  }

  return USBD_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3708      	adds	r7, #8
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b086      	sub	sp, #24
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	60f8      	str	r0, [r7, #12]
 8005d9e:	460b      	mov	r3, r1
 8005da0:	607a      	str	r2, [r7, #4]
 8005da2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005da4:	7afb      	ldrb	r3, [r7, #11]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d14b      	bne.n	8005e42 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005db0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005db8:	2b03      	cmp	r3, #3
 8005dba:	d134      	bne.n	8005e26 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	68da      	ldr	r2, [r3, #12]
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d919      	bls.n	8005dfc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	68da      	ldr	r2, [r3, #12]
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	1ad2      	subs	r2, r2, r3
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	68da      	ldr	r2, [r3, #12]
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d203      	bcs.n	8005dea <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	e002      	b.n	8005df0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	461a      	mov	r2, r3
 8005df2:	6879      	ldr	r1, [r7, #4]
 8005df4:	68f8      	ldr	r0, [r7, #12]
 8005df6:	f000 ff53 	bl	8006ca0 <USBD_CtlContinueRx>
 8005dfa:	e038      	b.n	8005e6e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00a      	beq.n	8005e1e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005e0e:	2b03      	cmp	r3, #3
 8005e10:	d105      	bne.n	8005e1e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005e1e:	68f8      	ldr	r0, [r7, #12]
 8005e20:	f000 ff50 	bl	8006cc4 <USBD_CtlSendStatus>
 8005e24:	e023      	b.n	8005e6e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005e2c:	2b05      	cmp	r3, #5
 8005e2e:	d11e      	bne.n	8005e6e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005e38:	2100      	movs	r1, #0
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f001 fa40 	bl	80072c0 <USBD_LL_StallEP>
 8005e40:	e015      	b.n	8005e6e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00d      	beq.n	8005e6a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005e54:	2b03      	cmp	r3, #3
 8005e56:	d108      	bne.n	8005e6a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	7afa      	ldrb	r2, [r7, #11]
 8005e62:	4611      	mov	r1, r2
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	4798      	blx	r3
 8005e68:	e001      	b.n	8005e6e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005e6a:	2302      	movs	r3, #2
 8005e6c:	e000      	b.n	8005e70 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3718      	adds	r7, #24
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	460b      	mov	r3, r1
 8005e82:	607a      	str	r2, [r7, #4]
 8005e84:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005e86:	7afb      	ldrb	r3, [r7, #11]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d17f      	bne.n	8005f8c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	3314      	adds	r3, #20
 8005e90:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d15c      	bne.n	8005f56 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	68da      	ldr	r2, [r3, #12]
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d915      	bls.n	8005ed4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	68da      	ldr	r2, [r3, #12]
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	1ad2      	subs	r2, r2, r3
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	6879      	ldr	r1, [r7, #4]
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f000 febd 	bl	8006c40 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	2200      	movs	r2, #0
 8005eca:	2100      	movs	r1, #0
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f001 faa3 	bl	8007418 <USBD_LL_PrepareReceive>
 8005ed2:	e04e      	b.n	8005f72 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	6912      	ldr	r2, [r2, #16]
 8005edc:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ee0:	fb01 f202 	mul.w	r2, r1, r2
 8005ee4:	1a9b      	subs	r3, r3, r2
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d11c      	bne.n	8005f24 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	689a      	ldr	r2, [r3, #8]
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d316      	bcc.n	8005f24 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	689a      	ldr	r2, [r3, #8]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d20f      	bcs.n	8005f24 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005f04:	2200      	movs	r2, #0
 8005f06:	2100      	movs	r1, #0
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f000 fe99 	bl	8006c40 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f16:	2300      	movs	r3, #0
 8005f18:	2200      	movs	r2, #0
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f001 fa7b 	bl	8007418 <USBD_LL_PrepareReceive>
 8005f22:	e026      	b.n	8005f72 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00a      	beq.n	8005f46 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005f36:	2b03      	cmp	r3, #3
 8005f38:	d105      	bne.n	8005f46 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005f46:	2180      	movs	r1, #128	@ 0x80
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f001 f9b9 	bl	80072c0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	f000 fecb 	bl	8006cea <USBD_CtlReceiveStatus>
 8005f54:	e00d      	b.n	8005f72 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005f5c:	2b04      	cmp	r3, #4
 8005f5e:	d004      	beq.n	8005f6a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d103      	bne.n	8005f72 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005f6a:	2180      	movs	r1, #128	@ 0x80
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	f001 f9a7 	bl	80072c0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d11d      	bne.n	8005fb8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005f7c:	68f8      	ldr	r0, [r7, #12]
 8005f7e:	f7ff fe81 	bl	8005c84 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005f8a:	e015      	b.n	8005fb8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005f92:	695b      	ldr	r3, [r3, #20]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00d      	beq.n	8005fb4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005f9e:	2b03      	cmp	r3, #3
 8005fa0:	d108      	bne.n	8005fb4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	7afa      	ldrb	r2, [r7, #11]
 8005fac:	4611      	mov	r1, r2
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	4798      	blx	r3
 8005fb2:	e001      	b.n	8005fb8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	e000      	b.n	8005fba <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3718      	adds	r7, #24
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b082      	sub	sp, #8
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005fca:	2340      	movs	r3, #64	@ 0x40
 8005fcc:	2200      	movs	r2, #0
 8005fce:	2100      	movs	r1, #0
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f001 f930 	bl	8007236 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2240      	movs	r2, #64	@ 0x40
 8005fe2:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005fe6:	2340      	movs	r3, #64	@ 0x40
 8005fe8:	2200      	movs	r2, #0
 8005fea:	2180      	movs	r1, #128	@ 0x80
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f001 f922 	bl	8007236 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2240      	movs	r2, #64	@ 0x40
 8005ffc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006022:	2b00      	cmp	r3, #0
 8006024:	d009      	beq.n	800603a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	6852      	ldr	r2, [r2, #4]
 8006032:	b2d2      	uxtb	r2, r2
 8006034:	4611      	mov	r1, r2
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	4798      	blx	r3
  }

  return USBD_OK;
 800603a:	2300      	movs	r3, #0
}
 800603c:	4618      	mov	r0, r3
 800603e:	3708      	adds	r7, #8
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	460b      	mov	r3, r1
 800604e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	78fa      	ldrb	r2, [r7, #3]
 8006054:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	bc80      	pop	{r7}
 8006060:	4770      	bx	lr

08006062 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006062:	b480      	push	{r7}
 8006064:	b083      	sub	sp, #12
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2204      	movs	r2, #4
 800607a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	bc80      	pop	{r7}
 8006088:	4770      	bx	lr

0800608a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800608a:	b480      	push	{r7}
 800608c:	b083      	sub	sp, #12
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006098:	2b04      	cmp	r3, #4
 800609a:	d105      	bne.n	80060a8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bc80      	pop	{r7}
 80060b2:	4770      	bx	lr

080060b4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060c2:	2b03      	cmp	r3, #3
 80060c4:	d10b      	bne.n	80060de <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80060cc:	69db      	ldr	r3, [r3, #28]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d005      	beq.n	80060de <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80060d8:	69db      	ldr	r3, [r3, #28]
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3708      	adds	r7, #8
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80060f2:	2300      	movs	r3, #0
 80060f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80060fe:	2b40      	cmp	r3, #64	@ 0x40
 8006100:	d005      	beq.n	800610e <USBD_StdDevReq+0x26>
 8006102:	2b40      	cmp	r3, #64	@ 0x40
 8006104:	d84f      	bhi.n	80061a6 <USBD_StdDevReq+0xbe>
 8006106:	2b00      	cmp	r3, #0
 8006108:	d009      	beq.n	800611e <USBD_StdDevReq+0x36>
 800610a:	2b20      	cmp	r3, #32
 800610c:	d14b      	bne.n	80061a6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	6839      	ldr	r1, [r7, #0]
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	4798      	blx	r3
      break;
 800611c:	e048      	b.n	80061b0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	785b      	ldrb	r3, [r3, #1]
 8006122:	2b09      	cmp	r3, #9
 8006124:	d839      	bhi.n	800619a <USBD_StdDevReq+0xb2>
 8006126:	a201      	add	r2, pc, #4	@ (adr r2, 800612c <USBD_StdDevReq+0x44>)
 8006128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800612c:	0800617d 	.word	0x0800617d
 8006130:	08006191 	.word	0x08006191
 8006134:	0800619b 	.word	0x0800619b
 8006138:	08006187 	.word	0x08006187
 800613c:	0800619b 	.word	0x0800619b
 8006140:	0800615f 	.word	0x0800615f
 8006144:	08006155 	.word	0x08006155
 8006148:	0800619b 	.word	0x0800619b
 800614c:	08006173 	.word	0x08006173
 8006150:	08006169 	.word	0x08006169
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006154:	6839      	ldr	r1, [r7, #0]
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 f9dc 	bl	8006514 <USBD_GetDescriptor>
          break;
 800615c:	e022      	b.n	80061a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800615e:	6839      	ldr	r1, [r7, #0]
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 fb3f 	bl	80067e4 <USBD_SetAddress>
          break;
 8006166:	e01d      	b.n	80061a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006168:	6839      	ldr	r1, [r7, #0]
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 fb7e 	bl	800686c <USBD_SetConfig>
          break;
 8006170:	e018      	b.n	80061a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006172:	6839      	ldr	r1, [r7, #0]
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 fc07 	bl	8006988 <USBD_GetConfig>
          break;
 800617a:	e013      	b.n	80061a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800617c:	6839      	ldr	r1, [r7, #0]
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 fc37 	bl	80069f2 <USBD_GetStatus>
          break;
 8006184:	e00e      	b.n	80061a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006186:	6839      	ldr	r1, [r7, #0]
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 fc65 	bl	8006a58 <USBD_SetFeature>
          break;
 800618e:	e009      	b.n	80061a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006190:	6839      	ldr	r1, [r7, #0]
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 fc74 	bl	8006a80 <USBD_ClrFeature>
          break;
 8006198:	e004      	b.n	80061a4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800619a:	6839      	ldr	r1, [r7, #0]
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 fcc9 	bl	8006b34 <USBD_CtlError>
          break;
 80061a2:	bf00      	nop
      }
      break;
 80061a4:	e004      	b.n	80061b0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80061a6:	6839      	ldr	r1, [r7, #0]
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 fcc3 	bl	8006b34 <USBD_CtlError>
      break;
 80061ae:	bf00      	nop
  }

  return ret;
 80061b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop

080061bc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80061c6:	2300      	movs	r3, #0
 80061c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80061d2:	2b40      	cmp	r3, #64	@ 0x40
 80061d4:	d005      	beq.n	80061e2 <USBD_StdItfReq+0x26>
 80061d6:	2b40      	cmp	r3, #64	@ 0x40
 80061d8:	d82e      	bhi.n	8006238 <USBD_StdItfReq+0x7c>
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d001      	beq.n	80061e2 <USBD_StdItfReq+0x26>
 80061de:	2b20      	cmp	r3, #32
 80061e0:	d12a      	bne.n	8006238 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061e8:	3b01      	subs	r3, #1
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d81d      	bhi.n	800622a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	889b      	ldrh	r3, [r3, #4]
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d813      	bhi.n	8006220 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	6839      	ldr	r1, [r7, #0]
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	4798      	blx	r3
 8006206:	4603      	mov	r3, r0
 8006208:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	88db      	ldrh	r3, [r3, #6]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d110      	bne.n	8006234 <USBD_StdItfReq+0x78>
 8006212:	7bfb      	ldrb	r3, [r7, #15]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d10d      	bne.n	8006234 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 fd53 	bl	8006cc4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800621e:	e009      	b.n	8006234 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006220:	6839      	ldr	r1, [r7, #0]
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 fc86 	bl	8006b34 <USBD_CtlError>
          break;
 8006228:	e004      	b.n	8006234 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800622a:	6839      	ldr	r1, [r7, #0]
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 fc81 	bl	8006b34 <USBD_CtlError>
          break;
 8006232:	e000      	b.n	8006236 <USBD_StdItfReq+0x7a>
          break;
 8006234:	bf00      	nop
      }
      break;
 8006236:	e004      	b.n	8006242 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006238:	6839      	ldr	r1, [r7, #0]
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 fc7a 	bl	8006b34 <USBD_CtlError>
      break;
 8006240:	bf00      	nop
  }

  return USBD_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3710      	adds	r7, #16
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006256:	2300      	movs	r3, #0
 8006258:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	889b      	ldrh	r3, [r3, #4]
 800625e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006268:	2b40      	cmp	r3, #64	@ 0x40
 800626a:	d007      	beq.n	800627c <USBD_StdEPReq+0x30>
 800626c:	2b40      	cmp	r3, #64	@ 0x40
 800626e:	f200 8146 	bhi.w	80064fe <USBD_StdEPReq+0x2b2>
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00a      	beq.n	800628c <USBD_StdEPReq+0x40>
 8006276:	2b20      	cmp	r3, #32
 8006278:	f040 8141 	bne.w	80064fe <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	6839      	ldr	r1, [r7, #0]
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	4798      	blx	r3
      break;
 800628a:	e13d      	b.n	8006508 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006294:	2b20      	cmp	r3, #32
 8006296:	d10a      	bne.n	80062ae <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	6839      	ldr	r1, [r7, #0]
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	4798      	blx	r3
 80062a6:	4603      	mov	r3, r0
 80062a8:	73fb      	strb	r3, [r7, #15]

        return ret;
 80062aa:	7bfb      	ldrb	r3, [r7, #15]
 80062ac:	e12d      	b.n	800650a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	785b      	ldrb	r3, [r3, #1]
 80062b2:	2b03      	cmp	r3, #3
 80062b4:	d007      	beq.n	80062c6 <USBD_StdEPReq+0x7a>
 80062b6:	2b03      	cmp	r3, #3
 80062b8:	f300 811b 	bgt.w	80064f2 <USBD_StdEPReq+0x2a6>
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d072      	beq.n	80063a6 <USBD_StdEPReq+0x15a>
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d03a      	beq.n	800633a <USBD_StdEPReq+0xee>
 80062c4:	e115      	b.n	80064f2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d002      	beq.n	80062d6 <USBD_StdEPReq+0x8a>
 80062d0:	2b03      	cmp	r3, #3
 80062d2:	d015      	beq.n	8006300 <USBD_StdEPReq+0xb4>
 80062d4:	e02b      	b.n	800632e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80062d6:	7bbb      	ldrb	r3, [r7, #14]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00c      	beq.n	80062f6 <USBD_StdEPReq+0xaa>
 80062dc:	7bbb      	ldrb	r3, [r7, #14]
 80062de:	2b80      	cmp	r3, #128	@ 0x80
 80062e0:	d009      	beq.n	80062f6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80062e2:	7bbb      	ldrb	r3, [r7, #14]
 80062e4:	4619      	mov	r1, r3
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 ffea 	bl	80072c0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80062ec:	2180      	movs	r1, #128	@ 0x80
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 ffe6 	bl	80072c0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80062f4:	e020      	b.n	8006338 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80062f6:	6839      	ldr	r1, [r7, #0]
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 fc1b 	bl	8006b34 <USBD_CtlError>
              break;
 80062fe:	e01b      	b.n	8006338 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	885b      	ldrh	r3, [r3, #2]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d10e      	bne.n	8006326 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006308:	7bbb      	ldrb	r3, [r7, #14]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00b      	beq.n	8006326 <USBD_StdEPReq+0xda>
 800630e:	7bbb      	ldrb	r3, [r7, #14]
 8006310:	2b80      	cmp	r3, #128	@ 0x80
 8006312:	d008      	beq.n	8006326 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	88db      	ldrh	r3, [r3, #6]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d104      	bne.n	8006326 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800631c:	7bbb      	ldrb	r3, [r7, #14]
 800631e:	4619      	mov	r1, r3
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 ffcd 	bl	80072c0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 fccc 	bl	8006cc4 <USBD_CtlSendStatus>

              break;
 800632c:	e004      	b.n	8006338 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800632e:	6839      	ldr	r1, [r7, #0]
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fbff 	bl	8006b34 <USBD_CtlError>
              break;
 8006336:	bf00      	nop
          }
          break;
 8006338:	e0e0      	b.n	80064fc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006340:	2b02      	cmp	r3, #2
 8006342:	d002      	beq.n	800634a <USBD_StdEPReq+0xfe>
 8006344:	2b03      	cmp	r3, #3
 8006346:	d015      	beq.n	8006374 <USBD_StdEPReq+0x128>
 8006348:	e026      	b.n	8006398 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800634a:	7bbb      	ldrb	r3, [r7, #14]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00c      	beq.n	800636a <USBD_StdEPReq+0x11e>
 8006350:	7bbb      	ldrb	r3, [r7, #14]
 8006352:	2b80      	cmp	r3, #128	@ 0x80
 8006354:	d009      	beq.n	800636a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006356:	7bbb      	ldrb	r3, [r7, #14]
 8006358:	4619      	mov	r1, r3
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 ffb0 	bl	80072c0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006360:	2180      	movs	r1, #128	@ 0x80
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 ffac 	bl	80072c0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006368:	e01c      	b.n	80063a4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800636a:	6839      	ldr	r1, [r7, #0]
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 fbe1 	bl	8006b34 <USBD_CtlError>
              break;
 8006372:	e017      	b.n	80063a4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	885b      	ldrh	r3, [r3, #2]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d112      	bne.n	80063a2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800637c:	7bbb      	ldrb	r3, [r7, #14]
 800637e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006382:	2b00      	cmp	r3, #0
 8006384:	d004      	beq.n	8006390 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006386:	7bbb      	ldrb	r3, [r7, #14]
 8006388:	4619      	mov	r1, r3
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 ffb7 	bl	80072fe <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 fc97 	bl	8006cc4 <USBD_CtlSendStatus>
              }
              break;
 8006396:	e004      	b.n	80063a2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006398:	6839      	ldr	r1, [r7, #0]
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 fbca 	bl	8006b34 <USBD_CtlError>
              break;
 80063a0:	e000      	b.n	80063a4 <USBD_StdEPReq+0x158>
              break;
 80063a2:	bf00      	nop
          }
          break;
 80063a4:	e0aa      	b.n	80064fc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d002      	beq.n	80063b6 <USBD_StdEPReq+0x16a>
 80063b0:	2b03      	cmp	r3, #3
 80063b2:	d032      	beq.n	800641a <USBD_StdEPReq+0x1ce>
 80063b4:	e097      	b.n	80064e6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063b6:	7bbb      	ldrb	r3, [r7, #14]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d007      	beq.n	80063cc <USBD_StdEPReq+0x180>
 80063bc:	7bbb      	ldrb	r3, [r7, #14]
 80063be:	2b80      	cmp	r3, #128	@ 0x80
 80063c0:	d004      	beq.n	80063cc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80063c2:	6839      	ldr	r1, [r7, #0]
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 fbb5 	bl	8006b34 <USBD_CtlError>
                break;
 80063ca:	e091      	b.n	80064f0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	da0b      	bge.n	80063ec <USBD_StdEPReq+0x1a0>
 80063d4:	7bbb      	ldrb	r3, [r7, #14]
 80063d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80063da:	4613      	mov	r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4413      	add	r3, r2
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	3310      	adds	r3, #16
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	4413      	add	r3, r2
 80063e8:	3304      	adds	r3, #4
 80063ea:	e00b      	b.n	8006404 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80063ec:	7bbb      	ldrb	r3, [r7, #14]
 80063ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063f2:	4613      	mov	r3, r2
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	4413      	add	r3, r2
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	4413      	add	r3, r2
 8006402:	3304      	adds	r3, #4
 8006404:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	2200      	movs	r2, #0
 800640a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	2202      	movs	r2, #2
 8006410:	4619      	mov	r1, r3
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 fbf8 	bl	8006c08 <USBD_CtlSendData>
              break;
 8006418:	e06a      	b.n	80064f0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800641a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800641e:	2b00      	cmp	r3, #0
 8006420:	da11      	bge.n	8006446 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006422:	7bbb      	ldrb	r3, [r7, #14]
 8006424:	f003 020f 	and.w	r2, r3, #15
 8006428:	6879      	ldr	r1, [r7, #4]
 800642a:	4613      	mov	r3, r2
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4413      	add	r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	440b      	add	r3, r1
 8006434:	3318      	adds	r3, #24
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d117      	bne.n	800646c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800643c:	6839      	ldr	r1, [r7, #0]
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 fb78 	bl	8006b34 <USBD_CtlError>
                  break;
 8006444:	e054      	b.n	80064f0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006446:	7bbb      	ldrb	r3, [r7, #14]
 8006448:	f003 020f 	and.w	r2, r3, #15
 800644c:	6879      	ldr	r1, [r7, #4]
 800644e:	4613      	mov	r3, r2
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	4413      	add	r3, r2
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	440b      	add	r3, r1
 8006458:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d104      	bne.n	800646c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006462:	6839      	ldr	r1, [r7, #0]
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 fb65 	bl	8006b34 <USBD_CtlError>
                  break;
 800646a:	e041      	b.n	80064f0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800646c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006470:	2b00      	cmp	r3, #0
 8006472:	da0b      	bge.n	800648c <USBD_StdEPReq+0x240>
 8006474:	7bbb      	ldrb	r3, [r7, #14]
 8006476:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800647a:	4613      	mov	r3, r2
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	4413      	add	r3, r2
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	3310      	adds	r3, #16
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	4413      	add	r3, r2
 8006488:	3304      	adds	r3, #4
 800648a:	e00b      	b.n	80064a4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800648c:	7bbb      	ldrb	r3, [r7, #14]
 800648e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006492:	4613      	mov	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4413      	add	r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	4413      	add	r3, r2
 80064a2:	3304      	adds	r3, #4
 80064a4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80064a6:	7bbb      	ldrb	r3, [r7, #14]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d002      	beq.n	80064b2 <USBD_StdEPReq+0x266>
 80064ac:	7bbb      	ldrb	r3, [r7, #14]
 80064ae:	2b80      	cmp	r3, #128	@ 0x80
 80064b0:	d103      	bne.n	80064ba <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	2200      	movs	r2, #0
 80064b6:	601a      	str	r2, [r3, #0]
 80064b8:	e00e      	b.n	80064d8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80064ba:	7bbb      	ldrb	r3, [r7, #14]
 80064bc:	4619      	mov	r1, r3
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 ff3c 	bl	800733c <USBD_LL_IsStallEP>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d003      	beq.n	80064d2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	2201      	movs	r2, #1
 80064ce:	601a      	str	r2, [r3, #0]
 80064d0:	e002      	b.n	80064d8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	2200      	movs	r2, #0
 80064d6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	2202      	movs	r2, #2
 80064dc:	4619      	mov	r1, r3
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 fb92 	bl	8006c08 <USBD_CtlSendData>
              break;
 80064e4:	e004      	b.n	80064f0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80064e6:	6839      	ldr	r1, [r7, #0]
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 fb23 	bl	8006b34 <USBD_CtlError>
              break;
 80064ee:	bf00      	nop
          }
          break;
 80064f0:	e004      	b.n	80064fc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80064f2:	6839      	ldr	r1, [r7, #0]
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 fb1d 	bl	8006b34 <USBD_CtlError>
          break;
 80064fa:	bf00      	nop
      }
      break;
 80064fc:	e004      	b.n	8006508 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80064fe:	6839      	ldr	r1, [r7, #0]
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 fb17 	bl	8006b34 <USBD_CtlError>
      break;
 8006506:	bf00      	nop
  }

  return ret;
 8006508:	7bfb      	ldrb	r3, [r7, #15]
}
 800650a:	4618      	mov	r0, r3
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
	...

08006514 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800651e:	2300      	movs	r3, #0
 8006520:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006522:	2300      	movs	r3, #0
 8006524:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006526:	2300      	movs	r3, #0
 8006528:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	885b      	ldrh	r3, [r3, #2]
 800652e:	0a1b      	lsrs	r3, r3, #8
 8006530:	b29b      	uxth	r3, r3
 8006532:	3b01      	subs	r3, #1
 8006534:	2b06      	cmp	r3, #6
 8006536:	f200 8128 	bhi.w	800678a <USBD_GetDescriptor+0x276>
 800653a:	a201      	add	r2, pc, #4	@ (adr r2, 8006540 <USBD_GetDescriptor+0x2c>)
 800653c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006540:	0800655d 	.word	0x0800655d
 8006544:	08006575 	.word	0x08006575
 8006548:	080065b5 	.word	0x080065b5
 800654c:	0800678b 	.word	0x0800678b
 8006550:	0800678b 	.word	0x0800678b
 8006554:	0800672b 	.word	0x0800672b
 8006558:	08006757 	.word	0x08006757
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	7c12      	ldrb	r2, [r2, #16]
 8006568:	f107 0108 	add.w	r1, r7, #8
 800656c:	4610      	mov	r0, r2
 800656e:	4798      	blx	r3
 8006570:	60f8      	str	r0, [r7, #12]
      break;
 8006572:	e112      	b.n	800679a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	7c1b      	ldrb	r3, [r3, #16]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d10d      	bne.n	8006598 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006584:	f107 0208 	add.w	r2, r7, #8
 8006588:	4610      	mov	r0, r2
 800658a:	4798      	blx	r3
 800658c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	3301      	adds	r3, #1
 8006592:	2202      	movs	r2, #2
 8006594:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006596:	e100      	b.n	800679a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800659e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a0:	f107 0208 	add.w	r2, r7, #8
 80065a4:	4610      	mov	r0, r2
 80065a6:	4798      	blx	r3
 80065a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	3301      	adds	r3, #1
 80065ae:	2202      	movs	r2, #2
 80065b0:	701a      	strb	r2, [r3, #0]
      break;
 80065b2:	e0f2      	b.n	800679a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	885b      	ldrh	r3, [r3, #2]
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	2b05      	cmp	r3, #5
 80065bc:	f200 80ac 	bhi.w	8006718 <USBD_GetDescriptor+0x204>
 80065c0:	a201      	add	r2, pc, #4	@ (adr r2, 80065c8 <USBD_GetDescriptor+0xb4>)
 80065c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c6:	bf00      	nop
 80065c8:	080065e1 	.word	0x080065e1
 80065cc:	08006615 	.word	0x08006615
 80065d0:	08006649 	.word	0x08006649
 80065d4:	0800667d 	.word	0x0800667d
 80065d8:	080066b1 	.word	0x080066b1
 80065dc:	080066e5 	.word	0x080066e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00b      	beq.n	8006604 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	7c12      	ldrb	r2, [r2, #16]
 80065f8:	f107 0108 	add.w	r1, r7, #8
 80065fc:	4610      	mov	r0, r2
 80065fe:	4798      	blx	r3
 8006600:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006602:	e091      	b.n	8006728 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006604:	6839      	ldr	r1, [r7, #0]
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 fa94 	bl	8006b34 <USBD_CtlError>
            err++;
 800660c:	7afb      	ldrb	r3, [r7, #11]
 800660e:	3301      	adds	r3, #1
 8006610:	72fb      	strb	r3, [r7, #11]
          break;
 8006612:	e089      	b.n	8006728 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00b      	beq.n	8006638 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	7c12      	ldrb	r2, [r2, #16]
 800662c:	f107 0108 	add.w	r1, r7, #8
 8006630:	4610      	mov	r0, r2
 8006632:	4798      	blx	r3
 8006634:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006636:	e077      	b.n	8006728 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006638:	6839      	ldr	r1, [r7, #0]
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 fa7a 	bl	8006b34 <USBD_CtlError>
            err++;
 8006640:	7afb      	ldrb	r3, [r7, #11]
 8006642:	3301      	adds	r3, #1
 8006644:	72fb      	strb	r3, [r7, #11]
          break;
 8006646:	e06f      	b.n	8006728 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00b      	beq.n	800666c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	7c12      	ldrb	r2, [r2, #16]
 8006660:	f107 0108 	add.w	r1, r7, #8
 8006664:	4610      	mov	r0, r2
 8006666:	4798      	blx	r3
 8006668:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800666a:	e05d      	b.n	8006728 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800666c:	6839      	ldr	r1, [r7, #0]
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 fa60 	bl	8006b34 <USBD_CtlError>
            err++;
 8006674:	7afb      	ldrb	r3, [r7, #11]
 8006676:	3301      	adds	r3, #1
 8006678:	72fb      	strb	r3, [r7, #11]
          break;
 800667a:	e055      	b.n	8006728 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00b      	beq.n	80066a0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	7c12      	ldrb	r2, [r2, #16]
 8006694:	f107 0108 	add.w	r1, r7, #8
 8006698:	4610      	mov	r0, r2
 800669a:	4798      	blx	r3
 800669c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800669e:	e043      	b.n	8006728 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066a0:	6839      	ldr	r1, [r7, #0]
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 fa46 	bl	8006b34 <USBD_CtlError>
            err++;
 80066a8:	7afb      	ldrb	r3, [r7, #11]
 80066aa:	3301      	adds	r3, #1
 80066ac:	72fb      	strb	r3, [r7, #11]
          break;
 80066ae:	e03b      	b.n	8006728 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80066b6:	695b      	ldr	r3, [r3, #20]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00b      	beq.n	80066d4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80066c2:	695b      	ldr	r3, [r3, #20]
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	7c12      	ldrb	r2, [r2, #16]
 80066c8:	f107 0108 	add.w	r1, r7, #8
 80066cc:	4610      	mov	r0, r2
 80066ce:	4798      	blx	r3
 80066d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066d2:	e029      	b.n	8006728 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066d4:	6839      	ldr	r1, [r7, #0]
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 fa2c 	bl	8006b34 <USBD_CtlError>
            err++;
 80066dc:	7afb      	ldrb	r3, [r7, #11]
 80066de:	3301      	adds	r3, #1
 80066e0:	72fb      	strb	r3, [r7, #11]
          break;
 80066e2:	e021      	b.n	8006728 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00b      	beq.n	8006708 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80066f6:	699b      	ldr	r3, [r3, #24]
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	7c12      	ldrb	r2, [r2, #16]
 80066fc:	f107 0108 	add.w	r1, r7, #8
 8006700:	4610      	mov	r0, r2
 8006702:	4798      	blx	r3
 8006704:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006706:	e00f      	b.n	8006728 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006708:	6839      	ldr	r1, [r7, #0]
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 fa12 	bl	8006b34 <USBD_CtlError>
            err++;
 8006710:	7afb      	ldrb	r3, [r7, #11]
 8006712:	3301      	adds	r3, #1
 8006714:	72fb      	strb	r3, [r7, #11]
          break;
 8006716:	e007      	b.n	8006728 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006718:	6839      	ldr	r1, [r7, #0]
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 fa0a 	bl	8006b34 <USBD_CtlError>
          err++;
 8006720:	7afb      	ldrb	r3, [r7, #11]
 8006722:	3301      	adds	r3, #1
 8006724:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006726:	e038      	b.n	800679a <USBD_GetDescriptor+0x286>
 8006728:	e037      	b.n	800679a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	7c1b      	ldrb	r3, [r3, #16]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d109      	bne.n	8006746 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006738:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800673a:	f107 0208 	add.w	r2, r7, #8
 800673e:	4610      	mov	r0, r2
 8006740:	4798      	blx	r3
 8006742:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006744:	e029      	b.n	800679a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006746:	6839      	ldr	r1, [r7, #0]
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 f9f3 	bl	8006b34 <USBD_CtlError>
        err++;
 800674e:	7afb      	ldrb	r3, [r7, #11]
 8006750:	3301      	adds	r3, #1
 8006752:	72fb      	strb	r3, [r7, #11]
      break;
 8006754:	e021      	b.n	800679a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	7c1b      	ldrb	r3, [r3, #16]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10d      	bne.n	800677a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006766:	f107 0208 	add.w	r2, r7, #8
 800676a:	4610      	mov	r0, r2
 800676c:	4798      	blx	r3
 800676e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	3301      	adds	r3, #1
 8006774:	2207      	movs	r2, #7
 8006776:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006778:	e00f      	b.n	800679a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800677a:	6839      	ldr	r1, [r7, #0]
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 f9d9 	bl	8006b34 <USBD_CtlError>
        err++;
 8006782:	7afb      	ldrb	r3, [r7, #11]
 8006784:	3301      	adds	r3, #1
 8006786:	72fb      	strb	r3, [r7, #11]
      break;
 8006788:	e007      	b.n	800679a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800678a:	6839      	ldr	r1, [r7, #0]
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 f9d1 	bl	8006b34 <USBD_CtlError>
      err++;
 8006792:	7afb      	ldrb	r3, [r7, #11]
 8006794:	3301      	adds	r3, #1
 8006796:	72fb      	strb	r3, [r7, #11]
      break;
 8006798:	bf00      	nop
  }

  if (err != 0U)
 800679a:	7afb      	ldrb	r3, [r7, #11]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d11c      	bne.n	80067da <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80067a0:	893b      	ldrh	r3, [r7, #8]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d011      	beq.n	80067ca <USBD_GetDescriptor+0x2b6>
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	88db      	ldrh	r3, [r3, #6]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00d      	beq.n	80067ca <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	88da      	ldrh	r2, [r3, #6]
 80067b2:	893b      	ldrh	r3, [r7, #8]
 80067b4:	4293      	cmp	r3, r2
 80067b6:	bf28      	it	cs
 80067b8:	4613      	movcs	r3, r2
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80067be:	893b      	ldrh	r3, [r7, #8]
 80067c0:	461a      	mov	r2, r3
 80067c2:	68f9      	ldr	r1, [r7, #12]
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 fa1f 	bl	8006c08 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	88db      	ldrh	r3, [r3, #6]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d104      	bne.n	80067dc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 fa76 	bl	8006cc4 <USBD_CtlSendStatus>
 80067d8:	e000      	b.n	80067dc <USBD_GetDescriptor+0x2c8>
    return;
 80067da:	bf00      	nop
    }
  }
}
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop

080067e4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	889b      	ldrh	r3, [r3, #4]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d130      	bne.n	8006858 <USBD_SetAddress+0x74>
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	88db      	ldrh	r3, [r3, #6]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d12c      	bne.n	8006858 <USBD_SetAddress+0x74>
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	885b      	ldrh	r3, [r3, #2]
 8006802:	2b7f      	cmp	r3, #127	@ 0x7f
 8006804:	d828      	bhi.n	8006858 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	885b      	ldrh	r3, [r3, #2]
 800680a:	b2db      	uxtb	r3, r3
 800680c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006810:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006818:	2b03      	cmp	r3, #3
 800681a:	d104      	bne.n	8006826 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800681c:	6839      	ldr	r1, [r7, #0]
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 f988 	bl	8006b34 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006824:	e01d      	b.n	8006862 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	7bfa      	ldrb	r2, [r7, #15]
 800682a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800682e:	7bfb      	ldrb	r3, [r7, #15]
 8006830:	4619      	mov	r1, r3
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fdae 	bl	8007394 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 fa43 	bl	8006cc4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800683e:	7bfb      	ldrb	r3, [r7, #15]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d004      	beq.n	800684e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2202      	movs	r2, #2
 8006848:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800684c:	e009      	b.n	8006862 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006856:	e004      	b.n	8006862 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006858:	6839      	ldr	r1, [r7, #0]
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 f96a 	bl	8006b34 <USBD_CtlError>
  }
}
 8006860:	bf00      	nop
 8006862:	bf00      	nop
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
	...

0800686c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	885b      	ldrh	r3, [r3, #2]
 800687a:	b2da      	uxtb	r2, r3
 800687c:	4b41      	ldr	r3, [pc, #260]	@ (8006984 <USBD_SetConfig+0x118>)
 800687e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006880:	4b40      	ldr	r3, [pc, #256]	@ (8006984 <USBD_SetConfig+0x118>)
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d904      	bls.n	8006892 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006888:	6839      	ldr	r1, [r7, #0]
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 f952 	bl	8006b34 <USBD_CtlError>
 8006890:	e075      	b.n	800697e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006898:	2b02      	cmp	r3, #2
 800689a:	d002      	beq.n	80068a2 <USBD_SetConfig+0x36>
 800689c:	2b03      	cmp	r3, #3
 800689e:	d023      	beq.n	80068e8 <USBD_SetConfig+0x7c>
 80068a0:	e062      	b.n	8006968 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80068a2:	4b38      	ldr	r3, [pc, #224]	@ (8006984 <USBD_SetConfig+0x118>)
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d01a      	beq.n	80068e0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80068aa:	4b36      	ldr	r3, [pc, #216]	@ (8006984 <USBD_SetConfig+0x118>)
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	461a      	mov	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2203      	movs	r2, #3
 80068b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80068bc:	4b31      	ldr	r3, [pc, #196]	@ (8006984 <USBD_SetConfig+0x118>)
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	4619      	mov	r1, r3
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f7ff f9e8 	bl	8005c98 <USBD_SetClassConfig>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d104      	bne.n	80068d8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80068ce:	6839      	ldr	r1, [r7, #0]
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 f92f 	bl	8006b34 <USBD_CtlError>
            return;
 80068d6:	e052      	b.n	800697e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 f9f3 	bl	8006cc4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80068de:	e04e      	b.n	800697e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 f9ef 	bl	8006cc4 <USBD_CtlSendStatus>
        break;
 80068e6:	e04a      	b.n	800697e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80068e8:	4b26      	ldr	r3, [pc, #152]	@ (8006984 <USBD_SetConfig+0x118>)
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d112      	bne.n	8006916 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2202      	movs	r2, #2
 80068f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80068f8:	4b22      	ldr	r3, [pc, #136]	@ (8006984 <USBD_SetConfig+0x118>)
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	461a      	mov	r2, r3
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006902:	4b20      	ldr	r3, [pc, #128]	@ (8006984 <USBD_SetConfig+0x118>)
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	4619      	mov	r1, r3
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f7ff f9e4 	bl	8005cd6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f9d8 	bl	8006cc4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006914:	e033      	b.n	800697e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006916:	4b1b      	ldr	r3, [pc, #108]	@ (8006984 <USBD_SetConfig+0x118>)
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	461a      	mov	r2, r3
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	429a      	cmp	r2, r3
 8006922:	d01d      	beq.n	8006960 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	b2db      	uxtb	r3, r3
 800692a:	4619      	mov	r1, r3
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f7ff f9d2 	bl	8005cd6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006932:	4b14      	ldr	r3, [pc, #80]	@ (8006984 <USBD_SetConfig+0x118>)
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	461a      	mov	r2, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800693c:	4b11      	ldr	r3, [pc, #68]	@ (8006984 <USBD_SetConfig+0x118>)
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	4619      	mov	r1, r3
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f7ff f9a8 	bl	8005c98 <USBD_SetClassConfig>
 8006948:	4603      	mov	r3, r0
 800694a:	2b02      	cmp	r3, #2
 800694c:	d104      	bne.n	8006958 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800694e:	6839      	ldr	r1, [r7, #0]
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 f8ef 	bl	8006b34 <USBD_CtlError>
            return;
 8006956:	e012      	b.n	800697e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 f9b3 	bl	8006cc4 <USBD_CtlSendStatus>
        break;
 800695e:	e00e      	b.n	800697e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 f9af 	bl	8006cc4 <USBD_CtlSendStatus>
        break;
 8006966:	e00a      	b.n	800697e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006968:	6839      	ldr	r1, [r7, #0]
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f8e2 	bl	8006b34 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006970:	4b04      	ldr	r3, [pc, #16]	@ (8006984 <USBD_SetConfig+0x118>)
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	4619      	mov	r1, r3
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7ff f9ad 	bl	8005cd6 <USBD_ClrClassConfig>
        break;
 800697c:	bf00      	nop
    }
  }
}
 800697e:	3708      	adds	r7, #8
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	200001a0 	.word	0x200001a0

08006988 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	88db      	ldrh	r3, [r3, #6]
 8006996:	2b01      	cmp	r3, #1
 8006998:	d004      	beq.n	80069a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800699a:	6839      	ldr	r1, [r7, #0]
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 f8c9 	bl	8006b34 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80069a2:	e022      	b.n	80069ea <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	dc02      	bgt.n	80069b4 <USBD_GetConfig+0x2c>
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	dc03      	bgt.n	80069ba <USBD_GetConfig+0x32>
 80069b2:	e015      	b.n	80069e0 <USBD_GetConfig+0x58>
 80069b4:	2b03      	cmp	r3, #3
 80069b6:	d00b      	beq.n	80069d0 <USBD_GetConfig+0x48>
 80069b8:	e012      	b.n	80069e0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	3308      	adds	r3, #8
 80069c4:	2201      	movs	r2, #1
 80069c6:	4619      	mov	r1, r3
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 f91d 	bl	8006c08 <USBD_CtlSendData>
        break;
 80069ce:	e00c      	b.n	80069ea <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	3304      	adds	r3, #4
 80069d4:	2201      	movs	r2, #1
 80069d6:	4619      	mov	r1, r3
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 f915 	bl	8006c08 <USBD_CtlSendData>
        break;
 80069de:	e004      	b.n	80069ea <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80069e0:	6839      	ldr	r1, [r7, #0]
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 f8a6 	bl	8006b34 <USBD_CtlError>
        break;
 80069e8:	bf00      	nop
}
 80069ea:	bf00      	nop
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b082      	sub	sp, #8
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
 80069fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a02:	3b01      	subs	r3, #1
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d81e      	bhi.n	8006a46 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	88db      	ldrh	r3, [r3, #6]
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d004      	beq.n	8006a1a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006a10:	6839      	ldr	r1, [r7, #0]
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f88e 	bl	8006b34 <USBD_CtlError>
        break;
 8006a18:	e01a      	b.n	8006a50 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d005      	beq.n	8006a36 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	f043 0202 	orr.w	r2, r3, #2
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	330c      	adds	r3, #12
 8006a3a:	2202      	movs	r2, #2
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f8e2 	bl	8006c08 <USBD_CtlSendData>
      break;
 8006a44:	e004      	b.n	8006a50 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006a46:	6839      	ldr	r1, [r7, #0]
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 f873 	bl	8006b34 <USBD_CtlError>
      break;
 8006a4e:	bf00      	nop
  }
}
 8006a50:	bf00      	nop
 8006a52:	3708      	adds	r7, #8
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	885b      	ldrh	r3, [r3, #2]
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d106      	bne.n	8006a78 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f926 	bl	8006cc4 <USBD_CtlSendStatus>
  }
}
 8006a78:	bf00      	nop
 8006a7a:	3708      	adds	r7, #8
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a90:	3b01      	subs	r3, #1
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d80b      	bhi.n	8006aae <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	885b      	ldrh	r3, [r3, #2]
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d10c      	bne.n	8006ab8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f90c 	bl	8006cc4 <USBD_CtlSendStatus>
      }
      break;
 8006aac:	e004      	b.n	8006ab8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006aae:	6839      	ldr	r1, [r7, #0]
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 f83f 	bl	8006b34 <USBD_CtlError>
      break;
 8006ab6:	e000      	b.n	8006aba <USBD_ClrFeature+0x3a>
      break;
 8006ab8:	bf00      	nop
  }
}
 8006aba:	bf00      	nop
 8006abc:	3708      	adds	r7, #8
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006ac2:	b480      	push	{r7}
 8006ac4:	b083      	sub	sp, #12
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
 8006aca:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	781a      	ldrb	r2, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	785a      	ldrb	r2, [r3, #1]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	3302      	adds	r3, #2
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	3303      	adds	r3, #3
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	021b      	lsls	r3, r3, #8
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	4413      	add	r3, r2
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	3304      	adds	r3, #4
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	461a      	mov	r2, r3
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	3305      	adds	r3, #5
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	021b      	lsls	r3, r3, #8
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	4413      	add	r3, r2
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	3306      	adds	r3, #6
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	461a      	mov	r2, r3
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	3307      	adds	r3, #7
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	021b      	lsls	r3, r3, #8
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	4413      	add	r3, r2
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	80da      	strh	r2, [r3, #6]

}
 8006b2a:	bf00      	nop
 8006b2c:	370c      	adds	r7, #12
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bc80      	pop	{r7}
 8006b32:	4770      	bx	lr

08006b34 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006b3e:	2180      	movs	r1, #128	@ 0x80
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 fbbd 	bl	80072c0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006b46:	2100      	movs	r1, #0
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 fbb9 	bl	80072c0 <USBD_LL_StallEP>
}
 8006b4e:	bf00      	nop
 8006b50:	3708      	adds	r7, #8
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b086      	sub	sp, #24
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	60f8      	str	r0, [r7, #12]
 8006b5e:	60b9      	str	r1, [r7, #8]
 8006b60:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006b62:	2300      	movs	r3, #0
 8006b64:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d032      	beq.n	8006bd2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f000 f834 	bl	8006bda <USBD_GetLen>
 8006b72:	4603      	mov	r3, r0
 8006b74:	3301      	adds	r3, #1
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	005b      	lsls	r3, r3, #1
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006b80:	7dfb      	ldrb	r3, [r7, #23]
 8006b82:	1c5a      	adds	r2, r3, #1
 8006b84:	75fa      	strb	r2, [r7, #23]
 8006b86:	461a      	mov	r2, r3
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	7812      	ldrb	r2, [r2, #0]
 8006b90:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006b92:	7dfb      	ldrb	r3, [r7, #23]
 8006b94:	1c5a      	adds	r2, r3, #1
 8006b96:	75fa      	strb	r2, [r7, #23]
 8006b98:	461a      	mov	r2, r3
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	2203      	movs	r2, #3
 8006ba0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006ba2:	e012      	b.n	8006bca <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	1c5a      	adds	r2, r3, #1
 8006ba8:	60fa      	str	r2, [r7, #12]
 8006baa:	7dfa      	ldrb	r2, [r7, #23]
 8006bac:	1c51      	adds	r1, r2, #1
 8006bae:	75f9      	strb	r1, [r7, #23]
 8006bb0:	4611      	mov	r1, r2
 8006bb2:	68ba      	ldr	r2, [r7, #8]
 8006bb4:	440a      	add	r2, r1
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006bba:	7dfb      	ldrb	r3, [r7, #23]
 8006bbc:	1c5a      	adds	r2, r3, #1
 8006bbe:	75fa      	strb	r2, [r7, #23]
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1e8      	bne.n	8006ba4 <USBD_GetString+0x4e>
    }
  }
}
 8006bd2:	bf00      	nop
 8006bd4:	3718      	adds	r7, #24
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006bda:	b480      	push	{r7}
 8006bdc:	b085      	sub	sp, #20
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006be2:	2300      	movs	r3, #0
 8006be4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006be6:	e005      	b.n	8006bf4 <USBD_GetLen+0x1a>
  {
    len++;
 8006be8:	7bfb      	ldrb	r3, [r7, #15]
 8006bea:	3301      	adds	r3, #1
 8006bec:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d1f5      	bne.n	8006be8 <USBD_GetLen+0xe>
  }

  return len;
 8006bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3714      	adds	r7, #20
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bc80      	pop	{r7}
 8006c06:	4770      	bx	lr

08006c08 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	4613      	mov	r3, r2
 8006c14:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2202      	movs	r2, #2
 8006c1a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006c1e:	88fa      	ldrh	r2, [r7, #6]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006c24:	88fa      	ldrh	r2, [r7, #6]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006c2a:	88fb      	ldrh	r3, [r7, #6]
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	2100      	movs	r1, #0
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f000 fbce 	bl	80073d2 <USBD_LL_Transmit>

  return USBD_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3710      	adds	r7, #16
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006c4e:	88fb      	ldrh	r3, [r7, #6]
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	2100      	movs	r1, #0
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f000 fbbc 	bl	80073d2 <USBD_LL_Transmit>

  return USBD_OK;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3710      	adds	r7, #16
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	4613      	mov	r3, r2
 8006c70:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2203      	movs	r2, #3
 8006c76:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006c7a:	88fa      	ldrh	r2, [r7, #6]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006c82:	88fa      	ldrh	r2, [r7, #6]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006c8a:	88fb      	ldrh	r3, [r7, #6]
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	2100      	movs	r1, #0
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f000 fbc1 	bl	8007418 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	4613      	mov	r3, r2
 8006cac:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006cae:	88fb      	ldrh	r3, [r7, #6]
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f000 fbaf 	bl	8007418 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3710      	adds	r7, #16
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2204      	movs	r2, #4
 8006cd0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	2100      	movs	r1, #0
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 fb79 	bl	80073d2 <USBD_LL_Transmit>

  return USBD_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3708      	adds	r7, #8
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b082      	sub	sp, #8
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2205      	movs	r2, #5
 8006cf6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	2100      	movs	r1, #0
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 fb89 	bl	8007418 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3708      	adds	r7, #8
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006d14:	2200      	movs	r2, #0
 8006d16:	4912      	ldr	r1, [pc, #72]	@ (8006d60 <MX_USB_DEVICE_Init+0x50>)
 8006d18:	4812      	ldr	r0, [pc, #72]	@ (8006d64 <MX_USB_DEVICE_Init+0x54>)
 8006d1a:	f7fe ff63 	bl	8005be4 <USBD_Init>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d001      	beq.n	8006d28 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006d24:	f7f9 fb3a 	bl	800039c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8006d28:	490f      	ldr	r1, [pc, #60]	@ (8006d68 <MX_USB_DEVICE_Init+0x58>)
 8006d2a:	480e      	ldr	r0, [pc, #56]	@ (8006d64 <MX_USB_DEVICE_Init+0x54>)
 8006d2c:	f7fe ff85 	bl	8005c3a <USBD_RegisterClass>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d001      	beq.n	8006d3a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006d36:	f7f9 fb31 	bl	800039c <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8006d3a:	490c      	ldr	r1, [pc, #48]	@ (8006d6c <MX_USB_DEVICE_Init+0x5c>)
 8006d3c:	4809      	ldr	r0, [pc, #36]	@ (8006d64 <MX_USB_DEVICE_Init+0x54>)
 8006d3e:	f7fe ff3b 	bl	8005bb8 <USBD_CUSTOM_HID_RegisterInterface>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d001      	beq.n	8006d4c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006d48:	f7f9 fb28 	bl	800039c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006d4c:	4805      	ldr	r0, [pc, #20]	@ (8006d64 <MX_USB_DEVICE_Init+0x54>)
 8006d4e:	f7fe ff8d 	bl	8005c6c <USBD_Start>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d001      	beq.n	8006d5c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006d58:	f7f9 fb20 	bl	800039c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006d5c:	bf00      	nop
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	2000012c 	.word	0x2000012c
 8006d64:	200001a4 	.word	0x200001a4
 8006d68:	20000010 	.word	0x20000010
 8006d6c:	2000011c 	.word	0x2000011c

08006d70 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8006d70:	b480      	push	{r7}
 8006d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006d74:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bc80      	pop	{r7}
 8006d7c:	4770      	bx	lr

08006d7e <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8006d7e:	b480      	push	{r7}
 8006d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8006d82:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bc80      	pop	{r7}
 8006d8a:	4770      	bx	lr

08006d8c <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t *buffer)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 6 */
	if(buffer[0] == 2 && buffer[1] == '1'){
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	d109      	bne.n	8006db0 <CUSTOM_HID_OutEvent_FS+0x24>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	2b31      	cmp	r3, #49	@ 0x31
 8006da4:	d104      	bne.n	8006db0 <CUSTOM_HID_OutEvent_FS+0x24>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8006da6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006daa:	4804      	ldr	r0, [pc, #16]	@ (8006dbc <CUSTOM_HID_OutEvent_FS+0x30>)
 8006dac:	f7f9 feef 	bl	8000b8e <HAL_GPIO_TogglePin>
	}
  return (USBD_OK);
 8006db0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3708      	adds	r7, #8
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	40011000 	.word	0x40011000

08006dc0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	6039      	str	r1, [r7, #0]
 8006dca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	2212      	movs	r2, #18
 8006dd0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006dd2:	4b03      	ldr	r3, [pc, #12]	@ (8006de0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bc80      	pop	{r7}
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	20000148 	.word	0x20000148

08006de4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	4603      	mov	r3, r0
 8006dec:	6039      	str	r1, [r7, #0]
 8006dee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	2204      	movs	r2, #4
 8006df4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006df6:	4b03      	ldr	r3, [pc, #12]	@ (8006e04 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bc80      	pop	{r7}
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	2000015c 	.word	0x2000015c

08006e08 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	4603      	mov	r3, r0
 8006e10:	6039      	str	r1, [r7, #0]
 8006e12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006e14:	79fb      	ldrb	r3, [r7, #7]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d105      	bne.n	8006e26 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e1a:	683a      	ldr	r2, [r7, #0]
 8006e1c:	4907      	ldr	r1, [pc, #28]	@ (8006e3c <USBD_FS_ProductStrDescriptor+0x34>)
 8006e1e:	4808      	ldr	r0, [pc, #32]	@ (8006e40 <USBD_FS_ProductStrDescriptor+0x38>)
 8006e20:	f7ff fe99 	bl	8006b56 <USBD_GetString>
 8006e24:	e004      	b.n	8006e30 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e26:	683a      	ldr	r2, [r7, #0]
 8006e28:	4904      	ldr	r1, [pc, #16]	@ (8006e3c <USBD_FS_ProductStrDescriptor+0x34>)
 8006e2a:	4805      	ldr	r0, [pc, #20]	@ (8006e40 <USBD_FS_ProductStrDescriptor+0x38>)
 8006e2c:	f7ff fe93 	bl	8006b56 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e30:	4b02      	ldr	r3, [pc, #8]	@ (8006e3c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	20000468 	.word	0x20000468
 8006e40:	08007568 	.word	0x08007568

08006e44 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	6039      	str	r1, [r7, #0]
 8006e4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006e50:	683a      	ldr	r2, [r7, #0]
 8006e52:	4904      	ldr	r1, [pc, #16]	@ (8006e64 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006e54:	4804      	ldr	r0, [pc, #16]	@ (8006e68 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006e56:	f7ff fe7e 	bl	8006b56 <USBD_GetString>
  return USBD_StrDesc;
 8006e5a:	4b02      	ldr	r3, [pc, #8]	@ (8006e64 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3708      	adds	r7, #8
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	20000468 	.word	0x20000468
 8006e68:	0800757c 	.word	0x0800757c

08006e6c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	4603      	mov	r3, r0
 8006e74:	6039      	str	r1, [r7, #0]
 8006e76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	221a      	movs	r2, #26
 8006e7c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006e7e:	f000 f843 	bl	8006f08 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006e82:	4b02      	ldr	r3, [pc, #8]	@ (8006e8c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3708      	adds	r7, #8
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	20000160 	.word	0x20000160

08006e90 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	4603      	mov	r3, r0
 8006e98:	6039      	str	r1, [r7, #0]
 8006e9a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006e9c:	79fb      	ldrb	r3, [r7, #7]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d105      	bne.n	8006eae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006ea2:	683a      	ldr	r2, [r7, #0]
 8006ea4:	4907      	ldr	r1, [pc, #28]	@ (8006ec4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006ea6:	4808      	ldr	r0, [pc, #32]	@ (8006ec8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006ea8:	f7ff fe55 	bl	8006b56 <USBD_GetString>
 8006eac:	e004      	b.n	8006eb8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006eae:	683a      	ldr	r2, [r7, #0]
 8006eb0:	4904      	ldr	r1, [pc, #16]	@ (8006ec4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006eb2:	4805      	ldr	r0, [pc, #20]	@ (8006ec8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006eb4:	f7ff fe4f 	bl	8006b56 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006eb8:	4b02      	ldr	r3, [pc, #8]	@ (8006ec4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3708      	adds	r7, #8
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	20000468 	.word	0x20000468
 8006ec8:	08007588 	.word	0x08007588

08006ecc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	6039      	str	r1, [r7, #0]
 8006ed6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006ed8:	79fb      	ldrb	r3, [r7, #7]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d105      	bne.n	8006eea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	4907      	ldr	r1, [pc, #28]	@ (8006f00 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006ee2:	4808      	ldr	r0, [pc, #32]	@ (8006f04 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006ee4:	f7ff fe37 	bl	8006b56 <USBD_GetString>
 8006ee8:	e004      	b.n	8006ef4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006eea:	683a      	ldr	r2, [r7, #0]
 8006eec:	4904      	ldr	r1, [pc, #16]	@ (8006f00 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006eee:	4805      	ldr	r0, [pc, #20]	@ (8006f04 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006ef0:	f7ff fe31 	bl	8006b56 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ef4:	4b02      	ldr	r3, [pc, #8]	@ (8006f00 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3708      	adds	r7, #8
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	20000468 	.word	0x20000468
 8006f04:	080075a0 	.word	0x080075a0

08006f08 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006f0e:	4b0f      	ldr	r3, [pc, #60]	@ (8006f4c <Get_SerialNum+0x44>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006f14:	4b0e      	ldr	r3, [pc, #56]	@ (8006f50 <Get_SerialNum+0x48>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8006f54 <Get_SerialNum+0x4c>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4413      	add	r3, r2
 8006f26:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d009      	beq.n	8006f42 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006f2e:	2208      	movs	r2, #8
 8006f30:	4909      	ldr	r1, [pc, #36]	@ (8006f58 <Get_SerialNum+0x50>)
 8006f32:	68f8      	ldr	r0, [r7, #12]
 8006f34:	f000 f814 	bl	8006f60 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006f38:	2204      	movs	r2, #4
 8006f3a:	4908      	ldr	r1, [pc, #32]	@ (8006f5c <Get_SerialNum+0x54>)
 8006f3c:	68b8      	ldr	r0, [r7, #8]
 8006f3e:	f000 f80f 	bl	8006f60 <IntToUnicode>
  }
}
 8006f42:	bf00      	nop
 8006f44:	3710      	adds	r7, #16
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	1ffff7e8 	.word	0x1ffff7e8
 8006f50:	1ffff7ec 	.word	0x1ffff7ec
 8006f54:	1ffff7f0 	.word	0x1ffff7f0
 8006f58:	20000162 	.word	0x20000162
 8006f5c:	20000172 	.word	0x20000172

08006f60 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b087      	sub	sp, #28
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006f72:	2300      	movs	r3, #0
 8006f74:	75fb      	strb	r3, [r7, #23]
 8006f76:	e027      	b.n	8006fc8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	0f1b      	lsrs	r3, r3, #28
 8006f7c:	2b09      	cmp	r3, #9
 8006f7e:	d80b      	bhi.n	8006f98 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	0f1b      	lsrs	r3, r3, #28
 8006f84:	b2da      	uxtb	r2, r3
 8006f86:	7dfb      	ldrb	r3, [r7, #23]
 8006f88:	005b      	lsls	r3, r3, #1
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	440b      	add	r3, r1
 8006f90:	3230      	adds	r2, #48	@ 0x30
 8006f92:	b2d2      	uxtb	r2, r2
 8006f94:	701a      	strb	r2, [r3, #0]
 8006f96:	e00a      	b.n	8006fae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	0f1b      	lsrs	r3, r3, #28
 8006f9c:	b2da      	uxtb	r2, r3
 8006f9e:	7dfb      	ldrb	r3, [r7, #23]
 8006fa0:	005b      	lsls	r3, r3, #1
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	440b      	add	r3, r1
 8006fa8:	3237      	adds	r2, #55	@ 0x37
 8006faa:	b2d2      	uxtb	r2, r2
 8006fac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	011b      	lsls	r3, r3, #4
 8006fb2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006fb4:	7dfb      	ldrb	r3, [r7, #23]
 8006fb6:	005b      	lsls	r3, r3, #1
 8006fb8:	3301      	adds	r3, #1
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006fc2:	7dfb      	ldrb	r3, [r7, #23]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	75fb      	strb	r3, [r7, #23]
 8006fc8:	7dfa      	ldrb	r2, [r7, #23]
 8006fca:	79fb      	ldrb	r3, [r7, #7]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d3d3      	bcc.n	8006f78 <IntToUnicode+0x18>
  }
}
 8006fd0:	bf00      	nop
 8006fd2:	bf00      	nop
 8006fd4:	371c      	adds	r7, #28
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bc80      	pop	{r7}
 8006fda:	4770      	bx	lr

08006fdc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a0d      	ldr	r2, [pc, #52]	@ (8007020 <HAL_PCD_MspInit+0x44>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d113      	bne.n	8007016 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006fee:	4b0d      	ldr	r3, [pc, #52]	@ (8007024 <HAL_PCD_MspInit+0x48>)
 8006ff0:	69db      	ldr	r3, [r3, #28]
 8006ff2:	4a0c      	ldr	r2, [pc, #48]	@ (8007024 <HAL_PCD_MspInit+0x48>)
 8006ff4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006ff8:	61d3      	str	r3, [r2, #28]
 8006ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8007024 <HAL_PCD_MspInit+0x48>)
 8006ffc:	69db      	ldr	r3, [r3, #28]
 8006ffe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007002:	60fb      	str	r3, [r7, #12]
 8007004:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007006:	2200      	movs	r2, #0
 8007008:	2100      	movs	r1, #0
 800700a:	2014      	movs	r0, #20
 800700c:	f7f9 fbd5 	bl	80007ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007010:	2014      	movs	r0, #20
 8007012:	f7f9 fbee 	bl	80007f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007016:	bf00      	nop
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	40005c00 	.word	0x40005c00
 8007024:	40021000 	.word	0x40021000

08007028 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800703c:	4619      	mov	r1, r3
 800703e:	4610      	mov	r0, r2
 8007040:	f7fe fe5c 	bl	8005cfc <USBD_LL_SetupStage>
}
 8007044:	bf00      	nop
 8007046:	3708      	adds	r7, #8
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	460b      	mov	r3, r1
 8007056:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800705e:	78fa      	ldrb	r2, [r7, #3]
 8007060:	6879      	ldr	r1, [r7, #4]
 8007062:	4613      	mov	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4413      	add	r3, r2
 8007068:	00db      	lsls	r3, r3, #3
 800706a:	440b      	add	r3, r1
 800706c:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	78fb      	ldrb	r3, [r7, #3]
 8007074:	4619      	mov	r1, r3
 8007076:	f7fe fe8e 	bl	8005d96 <USBD_LL_DataOutStage>
}
 800707a:	bf00      	nop
 800707c:	3708      	adds	r7, #8
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b082      	sub	sp, #8
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
 800708a:	460b      	mov	r3, r1
 800708c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 8007094:	78fa      	ldrb	r2, [r7, #3]
 8007096:	6879      	ldr	r1, [r7, #4]
 8007098:	4613      	mov	r3, r2
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	4413      	add	r3, r2
 800709e:	00db      	lsls	r3, r3, #3
 80070a0:	440b      	add	r3, r1
 80070a2:	333c      	adds	r3, #60	@ 0x3c
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	78fb      	ldrb	r3, [r7, #3]
 80070a8:	4619      	mov	r1, r3
 80070aa:	f7fe fee5 	bl	8005e78 <USBD_LL_DataInStage>
}
 80070ae:	bf00      	nop
 80070b0:	3708      	adds	r7, #8
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b082      	sub	sp, #8
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 80070c4:	4618      	mov	r0, r3
 80070c6:	f7fe fff5 	bl	80060b4 <USBD_LL_SOF>
}
 80070ca:	bf00      	nop
 80070cc:	3708      	adds	r7, #8
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b084      	sub	sp, #16
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80070da:	2301      	movs	r3, #1
 80070dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	2b02      	cmp	r3, #2
 80070e4:	d001      	beq.n	80070ea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80070e6:	f7f9 f959 	bl	800039c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 80070f0:	7bfa      	ldrb	r2, [r7, #15]
 80070f2:	4611      	mov	r1, r2
 80070f4:	4618      	mov	r0, r3
 80070f6:	f7fe ffa5 	bl	8006044 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8007100:	4618      	mov	r0, r3
 8007102:	f7fe ff5e 	bl	8005fc2 <USBD_LL_Reset>
}
 8007106:	bf00      	nop
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
	...

08007110 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800711e:	4618      	mov	r0, r3
 8007120:	f7fe ff9f 	bl	8006062 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	699b      	ldr	r3, [r3, #24]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d005      	beq.n	8007138 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800712c:	4b04      	ldr	r3, [pc, #16]	@ (8007140 <HAL_PCD_SuspendCallback+0x30>)
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	4a03      	ldr	r2, [pc, #12]	@ (8007140 <HAL_PCD_SuspendCallback+0x30>)
 8007132:	f043 0306 	orr.w	r3, r3, #6
 8007136:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007138:	bf00      	nop
 800713a:	3708      	adds	r7, #8
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	e000ed00 	.word	0xe000ed00

08007144 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8007152:	4618      	mov	r0, r3
 8007154:	f7fe ff99 	bl	800608a <USBD_LL_Resume>
}
 8007158:	bf00      	nop
 800715a:	3708      	adds	r7, #8
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007168:	4a23      	ldr	r2, [pc, #140]	@ (80071f8 <USBD_LL_Init+0x98>)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a21      	ldr	r2, [pc, #132]	@ (80071f8 <USBD_LL_Init+0x98>)
 8007174:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007178:	4b1f      	ldr	r3, [pc, #124]	@ (80071f8 <USBD_LL_Init+0x98>)
 800717a:	4a20      	ldr	r2, [pc, #128]	@ (80071fc <USBD_LL_Init+0x9c>)
 800717c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800717e:	4b1e      	ldr	r3, [pc, #120]	@ (80071f8 <USBD_LL_Init+0x98>)
 8007180:	2208      	movs	r2, #8
 8007182:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007184:	4b1c      	ldr	r3, [pc, #112]	@ (80071f8 <USBD_LL_Init+0x98>)
 8007186:	2202      	movs	r2, #2
 8007188:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800718a:	4b1b      	ldr	r3, [pc, #108]	@ (80071f8 <USBD_LL_Init+0x98>)
 800718c:	2200      	movs	r2, #0
 800718e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007190:	4b19      	ldr	r3, [pc, #100]	@ (80071f8 <USBD_LL_Init+0x98>)
 8007192:	2200      	movs	r2, #0
 8007194:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007196:	4b18      	ldr	r3, [pc, #96]	@ (80071f8 <USBD_LL_Init+0x98>)
 8007198:	2200      	movs	r2, #0
 800719a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800719c:	4816      	ldr	r0, [pc, #88]	@ (80071f8 <USBD_LL_Init+0x98>)
 800719e:	f7f9 fd31 	bl	8000c04 <HAL_PCD_Init>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d001      	beq.n	80071ac <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80071a8:	f7f9 f8f8 	bl	800039c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80071b2:	2318      	movs	r3, #24
 80071b4:	2200      	movs	r2, #0
 80071b6:	2100      	movs	r1, #0
 80071b8:	f7fb fa38 	bl	800262c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80071c2:	2358      	movs	r3, #88	@ 0x58
 80071c4:	2200      	movs	r2, #0
 80071c6:	2180      	movs	r1, #128	@ 0x80
 80071c8:	f7fb fa30 	bl	800262c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80071d2:	2398      	movs	r3, #152	@ 0x98
 80071d4:	2200      	movs	r2, #0
 80071d6:	2181      	movs	r1, #129	@ 0x81
 80071d8:	f7fb fa28 	bl	800262c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80071e2:	23d8      	movs	r3, #216	@ 0xd8
 80071e4:	2200      	movs	r2, #0
 80071e6:	2101      	movs	r1, #1
 80071e8:	f7fb fa20 	bl	800262c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3708      	adds	r7, #8
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	200004e8 	.word	0x200004e8
 80071fc:	40005c00 	.word	0x40005c00

08007200 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007208:	2300      	movs	r3, #0
 800720a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800720c:	2300      	movs	r3, #0
 800720e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007216:	4618      	mov	r0, r3
 8007218:	f7f9 fdf3 	bl	8000e02 <HAL_PCD_Start>
 800721c:	4603      	mov	r3, r0
 800721e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007220:	7bfb      	ldrb	r3, [r7, #15]
 8007222:	4618      	mov	r0, r3
 8007224:	f000 f93c 	bl	80074a0 <USBD_Get_USB_Status>
 8007228:	4603      	mov	r3, r0
 800722a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800722c:	7bbb      	ldrb	r3, [r7, #14]
}
 800722e:	4618      	mov	r0, r3
 8007230:	3710      	adds	r7, #16
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b084      	sub	sp, #16
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
 800723e:	4608      	mov	r0, r1
 8007240:	4611      	mov	r1, r2
 8007242:	461a      	mov	r2, r3
 8007244:	4603      	mov	r3, r0
 8007246:	70fb      	strb	r3, [r7, #3]
 8007248:	460b      	mov	r3, r1
 800724a:	70bb      	strb	r3, [r7, #2]
 800724c:	4613      	mov	r3, r2
 800724e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007250:	2300      	movs	r3, #0
 8007252:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007254:	2300      	movs	r3, #0
 8007256:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800725e:	78bb      	ldrb	r3, [r7, #2]
 8007260:	883a      	ldrh	r2, [r7, #0]
 8007262:	78f9      	ldrb	r1, [r7, #3]
 8007264:	f7f9 ff48 	bl	80010f8 <HAL_PCD_EP_Open>
 8007268:	4603      	mov	r3, r0
 800726a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800726c:	7bfb      	ldrb	r3, [r7, #15]
 800726e:	4618      	mov	r0, r3
 8007270:	f000 f916 	bl	80074a0 <USBD_Get_USB_Status>
 8007274:	4603      	mov	r3, r0
 8007276:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007278:	7bbb      	ldrb	r3, [r7, #14]
}
 800727a:	4618      	mov	r0, r3
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007282:	b580      	push	{r7, lr}
 8007284:	b084      	sub	sp, #16
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
 800728a:	460b      	mov	r3, r1
 800728c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800728e:	2300      	movs	r3, #0
 8007290:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007292:	2300      	movs	r3, #0
 8007294:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800729c:	78fa      	ldrb	r2, [r7, #3]
 800729e:	4611      	mov	r1, r2
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7f9 ff86 	bl	80011b2 <HAL_PCD_EP_Close>
 80072a6:	4603      	mov	r3, r0
 80072a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072aa:	7bfb      	ldrb	r3, [r7, #15]
 80072ac:	4618      	mov	r0, r3
 80072ae:	f000 f8f7 	bl	80074a0 <USBD_Get_USB_Status>
 80072b2:	4603      	mov	r3, r0
 80072b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	460b      	mov	r3, r1
 80072ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072cc:	2300      	movs	r3, #0
 80072ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072d0:	2300      	movs	r3, #0
 80072d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80072da:	78fa      	ldrb	r2, [r7, #3]
 80072dc:	4611      	mov	r1, r2
 80072de:	4618      	mov	r0, r3
 80072e0:	f7fa f817 	bl	8001312 <HAL_PCD_EP_SetStall>
 80072e4:	4603      	mov	r3, r0
 80072e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072e8:	7bfb      	ldrb	r3, [r7, #15]
 80072ea:	4618      	mov	r0, r3
 80072ec:	f000 f8d8 	bl	80074a0 <USBD_Get_USB_Status>
 80072f0:	4603      	mov	r3, r0
 80072f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b084      	sub	sp, #16
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
 8007306:	460b      	mov	r3, r1
 8007308:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800730a:	2300      	movs	r3, #0
 800730c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800730e:	2300      	movs	r3, #0
 8007310:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007318:	78fa      	ldrb	r2, [r7, #3]
 800731a:	4611      	mov	r1, r2
 800731c:	4618      	mov	r0, r3
 800731e:	f7fa f858 	bl	80013d2 <HAL_PCD_EP_ClrStall>
 8007322:	4603      	mov	r3, r0
 8007324:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007326:	7bfb      	ldrb	r3, [r7, #15]
 8007328:	4618      	mov	r0, r3
 800732a:	f000 f8b9 	bl	80074a0 <USBD_Get_USB_Status>
 800732e:	4603      	mov	r3, r0
 8007330:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007332:	7bbb      	ldrb	r3, [r7, #14]
}
 8007334:	4618      	mov	r0, r3
 8007336:	3710      	adds	r7, #16
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800733c:	b480      	push	{r7}
 800733e:	b085      	sub	sp, #20
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	460b      	mov	r3, r1
 8007346:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800734e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007350:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007354:	2b00      	cmp	r3, #0
 8007356:	da0c      	bge.n	8007372 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007358:	78fb      	ldrb	r3, [r7, #3]
 800735a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800735e:	68f9      	ldr	r1, [r7, #12]
 8007360:	1c5a      	adds	r2, r3, #1
 8007362:	4613      	mov	r3, r2
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	4413      	add	r3, r2
 8007368:	00db      	lsls	r3, r3, #3
 800736a:	440b      	add	r3, r1
 800736c:	3302      	adds	r3, #2
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	e00b      	b.n	800738a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007372:	78fb      	ldrb	r3, [r7, #3]
 8007374:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007378:	68f9      	ldr	r1, [r7, #12]
 800737a:	4613      	mov	r3, r2
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	4413      	add	r3, r2
 8007380:	00db      	lsls	r3, r3, #3
 8007382:	440b      	add	r3, r1
 8007384:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 8007388:	781b      	ldrb	r3, [r3, #0]
  }
}
 800738a:	4618      	mov	r0, r3
 800738c:	3714      	adds	r7, #20
 800738e:	46bd      	mov	sp, r7
 8007390:	bc80      	pop	{r7}
 8007392:	4770      	bx	lr

08007394 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	460b      	mov	r3, r1
 800739e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073a0:	2300      	movs	r3, #0
 80073a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073a4:	2300      	movs	r3, #0
 80073a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80073ae:	78fa      	ldrb	r2, [r7, #3]
 80073b0:	4611      	mov	r1, r2
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7f9 fe7b 	bl	80010ae <HAL_PCD_SetAddress>
 80073b8:	4603      	mov	r3, r0
 80073ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073bc:	7bfb      	ldrb	r3, [r7, #15]
 80073be:	4618      	mov	r0, r3
 80073c0:	f000 f86e 	bl	80074a0 <USBD_Get_USB_Status>
 80073c4:	4603      	mov	r3, r0
 80073c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b086      	sub	sp, #24
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	60f8      	str	r0, [r7, #12]
 80073da:	607a      	str	r2, [r7, #4]
 80073dc:	461a      	mov	r2, r3
 80073de:	460b      	mov	r3, r1
 80073e0:	72fb      	strb	r3, [r7, #11]
 80073e2:	4613      	mov	r3, r2
 80073e4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073e6:	2300      	movs	r3, #0
 80073e8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073ea:	2300      	movs	r3, #0
 80073ec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80073f4:	893b      	ldrh	r3, [r7, #8]
 80073f6:	7af9      	ldrb	r1, [r7, #11]
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	f7f9 ff53 	bl	80012a4 <HAL_PCD_EP_Transmit>
 80073fe:	4603      	mov	r3, r0
 8007400:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007402:	7dfb      	ldrb	r3, [r7, #23]
 8007404:	4618      	mov	r0, r3
 8007406:	f000 f84b 	bl	80074a0 <USBD_Get_USB_Status>
 800740a:	4603      	mov	r3, r0
 800740c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800740e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007410:	4618      	mov	r0, r3
 8007412:	3718      	adds	r7, #24
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b086      	sub	sp, #24
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	607a      	str	r2, [r7, #4]
 8007422:	461a      	mov	r2, r3
 8007424:	460b      	mov	r3, r1
 8007426:	72fb      	strb	r3, [r7, #11]
 8007428:	4613      	mov	r3, r2
 800742a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800742c:	2300      	movs	r3, #0
 800742e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007430:	2300      	movs	r3, #0
 8007432:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800743a:	893b      	ldrh	r3, [r7, #8]
 800743c:	7af9      	ldrb	r1, [r7, #11]
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	f7f9 feff 	bl	8001242 <HAL_PCD_EP_Receive>
 8007444:	4603      	mov	r3, r0
 8007446:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007448:	7dfb      	ldrb	r3, [r7, #23]
 800744a:	4618      	mov	r0, r3
 800744c:	f000 f828 	bl	80074a0 <USBD_Get_USB_Status>
 8007450:	4603      	mov	r3, r0
 8007452:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007454:	7dbb      	ldrb	r3, [r7, #22]
}
 8007456:	4618      	mov	r0, r3
 8007458:	3718      	adds	r7, #24
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
	...

08007460 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8007468:	4b02      	ldr	r3, [pc, #8]	@ (8007474 <USBD_static_malloc+0x14>)
}
 800746a:	4618      	mov	r0, r3
 800746c:	370c      	adds	r7, #12
 800746e:	46bd      	mov	sp, r7
 8007470:	bc80      	pop	{r7}
 8007472:	4770      	bx	lr
 8007474:	200007d8 	.word	0x200007d8

08007478 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]

}
 8007480:	bf00      	nop
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	bc80      	pop	{r7}
 8007488:	4770      	bx	lr

0800748a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800748a:	b480      	push	{r7}
 800748c:	b083      	sub	sp, #12
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
 8007492:	460b      	mov	r3, r1
 8007494:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007496:	bf00      	nop
 8007498:	370c      	adds	r7, #12
 800749a:	46bd      	mov	sp, r7
 800749c:	bc80      	pop	{r7}
 800749e:	4770      	bx	lr

080074a0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	4603      	mov	r3, r0
 80074a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074aa:	2300      	movs	r3, #0
 80074ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80074ae:	79fb      	ldrb	r3, [r7, #7]
 80074b0:	2b03      	cmp	r3, #3
 80074b2:	d817      	bhi.n	80074e4 <USBD_Get_USB_Status+0x44>
 80074b4:	a201      	add	r2, pc, #4	@ (adr r2, 80074bc <USBD_Get_USB_Status+0x1c>)
 80074b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ba:	bf00      	nop
 80074bc:	080074cd 	.word	0x080074cd
 80074c0:	080074d3 	.word	0x080074d3
 80074c4:	080074d9 	.word	0x080074d9
 80074c8:	080074df 	.word	0x080074df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80074cc:	2300      	movs	r3, #0
 80074ce:	73fb      	strb	r3, [r7, #15]
    break;
 80074d0:	e00b      	b.n	80074ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80074d2:	2302      	movs	r3, #2
 80074d4:	73fb      	strb	r3, [r7, #15]
    break;
 80074d6:	e008      	b.n	80074ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80074d8:	2301      	movs	r3, #1
 80074da:	73fb      	strb	r3, [r7, #15]
    break;
 80074dc:	e005      	b.n	80074ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80074de:	2302      	movs	r3, #2
 80074e0:	73fb      	strb	r3, [r7, #15]
    break;
 80074e2:	e002      	b.n	80074ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80074e4:	2302      	movs	r3, #2
 80074e6:	73fb      	strb	r3, [r7, #15]
    break;
 80074e8:	bf00      	nop
  }
  return usb_status;
 80074ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3714      	adds	r7, #20
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bc80      	pop	{r7}
 80074f4:	4770      	bx	lr
 80074f6:	bf00      	nop

080074f8 <memset>:
 80074f8:	4603      	mov	r3, r0
 80074fa:	4402      	add	r2, r0
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d100      	bne.n	8007502 <memset+0xa>
 8007500:	4770      	bx	lr
 8007502:	f803 1b01 	strb.w	r1, [r3], #1
 8007506:	e7f9      	b.n	80074fc <memset+0x4>

08007508 <__libc_init_array>:
 8007508:	b570      	push	{r4, r5, r6, lr}
 800750a:	2600      	movs	r6, #0
 800750c:	4d0c      	ldr	r5, [pc, #48]	@ (8007540 <__libc_init_array+0x38>)
 800750e:	4c0d      	ldr	r4, [pc, #52]	@ (8007544 <__libc_init_array+0x3c>)
 8007510:	1b64      	subs	r4, r4, r5
 8007512:	10a4      	asrs	r4, r4, #2
 8007514:	42a6      	cmp	r6, r4
 8007516:	d109      	bne.n	800752c <__libc_init_array+0x24>
 8007518:	f000 f81a 	bl	8007550 <_init>
 800751c:	2600      	movs	r6, #0
 800751e:	4d0a      	ldr	r5, [pc, #40]	@ (8007548 <__libc_init_array+0x40>)
 8007520:	4c0a      	ldr	r4, [pc, #40]	@ (800754c <__libc_init_array+0x44>)
 8007522:	1b64      	subs	r4, r4, r5
 8007524:	10a4      	asrs	r4, r4, #2
 8007526:	42a6      	cmp	r6, r4
 8007528:	d105      	bne.n	8007536 <__libc_init_array+0x2e>
 800752a:	bd70      	pop	{r4, r5, r6, pc}
 800752c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007530:	4798      	blx	r3
 8007532:	3601      	adds	r6, #1
 8007534:	e7ee      	b.n	8007514 <__libc_init_array+0xc>
 8007536:	f855 3b04 	ldr.w	r3, [r5], #4
 800753a:	4798      	blx	r3
 800753c:	3601      	adds	r6, #1
 800753e:	e7f2      	b.n	8007526 <__libc_init_array+0x1e>
 8007540:	080075e0 	.word	0x080075e0
 8007544:	080075e0 	.word	0x080075e0
 8007548:	080075e0 	.word	0x080075e0
 800754c:	080075e4 	.word	0x080075e4

08007550 <_init>:
 8007550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007552:	bf00      	nop
 8007554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007556:	bc08      	pop	{r3}
 8007558:	469e      	mov	lr, r3
 800755a:	4770      	bx	lr

0800755c <_fini>:
 800755c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800755e:	bf00      	nop
 8007560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007562:	bc08      	pop	{r3}
 8007564:	469e      	mov	lr, r3
 8007566:	4770      	bx	lr
